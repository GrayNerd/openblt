
openblt_et4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000599c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  0800639c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          00001014  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000a00  200011f4  200011f4  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001440d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003728  00000000  00000000  0003461d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f88  00000000  00000000  00037d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e40  00000000  00000000  00038cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00024e9f  00000000  00000000  00039b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000110c0  00000000  00000000  0005e9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d4ade  00000000  00000000  0006fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014454d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a10  00000000  00000000  001445c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000befc  00000000  00000000  00146fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b0c 	.word	0x08005b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08005b0c 	.word	0x08005b0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 80004c8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80004ca:	4770      	bx	lr

080004cc <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 80004cc:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80004ce:	4770      	bx	lr

080004d0 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 80004d0:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals. */
  CpuIrqDisable();
 80004d2:	f7ff fff9 	bl	80004c8 <CpuIrqDisable>
} /*** end of CpuInit ***/
 80004d6:	bd08      	pop	{r3, pc}

080004d8 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 80004d8:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 80004da:	f000 fa01 	bl	80008e0 <NvmVerifyChecksum>
 80004de:	b900      	cbnz	r0, 80004e2 <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 80004e0:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 80004e2:	f003 f887 	bl	80035f4 <CpuUserProgramStartHook>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d0fa      	beq.n	80004e0 <CpuStartUserProgram+0x8>
  ComFree();
 80004ea:	f000 fb7d 	bl	8000be8 <ComFree>
  TimerReset();
 80004ee:	f000 fabb 	bl	8000a68 <TimerReset>
  HAL_DeInit();
 80004f2:	f003 faab 	bl	8003a4c <HAL_DeInit>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 80004f6:	f000 f9f7 	bl	80008e8 <NvmGetUserProgBaseAddress>
 80004fa:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80004fe:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <CpuStartUserProgram+0x3c>)
 8000504:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8000506:	f000 f9ef 	bl	80008e8 <NvmGetUserProgBaseAddress>
 800050a:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 800050c:	f7ff ffde 	bl	80004cc <CpuIrqEnable>
  pProgResetHandler();
 8000510:	47a0      	blx	r4
 8000512:	e7e5      	b.n	80004e0 <CpuStartUserProgram+0x8>
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000518:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 800051a:	e008      	b.n	800052e <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 800051c:	1c4d      	adds	r5, r1, #1
 800051e:	1c46      	adds	r6, r0, #1
 8000520:	780b      	ldrb	r3, [r1, #0]
 8000522:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8000524:	f000 fba0 	bl	8000c68 <CopService>
    *to++ = *from++;
 8000528:	4630      	mov	r0, r6
 800052a:	4629      	mov	r1, r5
  while (len-- > 0)
 800052c:	4622      	mov	r2, r4
 800052e:	1e53      	subs	r3, r2, #1
 8000530:	b29c      	uxth	r4, r3
 8000532:	2a00      	cmp	r2, #0
 8000534:	d1f2      	bne.n	800051c <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 8000536:	bd70      	pop	{r4, r5, r6, pc}

08000538 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 800053c:	2400      	movs	r4, #0
 800053e:	e001      	b.n	8000544 <FlashGetSector+0xc>
 8000540:	3401      	adds	r4, #1
 8000542:	b2e4      	uxtb	r4, r4
 8000544:	2c09      	cmp	r4, #9
 8000546:	d815      	bhi.n	8000574 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 8000548:	f000 fb8e 	bl	8000c68 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 800054c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000550:	0093      	lsls	r3, r2, #2
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <FlashGetSector+0x40>)
 8000554:	58d3      	ldr	r3, [r2, r3]
 8000556:	42ab      	cmp	r3, r5
 8000558:	d8f2      	bhi.n	8000540 <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 800055a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800055e:	0091      	lsls	r1, r2, #2
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <FlashGetSector+0x40>)
 8000562:	440a      	add	r2, r1
 8000564:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000566:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9e9      	bls.n	8000540 <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 800056c:	4b02      	ldr	r3, [pc, #8]	; (8000578 <FlashGetSector+0x40>)
 800056e:	440b      	add	r3, r1
 8000570:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 8000572:	e000      	b.n	8000576 <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000574:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8000576:	bd38      	pop	{r3, r4, r5, pc}
 8000578:	08005b24 	.word	0x08005b24

0800057c <FlashInitBlock>:
{
 800057c:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 800057e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8000582:	b953      	cbnz	r3, 800059a <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8000584:	6803      	ldr	r3, [r0, #0]
 8000586:	428b      	cmp	r3, r1
 8000588:	d009      	beq.n	800059e <FlashInitBlock+0x22>
  block->base_addr = address;
 800058a:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800058e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000592:	f7ff ffc1 	bl	8000518 <CpuMemCopy>
  return BLT_TRUE;
 8000596:	2001      	movs	r0, #1
 8000598:	e000      	b.n	800059c <FlashInitBlock+0x20>
    return BLT_FALSE;
 800059a:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 800059c:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 800059e:	2001      	movs	r0, #1
 80005a0:	e7fc      	b.n	800059c <FlashInitBlock+0x20>

080005a2 <FlashWriteBlock>:
{
 80005a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005a6:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 80005a8:	f003 fba8 	bl	8003cfc <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 80005ac:	2400      	movs	r4, #0
 80005ae:	2c7f      	cmp	r4, #127	; 0x7f
 80005b0:	d814      	bhi.n	80005dc <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 80005b2:	683e      	ldr	r6, [r7, #0]
 80005b4:	00a3      	lsls	r3, r4, #2
 80005b6:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 80005ba:	443b      	add	r3, r7
 80005bc:	685d      	ldr	r5, [r3, #4]
    CopService();
 80005be:	f000 fb53 	bl	8000c68 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 80005c2:	462a      	mov	r2, r5
 80005c4:	2300      	movs	r3, #0
 80005c6:	4641      	mov	r1, r8
 80005c8:	2002      	movs	r0, #2
 80005ca:	f003 fbeb 	bl	8003da4 <HAL_FLASH_Program>
 80005ce:	b938      	cbnz	r0, 80005e0 <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 80005d0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	d109      	bne.n	80005ec <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 80005d8:	3401      	adds	r4, #1
 80005da:	e7e8      	b.n	80005ae <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 80005dc:	2401      	movs	r4, #1
 80005de:	e000      	b.n	80005e2 <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 80005e0:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 80005e2:	f003 fba3 	bl	8003d2c <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 80005e6:	4620      	mov	r0, r4
 80005e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 80005ec:	2400      	movs	r4, #0
 80005ee:	e7f8      	b.n	80005e2 <FlashWriteBlock+0x40>

080005f0 <FlashSwitchBlock>:
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
 80005f2:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <FlashSwitchBlock+0x38>)
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d011      	beq.n	800061e <FlashSwitchBlock+0x2e>
 80005fa:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <FlashSwitchBlock+0x3c>)
 80005fe:	4299      	cmp	r1, r3
 8000600:	d107      	bne.n	8000612 <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 8000602:	4c09      	ldr	r4, [pc, #36]	; (8000628 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000604:	4629      	mov	r1, r5
 8000606:	4620      	mov	r0, r4
 8000608:	f7ff ffb8 	bl	800057c <FlashInitBlock>
 800060c:	b148      	cbz	r0, 8000622 <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 800060e:	4620      	mov	r0, r4
 8000610:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 8000612:	f7ff ffc6 	bl	80005a2 <FlashWriteBlock>
 8000616:	2800      	cmp	r0, #0
 8000618:	d1f4      	bne.n	8000604 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 800061a:	2400      	movs	r4, #0
 800061c:	e7f7      	b.n	800060e <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 800061e:	4c04      	ldr	r4, [pc, #16]	; (8000630 <FlashSwitchBlock+0x40>)
 8000620:	e7f0      	b.n	8000604 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 8000622:	2400      	movs	r4, #0
 8000624:	e7f3      	b.n	800060e <FlashSwitchBlock+0x1e>
 8000626:	bf00      	nop
 8000628:	20000400 	.word	0x20000400
 800062c:	08008000 	.word	0x08008000
 8000630:	200001fc 	.word	0x200001fc

08000634 <FlashAddToBlock>:
{
 8000634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000638:	4606      	mov	r6, r0
 800063a:	460c      	mov	r4, r1
 800063c:	4617      	mov	r7, r2
 800063e:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000640:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8000644:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800064e:	d007      	beq.n	8000660 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8000650:	6833      	ldr	r3, [r6, #0]
 8000652:	4543      	cmp	r3, r8
 8000654:	d10b      	bne.n	800066e <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 8000656:	6833      	ldr	r3, [r6, #0]
 8000658:	1ae4      	subs	r4, r4, r3
 800065a:	4434      	add	r4, r6
 800065c:	3404      	adds	r4, #4
 800065e:	e015      	b.n	800068c <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8000660:	4641      	mov	r1, r8
 8000662:	f7ff ff8b 	bl	800057c <FlashInitBlock>
 8000666:	4603      	mov	r3, r0
 8000668:	2800      	cmp	r0, #0
 800066a:	d1f1      	bne.n	8000650 <FlashAddToBlock+0x1c>
 800066c:	e01f      	b.n	80006ae <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 800066e:	4641      	mov	r1, r8
 8000670:	4630      	mov	r0, r6
 8000672:	f7ff ffbd 	bl	80005f0 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8000676:	4606      	mov	r6, r0
 8000678:	2800      	cmp	r0, #0
 800067a:	d1ec      	bne.n	8000656 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 800067c:	2300      	movs	r3, #0
 800067e:	e016      	b.n	80006ae <FlashAddToBlock+0x7a>
    *dst = *src;
 8000680:	f817 3b01 	ldrb.w	r3, [r7], #1
 8000684:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8000688:	3d01      	subs	r5, #1
 800068a:	d00f      	beq.n	80006ac <FlashAddToBlock+0x78>
    CopService();
 800068c:	f000 faec 	bl	8000c68 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8000690:	1d33      	adds	r3, r6, #4
 8000692:	1ae3      	subs	r3, r4, r3
 8000694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000698:	d3f2      	bcc.n	8000680 <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 800069a:	f508 7100 	add.w	r1, r8, #512	; 0x200
 800069e:	4630      	mov	r0, r6
 80006a0:	f7ff ffa6 	bl	80005f0 <FlashSwitchBlock>
      if (block == BLT_NULL)
 80006a4:	4606      	mov	r6, r0
 80006a6:	b128      	cbz	r0, 80006b4 <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 80006a8:	1d04      	adds	r4, r0, #4
 80006aa:	e7e9      	b.n	8000680 <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 80006ac:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 80006ae:	4618      	mov	r0, r3
 80006b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e7fa      	b.n	80006ae <FlashAddToBlock+0x7a>

080006b8 <FlashEraseSectors>:
{
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	4604      	mov	r4, r0
 80006be:	460d      	mov	r5, r1
  blt_int32u eraseSectorError = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 80006c4:	4288      	cmp	r0, r1
 80006c6:	d80e      	bhi.n	80006e6 <FlashEraseSectors+0x2e>
  blt_bool result = BLT_TRUE;
 80006c8:	2601      	movs	r6, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 80006ca:	2c01      	cmp	r4, #1
 80006cc:	d91e      	bls.n	800070c <FlashEraseSectors+0x54>
 80006ce:	2d0b      	cmp	r5, #11
 80006d0:	d820      	bhi.n	8000714 <FlashEraseSectors+0x5c>
  if (result == BLT_TRUE)
 80006d2:	b1e6      	cbz	r6, 800070e <FlashEraseSectors+0x56>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80006d4:	2300      	movs	r3, #0
 80006d6:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80006d8:	2302      	movs	r3, #2
 80006da:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 80006e0:	f003 fb0c 	bl	8003cfc <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 80006e4:	e003      	b.n	80006ee <FlashEraseSectors+0x36>
    result = BLT_FALSE;
 80006e6:	2600      	movs	r6, #0
 80006e8:	e7ef      	b.n	80006ca <FlashEraseSectors+0x12>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 80006ea:	3401      	adds	r4, #1
 80006ec:	b2e4      	uxtb	r4, r4
 80006ee:	42ac      	cmp	r4, r5
 80006f0:	d809      	bhi.n	8000706 <FlashEraseSectors+0x4e>
      CopService();
 80006f2:	f000 fab9 	bl	8000c68 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 80006f6:	9403      	str	r4, [sp, #12]
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 80006f8:	4669      	mov	r1, sp
 80006fa:	a801      	add	r0, sp, #4
 80006fc:	f003 fc00 	bl	8003f00 <HAL_FLASHEx_Erase>
 8000700:	2800      	cmp	r0, #0
 8000702:	d0f2      	beq.n	80006ea <FlashEraseSectors+0x32>
        result = BLT_FALSE;
 8000704:	2600      	movs	r6, #0
    HAL_FLASH_Lock();
 8000706:	f003 fb11 	bl	8003d2c <HAL_FLASH_Lock>
 800070a:	e000      	b.n	800070e <FlashEraseSectors+0x56>
 800070c:	2600      	movs	r6, #0
} /*** end of FlashEraseSectors ***/
 800070e:	4630      	mov	r0, r6
 8000710:	b006      	add	sp, #24
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	2600      	movs	r6, #0
 8000716:	e7fa      	b.n	800070e <FlashEraseSectors+0x56>

08000718 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	4a02      	ldr	r2, [pc, #8]	; (8000728 <FlashInit+0x10>)
 800071e:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000720:	4a02      	ldr	r2, [pc, #8]	; (800072c <FlashInit+0x14>)
 8000722:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	200001fc 	.word	0x200001fc
 800072c:	20000400 	.word	0x20000400

08000730 <FlashWrite>:
{
 8000730:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000732:	1e4b      	subs	r3, r1, #1
 8000734:	4c15      	ldr	r4, [pc, #84]	; (800078c <FlashWrite+0x5c>)
 8000736:	1a24      	subs	r4, r4, r0
 8000738:	42a3      	cmp	r3, r4
 800073a:	d901      	bls.n	8000740 <FlashWrite+0x10>
    return BLT_FALSE;
 800073c:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	4616      	mov	r6, r2
 8000742:	460d      	mov	r5, r1
 8000744:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000746:	f7ff fef7 	bl	8000538 <FlashGetSector>
 800074a:	28ff      	cmp	r0, #255	; 0xff
 800074c:	d01a      	beq.n	8000784 <FlashWrite+0x54>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 800074e:	1928      	adds	r0, r5, r4
 8000750:	3801      	subs	r0, #1
 8000752:	f7ff fef1 	bl	8000538 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000756:	28ff      	cmp	r0, #255	; 0xff
 8000758:	d016      	beq.n	8000788 <FlashWrite+0x58>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800075a:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 800075e:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <FlashWrite+0x60>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d006      	beq.n	8000776 <FlashWrite+0x46>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8000768:	462b      	mov	r3, r5
 800076a:	4632      	mov	r2, r6
 800076c:	4621      	mov	r1, r4
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <FlashWrite+0x64>)
 8000770:	f7ff ff60 	bl	8000634 <FlashAddToBlock>
 8000774:	e7e3      	b.n	800073e <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8000776:	462b      	mov	r3, r5
 8000778:	4632      	mov	r2, r6
 800077a:	4621      	mov	r1, r4
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <FlashWrite+0x68>)
 800077e:	f7ff ff59 	bl	8000634 <FlashAddToBlock>
 8000782:	e7dc      	b.n	800073e <FlashWrite+0xe>
    return BLT_FALSE;
 8000784:	2000      	movs	r0, #0
 8000786:	e7da      	b.n	800073e <FlashWrite+0xe>
 8000788:	2000      	movs	r0, #0
 800078a:	e7d8      	b.n	800073e <FlashWrite+0xe>
 800078c:	080fffff 	.word	0x080fffff
 8000790:	08008000 	.word	0x08008000
 8000794:	200001fc 	.word	0x200001fc
 8000798:	20000400 	.word	0x20000400

0800079c <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800079c:	1e4a      	subs	r2, r1, #1
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <FlashErase+0x3c>)
 80007a0:	1a1b      	subs	r3, r3, r0
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d901      	bls.n	80007aa <FlashErase+0xe>
    return BLT_FALSE;
 80007a6:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 80007a8:	4770      	bx	lr
{
 80007aa:	b570      	push	{r4, r5, r6, lr}
 80007ac:	460c      	mov	r4, r1
 80007ae:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 80007b0:	f7ff fec2 	bl	8000538 <FlashGetSector>
 80007b4:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 80007b6:	1960      	adds	r0, r4, r5
 80007b8:	3801      	subs	r0, #1
 80007ba:	f7ff febd 	bl	8000538 <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80007be:	2eff      	cmp	r6, #255	; 0xff
 80007c0:	d006      	beq.n	80007d0 <FlashErase+0x34>
 80007c2:	28ff      	cmp	r0, #255	; 0xff
 80007c4:	d006      	beq.n	80007d4 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 80007c6:	4601      	mov	r1, r0
 80007c8:	4630      	mov	r0, r6
 80007ca:	f7ff ff75 	bl	80006b8 <FlashEraseSectors>
} /*** end of FlashErase ***/
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 80007d0:	2000      	movs	r0, #0
 80007d2:	e7fc      	b.n	80007ce <FlashErase+0x32>
 80007d4:	2000      	movs	r0, #0
 80007d6:	e7fa      	b.n	80007ce <FlashErase+0x32>
 80007d8:	080fffff 	.word	0x080fffff

080007dc <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <FlashWriteChecksum+0x44>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d01a      	beq.n	800081c <FlashWriteChecksum+0x40>
{
 80007e6:	b500      	push	{lr}
 80007e8:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 80007ea:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <FlashWriteChecksum+0x44>)
 80007ec:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 80007ee:	6891      	ldr	r1, [r2, #8]
 80007f0:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 80007f2:	68d1      	ldr	r1, [r2, #12]
 80007f4:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 80007f6:	6911      	ldr	r1, [r2, #16]
 80007f8:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 80007fa:	6951      	ldr	r1, [r2, #20]
 80007fc:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 80007fe:	6991      	ldr	r1, [r2, #24]
 8000800:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8000802:	69d2      	ldr	r2, [r2, #28]
 8000804:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8000806:	425b      	negs	r3, r3
 8000808:	aa02      	add	r2, sp, #8
 800080a:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800080e:	2104      	movs	r1, #4
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <FlashWriteChecksum+0x48>)
 8000812:	f7ff ff8d 	bl	8000730 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8000816:	b003      	add	sp, #12
 8000818:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 800081c:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 800081e:	4770      	bx	lr
 8000820:	20000400 	.word	0x20000400
 8000824:	08008188 	.word	0x08008188

08000828 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <FlashVerifyChecksum+0x38>)
 800082a:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <FlashVerifyChecksum+0x3c>)
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <FlashVerifyChecksum+0x40>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <FlashVerifyChecksum+0x44>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 800083e:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <FlashVerifyChecksum+0x48>)
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <FlashVerifyChecksum+0x4c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <FlashVerifyChecksum+0x50>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <FlashVerifyChecksum+0x54>)
 8000852:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 8000854:	42da      	cmn	r2, r3
 8000856:	d001      	beq.n	800085c <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 8000858:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 800085a:	4770      	bx	lr
    return BLT_TRUE;
 800085c:	2001      	movs	r0, #1
 800085e:	4770      	bx	lr
 8000860:	08008000 	.word	0x08008000
 8000864:	08008004 	.word	0x08008004
 8000868:	08008008 	.word	0x08008008
 800086c:	0800800c 	.word	0x0800800c
 8000870:	08008010 	.word	0x08008010
 8000874:	08008014 	.word	0x08008014
 8000878:	08008018 	.word	0x08008018
 800087c:	08008188 	.word	0x08008188

08000880 <FlashDone>:
{
 8000880:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <FlashDone+0x38>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088a:	d10b      	bne.n	80008a4 <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <FlashDone+0x3c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000894:	d00d      	beq.n	80008b2 <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <FlashDone+0x3c>)
 8000898:	f7ff fe83 	bl	80005a2 <FlashWriteBlock>
 800089c:	4603      	mov	r3, r0
 800089e:	b148      	cbz	r0, 80008b4 <FlashDone+0x34>
  return BLT_TRUE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e007      	b.n	80008b4 <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <FlashDone+0x38>)
 80008a6:	f7ff fe7c 	bl	80005a2 <FlashWriteBlock>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d1ed      	bne.n	800088c <FlashDone+0xc>
 80008b0:	e000      	b.n	80008b4 <FlashDone+0x34>
  return BLT_TRUE;
 80008b2:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80008b4:	4618      	mov	r0, r3
 80008b6:	bd08      	pop	{r3, pc}
 80008b8:	20000400 	.word	0x20000400
 80008bc:	200001fc 	.word	0x200001fc

080008c0 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 80008c0:	4800      	ldr	r0, [pc, #0]	; (80008c4 <FlashGetUserProgBaseAddress+0x4>)
 80008c2:	4770      	bx	lr
 80008c4:	08008000 	.word	0x08008000

080008c8 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 80008c8:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 80008ca:	f7ff ff25 	bl	8000718 <FlashInit>
} /*** end of NvmInit ***/
 80008ce:	bd08      	pop	{r3, pc}

080008d0 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80008d0:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 80008d2:	f7ff ff2d 	bl	8000730 <FlashWrite>
} /*** end of NvmWrite ***/
 80008d6:	bd08      	pop	{r3, pc}

080008d8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 80008d8:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 80008da:	f7ff ff5f 	bl	800079c <FlashErase>
} /*** end of NvmErase ***/
 80008de:	bd08      	pop	{r3, pc}

080008e0 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 80008e0:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 80008e2:	f7ff ffa1 	bl	8000828 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 80008e6:	bd08      	pop	{r3, pc}

080008e8 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 80008e8:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 80008ea:	f7ff ffe9 	bl	80008c0 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 80008ee:	bd08      	pop	{r3, pc}

080008f0 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 80008f0:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 80008f2:	f7ff ff73 	bl	80007dc <FlashWriteChecksum>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b908      	cbnz	r0, 80008fe <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd08      	pop	{r3, pc}
  return FlashDone();
 80008fe:	f7ff ffbf 	bl	8000880 <FlashDone>
 8000902:	4603      	mov	r3, r0
 8000904:	e7f9      	b.n	80008fa <NvmDone+0xa>
	...

08000908 <Rs232ReceiveByte>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <Rs232ReceiveByte+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 800090c:	f013 0f20 	tst.w	r3, #32
 8000910:	d004      	beq.n	800091c <Rs232ReceiveByte+0x14>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Rs232ReceiveByte+0x18>)
 8000914:	685b      	ldr	r3, [r3, #4]
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8000916:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 8000918:	2001      	movs	r0, #1
 800091a:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 800091c:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 800091e:	4770      	bx	lr
 8000920:	40011000 	.word	0x40011000

08000924 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8000924:	b510      	push	{r4, lr}
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <Rs232TransmitByte+0x28>)
 8000928:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 800092a:	f000 f8c5 	bl	8000ab8 <TimerGet>
 800092e:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <Rs232TransmitByte+0x28>)
 8000934:	681b      	ldr	r3, [r3, #0]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000936:	f013 0f80 	tst.w	r3, #128	; 0x80
 800093a:	d105      	bne.n	8000948 <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 800093c:	f000 f994 	bl	8000c68 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8000940:	f000 f8ba 	bl	8000ab8 <TimerGet>
 8000944:	42a0      	cmp	r0, r4
 8000946:	d9f4      	bls.n	8000932 <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8000948:	bd10      	pop	{r4, pc}
 800094a:	bf00      	nop
 800094c:	40011000 	.word	0x40011000

08000950 <Rs232Init>:
{
 8000950:	b510      	push	{r4, lr}
 8000952:	b088      	sub	sp, #32
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8000954:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000958:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800095a:	2300      	movs	r3, #0
 800095c:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800095e:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000960:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000962:	220c      	movs	r2, #12
 8000964:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000966:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000968:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 800096a:	4c05      	ldr	r4, [pc, #20]	; (8000980 <Rs232Init+0x30>)
 800096c:	a901      	add	r1, sp, #4
 800096e:	4620      	mov	r0, r4
 8000970:	f004 fe56 	bl	8005620 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000974:	68e3      	ldr	r3, [r4, #12]
 8000976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097a:	60e3      	str	r3, [r4, #12]
} /*** end of Rs232Init ***/
 800097c:	b008      	add	sp, #32
 800097e:	bd10      	pop	{r4, pc}
 8000980:	40011000 	.word	0x40011000

08000984 <Rs232TransmitPacket>:
{
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	4606      	mov	r6, r0
 8000988:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 800098a:	2940      	cmp	r1, #64	; 0x40
 800098c:	d804      	bhi.n	8000998 <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 800098e:	4628      	mov	r0, r5
 8000990:	f7ff ffc8 	bl	8000924 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000994:	2400      	movs	r4, #0
 8000996:	e00b      	b.n	80009b0 <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000998:	2179      	movs	r1, #121	; 0x79
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <Rs232TransmitPacket+0x34>)
 800099c:	f000 f899 	bl	8000ad2 <AssertFailure>
 80009a0:	e7f5      	b.n	800098e <Rs232TransmitPacket+0xa>
    CopService();
 80009a2:	f000 f961 	bl	8000c68 <CopService>
    Rs232TransmitByte(data[data_index]);
 80009a6:	5d30      	ldrb	r0, [r6, r4]
 80009a8:	f7ff ffbc 	bl	8000924 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 80009ac:	3401      	adds	r4, #1
 80009ae:	b2a4      	uxth	r4, r4
 80009b0:	b2ab      	uxth	r3, r5
 80009b2:	42a3      	cmp	r3, r4
 80009b4:	d8f5      	bhi.n	80009a2 <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	08005b9c 	.word	0x08005b9c

080009bc <Rs232ReceivePacket>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <Rs232ReceivePacket+0x98>)
 80009c0:	781c      	ldrb	r4, [r3, #0]
 80009c2:	b9bc      	cbnz	r4, 80009f4 <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 80009c4:	4824      	ldr	r0, [pc, #144]	; (8000a58 <Rs232ReceivePacket+0x9c>)
 80009c6:	f7ff ff9f 	bl	8000908 <Rs232ReceiveByte>
 80009ca:	2801      	cmp	r0, #1
 80009cc:	d001      	beq.n	80009d2 <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 80009ce:	4620      	mov	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <Rs232ReceivePacket+0x9c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b3f      	cmp	r3, #63	; 0x3f
 80009dc:	d8f7      	bhi.n	80009ce <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 80009de:	f000 f86b 	bl	8000ab8 <TimerGet>
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <Rs232ReceivePacket+0xa0>)
 80009e4:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <Rs232ReceivePacket+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <Rs232ReceivePacket+0x98>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e7ec      	b.n	80009ce <Rs232ReceivePacket+0x12>
 80009f4:	4606      	mov	r6, r0
 80009f6:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <Rs232ReceivePacket+0xa4>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <Rs232ReceivePacket+0x9c>)
 8000a00:	4418      	add	r0, r3
 8000a02:	f7ff ff81 	bl	8000908 <Rs232ReceiveByte>
 8000a06:	4604      	mov	r4, r0
 8000a08:	2801      	cmp	r0, #1
 8000a0a:	d115      	bne.n	8000a38 <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <Rs232ReceivePacket+0xa4>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	3201      	adds	r2, #1
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <Rs232ReceivePacket+0x9c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d001      	beq.n	8000a22 <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 8000a1e:	2400      	movs	r4, #0
 8000a20:	e7d5      	b.n	80009ce <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000a22:	4910      	ldr	r1, [pc, #64]	; (8000a64 <Rs232ReceivePacket+0xa8>)
 8000a24:	4630      	mov	r0, r6
 8000a26:	f7ff fd77 	bl	8000518 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <Rs232ReceivePacket+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <Rs232ReceivePacket+0xa4>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 8000a36:	e7ca      	b.n	80009ce <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000a38:	f000 f83e 	bl	8000ab8 <TimerGet>
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <Rs232ReceivePacket+0xa0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3364      	adds	r3, #100	; 0x64
 8000a42:	4298      	cmp	r0, r3
 8000a44:	d903      	bls.n	8000a4e <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 8000a46:	2400      	movs	r4, #0
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <Rs232ReceivePacket+0x98>)
 8000a4a:	701c      	strb	r4, [r3, #0]
 8000a4c:	e7bf      	b.n	80009ce <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 8000a4e:	2400      	movs	r4, #0
 8000a50:	e7bd      	b.n	80009ce <Rs232ReceivePacket+0x12>
 8000a52:	bf00      	nop
 8000a54:	20000645 	.word	0x20000645
 8000a58:	20000604 	.word	0x20000604
 8000a5c:	20000648 	.word	0x20000648
 8000a60:	20000646 	.word	0x20000646
 8000a64:	20000605 	.word	0x20000605

08000a68 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000a68:	4b01      	ldr	r3, [pc, #4]	; (8000a70 <TimerReset+0x8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000a6e:	4770      	bx	lr
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <TimerInit>:
{
 8000a74:	b508      	push	{r3, lr}
  TimerReset();
 8000a76:	f7ff fff7 	bl	8000a68 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <TimerInit+0x1c>)
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <TimerInit+0x20>)
 8000a7e:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000a84:	2105      	movs	r1, #5
 8000a86:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <TimerInit+0x24>)
 8000a8a:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000a8c:	bd08      	pop	{r3, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	0002903f 	.word	0x0002903f
 8000a98:	2000064c 	.word	0x2000064c

08000a9c <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <TimerUpdate+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000aa4:	d003      	beq.n	8000aae <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <TimerUpdate+0x18>)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000aae:	4770      	bx	lr
 8000ab0:	e000e010 	.word	0xe000e010
 8000ab4:	2000064c 	.word	0x2000064c

08000ab8 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000ab8:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000aba:	f7ff ffef 	bl	8000a9c <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 8000abe:	4b01      	ldr	r3, [pc, #4]	; (8000ac4 <TimerGet+0xc>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	bd08      	pop	{r3, pc}
 8000ac4:	2000064c 	.word	0x2000064c

08000ac8 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000ac8:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000aca:	f7ff fff5 	bl	8000ab8 <TimerGet>
} /*** end of HAL_GetTick ***/
 8000ace:	bd08      	pop	{r3, pc}

08000ad0 <SysTick_Handler>:
**
****************************************************************************************/
void SysTick_Handler(void)
{
  /* Nothing to do here. */
} /*** end of SysTick_Handler ***/
 8000ad0:	4770      	bx	lr

08000ad2 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000ad2:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000ad4:	f000 f8c8 	bl	8000c68 <CopService>
 8000ad8:	e7fc      	b.n	8000ad4 <AssertFailure+0x2>
	...

08000adc <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000adc:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000ade:	f000 f8b7 	bl	8000c50 <ComIsConnected>
 8000ae2:	2801      	cmp	r0, #1
 8000ae4:	d006      	beq.n	8000af4 <BackDoorCheck+0x18>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* check if the file module is busy, indicating that a firmware update through the
   * locally attached storage is in progress. in this case the backdoor stays open
   * anyway, so no need to check if it needs to be closed.
   */
  if (FileIsIdle() == BLT_FALSE)
 8000ae6:	f000 f94f 	bl	8000d88 <FileIsIdle>
 8000aea:	b118      	cbz	r0, 8000af4 <BackDoorCheck+0x18>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <BackDoorCheck+0x44>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d000      	beq.n	8000af6 <BackDoorCheck+0x1a>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000af4:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8000af6:	f7ff ffdf 	bl	8000ab8 <TimerGet>
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <BackDoorCheck+0x48>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <BackDoorCheck+0x4c>)
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d3f3      	bcc.n	8000af4 <BackDoorCheck+0x18>
      backdoorOpen = BLT_FALSE;
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <BackDoorCheck+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
      if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 8000b12:	f000 f943 	bl	8000d9c <FileHandleFirmwareUpdateRequest>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d1ec      	bne.n	8000af4 <BackDoorCheck+0x18>
        CpuStartUserProgram();
 8000b1a:	f7ff fcdd 	bl	80004d8 <CpuStartUserProgram>
 8000b1e:	e7e9      	b.n	8000af4 <BackDoorCheck+0x18>
 8000b20:	20000654 	.word	0x20000654
 8000b24:	20000650 	.word	0x20000650
 8000b28:	20000658 	.word	0x20000658

08000b2c <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000b2c:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <BackDoorRestartTimer+0x18>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d000      	beq.n	8000b38 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8000b36:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8000b38:	f7ff ffbe 	bl	8000ab8 <TimerGet>
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <BackDoorRestartTimer+0x1c>)
 8000b3e:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8000b40:	e7f9      	b.n	8000b36 <BackDoorRestartTimer+0xa>
 8000b42:	bf00      	nop
 8000b44:	20000654 	.word	0x20000654
 8000b48:	20000658 	.word	0x20000658

08000b4c <BackDoorInit>:
{
 8000b4c:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <BackDoorInit+0x14>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000b54:	f7ff ffea 	bl	8000b2c <BackDoorRestartTimer>
  BackDoorCheck();
 8000b58:	f7ff ffc0 	bl	8000adc <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000b5c:	bd08      	pop	{r3, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000654 	.word	0x20000654

08000b64 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000b64:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8000b66:	f7ff fcb3 	bl	80004d0 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000b6a:	f000 f879 	bl	8000c60 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000b6e:	f7ff ff81 	bl	8000a74 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000b72:	f7ff fea9 	bl	80008c8 <NvmInit>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* initialize the file system module */
  FileInit();
 8000b76:	f000 f8ef 	bl	8000d58 <FileInit>
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000b7a:	f000 f80f 	bl	8000b9c <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000b7e:	f7ff ffe5 	bl	8000b4c <BackDoorInit>
} /*** end of BootInit ***/
 8000b82:	bd08      	pop	{r3, pc}

08000b84 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000b84:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8000b86:	f000 f86f 	bl	8000c68 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000b8a:	f7ff ff87 	bl	8000a9c <TimerUpdate>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
 8000b8e:	f000 f9ff 	bl	8000f90 <FileTask>
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000b92:	f000 f80f 	bl	8000bb4 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000b96:	f7ff ffa1 	bl	8000adc <BackDoorCheck>
} /*** end of BootTask ***/
 8000b9a:	bd08      	pop	{r3, pc}

08000b9c <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000b9c:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8000b9e:	f000 fd79 	bl	8001694 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8000ba2:	f7ff fed5 	bl	8000950 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8000ba6:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <ComInit+0x14>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8000bac:	bd08      	pop	{r3, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000bb4:	b500      	push	{lr}
 8000bb6:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000bb8:	f10d 0107 	add.w	r1, sp, #7
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <ComTask+0x2c>)
 8000bbe:	f7ff fefd 	bl	80009bc <Rs232ReceivePacket>
 8000bc2:	2801      	cmp	r0, #1
 8000bc4:	d002      	beq.n	8000bcc <ComTask+0x18>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8000bc6:	b003      	add	sp, #12
 8000bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <ComTask+0x30>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000bd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ComTask+0x2c>)
 8000bd8:	f000 fd7c 	bl	80016d4 <XcpPacketReceived>
} /*** end of ComTask ***/
 8000bdc:	e7f3      	b.n	8000bc6 <ComTask+0x12>
 8000bde:	bf00      	nop
 8000be0:	2000065c 	.word	0x2000065c
 8000be4:	20000000 	.word	0x20000000

08000be8 <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8000be8:	4770      	bx	lr
	...

08000bec <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8000bec:	b508      	push	{r3, lr}
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <ComTransmitPacket+0x18>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b113      	cbz	r3, 8000bfa <ComTransmitPacket+0xe>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8000bf4:	f000 fd66 	bl	80016c4 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000bf8:	bd08      	pop	{r3, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8000bfa:	b2c9      	uxtb	r1, r1
 8000bfc:	f7ff fec2 	bl	8000984 <Rs232TransmitPacket>
 8000c00:	e7f8      	b.n	8000bf4 <ComTransmitPacket+0x8>
 8000c02:	bf00      	nop
 8000c04:	20000000 	.word	0x20000000

08000c08 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <ComGetActiveInterfaceMaxRxLen+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d005      	beq.n	8000c1c <ComGetActiveInterfaceMaxRxLen+0x14>
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d005      	beq.n	8000c20 <ComGetActiveInterfaceMaxRxLen+0x18>
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <ComGetActiveInterfaceMaxRxLen+0x1c>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8000c18:	2040      	movs	r0, #64	; 0x40
 8000c1a:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8000c1c:	2000      	movs	r0, #0
      break;
 8000c1e:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8000c20:	2000      	movs	r0, #0
      break;
 8000c22:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8000c24:	2008      	movs	r0, #8
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8000c26:	4770      	bx	lr
 8000c28:	20000000 	.word	0x20000000

08000c2c <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <ComGetActiveInterfaceMaxTxLen+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d005      	beq.n	8000c40 <ComGetActiveInterfaceMaxTxLen+0x14>
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d005      	beq.n	8000c44 <ComGetActiveInterfaceMaxTxLen+0x18>
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <ComGetActiveInterfaceMaxTxLen+0x1c>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8000c3c:	2040      	movs	r0, #64	; 0x40
 8000c3e:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8000c40:	2000      	movs	r0, #0
      break;
 8000c42:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8000c44:	2000      	movs	r0, #0
      break;
 8000c46:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8000c48:	2008      	movs	r0, #8
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8000c4a:	4770      	bx	lr
 8000c4c:	20000000 	.word	0x20000000

08000c50 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000c50:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8000c52:	f000 fd2d 	bl	80016b0 <XcpIsConnected>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b100      	cbz	r0, 8000c5c <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 8000c5a:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	bd08      	pop	{r3, pc}

08000c60 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000c60:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000c62:	f002 fcd5 	bl	8003610 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8000c66:	bd08      	pop	{r3, pc}

08000c68 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8000c68:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8000c6a:	f002 fcd6 	bl	800361a <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000c6e:	bd08      	pop	{r3, pc}

08000c70 <FileLibLongToIntString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibLongToIntString(blt_int32u long_val, blt_char *destination)
{
 8000c70:	b410      	push	{r4}
  blt_int32u long_val_cpy = long_val;
 8000c72:	4603      	mov	r3, r0

  /* first determine how many digits there will be */
  do
  {
    destination++;
 8000c74:	3101      	adds	r1, #1
    long_val_cpy /= 10;
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <FileLibLongToIntString+0x3c>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
  }
  while (long_val_cpy > 0);
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	d1f9      	bne.n	8000c74 <FileLibLongToIntString+0x4>
  /* add space for the string termination and add it */
  *destination = '\0';
 8000c80:	2300      	movs	r3, #0
 8000c82:	700b      	strb	r3, [r1, #0]
  do
  {
    /* set write pointer to where the next character should go */
    destination--;
    /* write digit in ASCII format */
    *destination = long_val_cpy % 10 + '0';
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <FileLibLongToIntString+0x3c>)
 8000c86:	fba3 2300 	umull	r2, r3, r3, r0
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c92:	005c      	lsls	r4, r3, #1
 8000c94:	1b03      	subs	r3, r0, r4
 8000c96:	3330      	adds	r3, #48	; 0x30
 8000c98:	f801 3d01 	strb.w	r3, [r1, #-1]!
    /* move on to the next digit */
    long_val_cpy /= 10;
 8000c9c:	4610      	mov	r0, r2
  }
  while (long_val_cpy > 0);
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d1f0      	bne.n	8000c84 <FileLibLongToIntString+0x14>

  return destination;
} /*** end of FileLibLongToIntString ***/
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	cccccccd 	.word	0xcccccccd

08000cb0 <FileLibByteNibbleToChar>:
  c = (nibble & 0x0f) + '0';
 8000cb0:	f000 030f 	and.w	r3, r0, #15
  if (nibble > 9)
 8000cb4:	2809      	cmp	r0, #9
 8000cb6:	d902      	bls.n	8000cbe <FileLibByteNibbleToChar+0xe>
    c += 7;
 8000cb8:	f103 0037 	add.w	r0, r3, #55	; 0x37
} /*** end of FileLibByteNibbleToChar ***/
 8000cbc:	4770      	bx	lr
{
 8000cbe:	b510      	push	{r4, lr}
 8000cc0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    c = toupper((blt_int16s)c);
 8000cc4:	f004 feec 	bl	8005aa0 <__locale_ctype_ptr>
 8000cc8:	4420      	add	r0, r4
 8000cca:	7843      	ldrb	r3, [r0, #1]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d001      	beq.n	8000cd8 <FileLibByteNibbleToChar+0x28>
 8000cd4:	b2e0      	uxtb	r0, r4
} /*** end of FileLibByteNibbleToChar ***/
 8000cd6:	bd10      	pop	{r4, pc}
    c = toupper((blt_int16s)c);
 8000cd8:	3c20      	subs	r4, #32
 8000cda:	e7fb      	b.n	8000cd4 <FileLibByteNibbleToChar+0x24>

08000cdc <FileLibByteToHexString>:
{
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4605      	mov	r5, r0
 8000ce0:	460c      	mov	r4, r1
  destination[0] = FileLibByteNibbleToChar(byte_val >> 4);
 8000ce2:	0900      	lsrs	r0, r0, #4
 8000ce4:	f7ff ffe4 	bl	8000cb0 <FileLibByteNibbleToChar>
 8000ce8:	7020      	strb	r0, [r4, #0]
  destination[1] = FileLibByteNibbleToChar(byte_val & 0x0f);
 8000cea:	f005 000f 	and.w	r0, r5, #15
 8000cee:	f7ff ffdf 	bl	8000cb0 <FileLibByteNibbleToChar>
 8000cf2:	7060      	strb	r0, [r4, #1]
  destination[2] = '\0';
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	70a3      	strb	r3, [r4, #2]
} /*** end of FileLibByteToHexString ***/
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}

08000cfc <FileLibHexStringToByte>:
**                      decimal value.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_int8u FileLibHexStringToByte(const blt_char *hexstring)
{
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4607      	mov	r7, r0
  blt_int8u result = 0;
  blt_char  c;
  blt_int8u counter;

  /* a hexadecimal character is 2 characters long (i.e 0x4F minus the 0x part) */
  for (counter=0; counter < 2; counter++)
 8000d00:	2600      	movs	r6, #0
  blt_int8u result = 0;
 8000d02:	4635      	mov	r5, r6
  for (counter=0; counter < 2; counter++)
 8000d04:	e007      	b.n	8000d16 <FileLibHexStringToByte+0x1a>
  {
    /* read out the character */
    c = toupper((blt_int16s)(hexstring[counter]));
 8000d06:	3c20      	subs	r4, #32
 8000d08:	e010      	b.n	8000d2c <FileLibHexStringToByte+0x30>
    if (c > 9)
    {
      c -= 7;
    }
    /* add it to the result */
    result = (result << 4) + c;
 8000d0a:	012d      	lsls	r5, r5, #4
 8000d0c:	b2ed      	uxtb	r5, r5
 8000d0e:	18ab      	adds	r3, r5, r2
 8000d10:	b2dd      	uxtb	r5, r3
  for (counter=0; counter < 2; counter++)
 8000d12:	3601      	adds	r6, #1
 8000d14:	b2f6      	uxtb	r6, r6
 8000d16:	2e01      	cmp	r6, #1
 8000d18:	d819      	bhi.n	8000d4e <FileLibHexStringToByte+0x52>
    c = toupper((blt_int16s)(hexstring[counter]));
 8000d1a:	5dbc      	ldrb	r4, [r7, r6]
 8000d1c:	f004 fec0 	bl	8005aa0 <__locale_ctype_ptr>
 8000d20:	4420      	add	r0, r4
 8000d22:	7843      	ldrb	r3, [r0, #1]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d0ec      	beq.n	8000d06 <FileLibHexStringToByte+0xa>
 8000d2c:	b2e3      	uxtb	r3, r4
    if ((c < '0') || (c > 'F') || ((c > '9') && (c < 'A')))
 8000d2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	2a16      	cmp	r2, #22
 8000d36:	d809      	bhi.n	8000d4c <FileLibHexStringToByte+0x50>
 8000d38:	f1a3 013a 	sub.w	r1, r3, #58	; 0x3a
 8000d3c:	b2c9      	uxtb	r1, r1
 8000d3e:	2906      	cmp	r1, #6
 8000d40:	d907      	bls.n	8000d52 <FileLibHexStringToByte+0x56>
    if (c > 9)
 8000d42:	2a09      	cmp	r2, #9
 8000d44:	d9e1      	bls.n	8000d0a <FileLibHexStringToByte+0xe>
      c -= 7;
 8000d46:	3b37      	subs	r3, #55	; 0x37
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	e7de      	b.n	8000d0a <FileLibHexStringToByte+0xe>
      return 0;
 8000d4c:	2500      	movs	r5, #0
  }
  /* return the results */
  return result;
} /*** end of FileLibHexStringToByte ***/
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 8000d52:	2500      	movs	r5, #0
 8000d54:	e7fb      	b.n	8000d4e <FileLibHexStringToByte+0x52>
	...

08000d58 <FileInit>:
{
 8000d58:	b508      	push	{r3, lr}
  firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <FileInit+0x20>)
 8000d5e:	701a      	strb	r2, [r3, #0]
  fresult = f_mount(&fatFsObjects.fs, "0:", 0);
 8000d60:	4906      	ldr	r1, [pc, #24]	; (8000d7c <FileInit+0x24>)
 8000d62:	4807      	ldr	r0, [pc, #28]	; (8000d80 <FileInit+0x28>)
 8000d64:	f001 ff3c 	bl	8002be0 <f_mount>
  ASSERT_RT(fresult == FR_OK);
 8000d68:	b900      	cbnz	r0, 8000d6c <FileInit+0x14>
} /*** end of FileInit ***/
 8000d6a:	bd08      	pop	{r3, pc}
  ASSERT_RT(fresult == FR_OK);
 8000d6c:	2177      	movs	r1, #119	; 0x77
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <FileInit+0x2c>)
 8000d70:	f7ff feaf 	bl	8000ad2 <AssertFailure>
} /*** end of FileInit ***/
 8000d74:	e7f9      	b.n	8000d6a <FileInit+0x12>
 8000d76:	bf00      	nop
 8000d78:	20000afc 	.word	0x20000afc
 8000d7c:	08005bf0 	.word	0x08005bf0
 8000d80:	200006a4 	.word	0x200006a4
 8000d84:	08005bf4 	.word	0x08005bf4

08000d88 <FileIsIdle>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <FileIsIdle+0x10>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b10b      	cbz	r3, 8000d92 <FileIsIdle+0xa>
  return BLT_FALSE;
 8000d8e:	2000      	movs	r0, #0
} /*** end of FileIsIdle ***/
 8000d90:	4770      	bx	lr
    return BLT_TRUE;
 8000d92:	2001      	movs	r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000afc 	.word	0x20000afc

08000d9c <FileHandleFirmwareUpdateRequest>:
{
 8000d9c:	b508      	push	{r3, lr}
  if (ComIsConnected() == BLT_TRUE)
 8000d9e:	f7ff ff57 	bl	8000c50 <ComIsConnected>
 8000da2:	2801      	cmp	r0, #1
 8000da4:	d00e      	beq.n	8000dc4 <FileHandleFirmwareUpdateRequest+0x28>
  if (firmwareUpdateState != FIRMWARE_UPDATE_STATE_IDLE)
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <FileHandleFirmwareUpdateRequest+0x2c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b10b      	cbz	r3, 8000db0 <FileHandleFirmwareUpdateRequest+0x14>
    return BLT_FALSE;
 8000dac:	2000      	movs	r0, #0
} /*** end of FileHandleFirmwareUpdateRequest ***/
 8000dae:	bd08      	pop	{r3, pc}
  if (FileIsFirmwareUpdateRequestedHook() == BLT_TRUE)
 8000db0:	f002 fc38 	bl	8003624 <FileIsFirmwareUpdateRequestedHook>
 8000db4:	2801      	cmp	r0, #1
 8000db6:	d001      	beq.n	8000dbc <FileHandleFirmwareUpdateRequest+0x20>
  return BLT_FALSE;
 8000db8:	2000      	movs	r0, #0
 8000dba:	e7f8      	b.n	8000dae <FileHandleFirmwareUpdateRequest+0x12>
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_STARTING;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <FileHandleFirmwareUpdateRequest+0x2c>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
    return BLT_TRUE;
 8000dc2:	e7f4      	b.n	8000dae <FileHandleFirmwareUpdateRequest+0x12>
    return BLT_FALSE;
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e7f2      	b.n	8000dae <FileHandleFirmwareUpdateRequest+0x12>
 8000dc8:	20000afc 	.word	0x20000afc

08000dcc <FileSrecGetLineType>:
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4605      	mov	r5, r0
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8000dd0:	7804      	ldrb	r4, [r0, #0]
 8000dd2:	f004 fe65 	bl	8005aa0 <__locale_ctype_ptr>
 8000dd6:	4420      	add	r0, r4
 8000dd8:	7843      	ldrb	r3, [r0, #1]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d003      	beq.n	8000dea <FileSrecGetLineType+0x1e>
 8000de2:	2c53      	cmp	r4, #83	; 0x53
 8000de4:	d003      	beq.n	8000dee <FileSrecGetLineType+0x22>
    return LINE_TYPE_UNSUPPORTED;
 8000de6:	2003      	movs	r0, #3
} /*** end of FileSrecGetLineType ***/
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8000dea:	3c20      	subs	r4, #32
 8000dec:	e7f9      	b.n	8000de2 <FileSrecGetLineType+0x16>
 8000dee:	f004 fe57 	bl	8005aa0 <__locale_ctype_ptr>
 8000df2:	786b      	ldrb	r3, [r5, #1]
 8000df4:	4418      	add	r0, r3
 8000df6:	7842      	ldrb	r2, [r0, #1]
 8000df8:	f012 0f04 	tst.w	r2, #4
 8000dfc:	d009      	beq.n	8000e12 <FileSrecGetLineType+0x46>
  if (line[1] == '1')
 8000dfe:	2b31      	cmp	r3, #49	; 0x31
 8000e00:	d009      	beq.n	8000e16 <FileSrecGetLineType+0x4a>
  if (line[1] == '2')
 8000e02:	2b32      	cmp	r3, #50	; 0x32
 8000e04:	d009      	beq.n	8000e1a <FileSrecGetLineType+0x4e>
  if (line[1] == '3')
 8000e06:	2b33      	cmp	r3, #51	; 0x33
 8000e08:	d001      	beq.n	8000e0e <FileSrecGetLineType+0x42>
  return LINE_TYPE_UNSUPPORTED;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e7ec      	b.n	8000de8 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S3;
 8000e0e:	2002      	movs	r0, #2
 8000e10:	e7ea      	b.n	8000de8 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_UNSUPPORTED;
 8000e12:	2003      	movs	r0, #3
 8000e14:	e7e8      	b.n	8000de8 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S1;
 8000e16:	2000      	movs	r0, #0
 8000e18:	e7e6      	b.n	8000de8 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S2;
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	e7e4      	b.n	8000de8 <FileSrecGetLineType+0x1c>

08000e1e <FileSrecVerifyChecksum>:
{
 8000e1e:	b570      	push	{r4, r5, r6, lr}
 8000e20:	4606      	mov	r6, r0
  bytes_on_line = FileLibHexStringToByte(line);
 8000e22:	3002      	adds	r0, #2
 8000e24:	f7ff ff6a 	bl	8000cfc <FileLibHexStringToByte>
 8000e28:	4605      	mov	r5, r0
 8000e2a:	b284      	uxth	r4, r0
  line += 2;
 8000e2c:	3604      	adds	r6, #4
    checksum += FileLibHexStringToByte(line);
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f7ff ff64 	bl	8000cfc <FileLibHexStringToByte>
 8000e34:	4405      	add	r5, r0
 8000e36:	b2ed      	uxtb	r5, r5
    bytes_on_line--;
 8000e38:	3c01      	subs	r4, #1
 8000e3a:	b2a4      	uxth	r4, r4
    line += 2;
 8000e3c:	3602      	adds	r6, #2
  while (bytes_on_line > 1);
 8000e3e:	2c01      	cmp	r4, #1
 8000e40:	d8f5      	bhi.n	8000e2e <FileSrecVerifyChecksum+0x10>
  checksum = ~checksum;
 8000e42:	43ed      	mvns	r5, r5
 8000e44:	b2ed      	uxtb	r5, r5
  if (checksum != FileLibHexStringToByte(line))
 8000e46:	4630      	mov	r0, r6
 8000e48:	f7ff ff58 	bl	8000cfc <FileLibHexStringToByte>
 8000e4c:	42a8      	cmp	r0, r5
 8000e4e:	d001      	beq.n	8000e54 <FileSrecVerifyChecksum+0x36>
    return BLT_FALSE;
 8000e50:	2000      	movs	r0, #0
} /*** end of FileSrecVerifyChecksum ***/
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
  return BLT_TRUE;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7fc      	b.n	8000e52 <FileSrecVerifyChecksum+0x34>

08000e58 <FileSrecParseLine>:
{
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	4617      	mov	r7, r2
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 8000e5e:	460e      	mov	r6, r1
 8000e60:	b1a1      	cbz	r1, 8000e8c <FileSrecParseLine+0x34>
 8000e62:	b198      	cbz	r0, 8000e8c <FileSrecParseLine+0x34>
  lineType = FileSrecGetLineType(line);
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff ffb1 	bl	8000dcc <FileSrecGetLineType>
 8000e6a:	4605      	mov	r5, r0
  if (lineType == LINE_TYPE_UNSUPPORTED)
 8000e6c:	2803      	cmp	r0, #3
 8000e6e:	f000 8087 	beq.w	8000f80 <FileSrecParseLine+0x128>
  if (FileSrecVerifyChecksum(line) == BLT_FALSE)
 8000e72:	4620      	mov	r0, r4
 8000e74:	f7ff ffd3 	bl	8000e1e <FileSrecVerifyChecksum>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 8084 	beq.w	8000f86 <FileSrecParseLine+0x12e>
  switch (lineType)
 8000e7e:	2d01      	cmp	r5, #1
 8000e80:	d029      	beq.n	8000ed6 <FileSrecParseLine+0x7e>
 8000e82:	b14d      	cbz	r5, 8000e98 <FileSrecParseLine+0x40>
 8000e84:	2d02      	cmp	r5, #2
 8000e86:	d04d      	beq.n	8000f24 <FileSrecParseLine+0xcc>
  blt_int16s    data_byte_count = 0;
 8000e88:	2500      	movs	r5, #0
 8000e8a:	e07a      	b.n	8000f82 <FileSrecParseLine+0x12a>
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 8000e8c:	f240 2163 	movw	r1, #611	; 0x263
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <FileSrecParseLine+0x134>)
 8000e92:	f7ff fe1e 	bl	8000ad2 <AssertFailure>
 8000e96:	e7e5      	b.n	8000e64 <FileSrecParseLine+0xc>
      bytes_on_line = FileLibHexStringToByte(line);
 8000e98:	1ca0      	adds	r0, r4, #2
 8000e9a:	f7ff ff2f 	bl	8000cfc <FileLibHexStringToByte>
 8000e9e:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 8;
 8000ea0:	1d20      	adds	r0, r4, #4
 8000ea2:	f7ff ff2b 	bl	8000cfc <FileLibHexStringToByte>
 8000ea6:	0200      	lsls	r0, r0, #8
 8000ea8:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 8000eaa:	1da0      	adds	r0, r4, #6
 8000eac:	f7ff ff26 	bl	8000cfc <FileLibHexStringToByte>
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	4418      	add	r0, r3
 8000eb4:	6030      	str	r0, [r6, #0]
      line += 2;
 8000eb6:	3408      	adds	r4, #8
      data_byte_count = bytes_on_line - 3; /* -2 bytes address, -1 byte checksum */
 8000eb8:	3d03      	subs	r5, #3
 8000eba:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8000ebc:	2f00      	cmp	r7, #0
 8000ebe:	d060      	beq.n	8000f82 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	42ae      	cmp	r6, r5
 8000ec4:	da5d      	bge.n	8000f82 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff ff18 	bl	8000cfc <FileLibHexStringToByte>
 8000ecc:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8000ece:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8000ed0:	3601      	adds	r6, #1
 8000ed2:	b2b6      	uxth	r6, r6
 8000ed4:	e7f5      	b.n	8000ec2 <FileSrecParseLine+0x6a>
      bytes_on_line = FileLibHexStringToByte(line);
 8000ed6:	1ca0      	adds	r0, r4, #2
 8000ed8:	f7ff ff10 	bl	8000cfc <FileLibHexStringToByte>
 8000edc:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 16;
 8000ede:	1d20      	adds	r0, r4, #4
 8000ee0:	f7ff ff0c 	bl	8000cfc <FileLibHexStringToByte>
 8000ee4:	0400      	lsls	r0, r0, #16
 8000ee6:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 8000ee8:	1da0      	adds	r0, r4, #6
 8000eea:	f7ff ff07 	bl	8000cfc <FileLibHexStringToByte>
 8000eee:	6833      	ldr	r3, [r6, #0]
 8000ef0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8000ef4:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 8000ef6:	f104 0008 	add.w	r0, r4, #8
 8000efa:	f7ff feff 	bl	8000cfc <FileLibHexStringToByte>
 8000efe:	6833      	ldr	r3, [r6, #0]
 8000f00:	4418      	add	r0, r3
 8000f02:	6030      	str	r0, [r6, #0]
      line += 2;
 8000f04:	340a      	adds	r4, #10
      data_byte_count = bytes_on_line - 4; /* -3 bytes address, -1 byte checksum */
 8000f06:	3d04      	subs	r5, #4
 8000f08:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8000f0a:	2f00      	cmp	r7, #0
 8000f0c:	d039      	beq.n	8000f82 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8000f0e:	2600      	movs	r6, #0
 8000f10:	42ae      	cmp	r6, r5
 8000f12:	da36      	bge.n	8000f82 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff fef1 	bl	8000cfc <FileLibHexStringToByte>
 8000f1a:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8000f1c:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8000f1e:	3601      	adds	r6, #1
 8000f20:	b2b6      	uxth	r6, r6
 8000f22:	e7f5      	b.n	8000f10 <FileSrecParseLine+0xb8>
      bytes_on_line = FileLibHexStringToByte(line);
 8000f24:	1ca0      	adds	r0, r4, #2
 8000f26:	f7ff fee9 	bl	8000cfc <FileLibHexStringToByte>
 8000f2a:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 24;
 8000f2c:	1d20      	adds	r0, r4, #4
 8000f2e:	f7ff fee5 	bl	8000cfc <FileLibHexStringToByte>
 8000f32:	0600      	lsls	r0, r0, #24
 8000f34:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 16;
 8000f36:	1da0      	adds	r0, r4, #6
 8000f38:	f7ff fee0 	bl	8000cfc <FileLibHexStringToByte>
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8000f42:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 8000f44:	f104 0008 	add.w	r0, r4, #8
 8000f48:	f7ff fed8 	bl	8000cfc <FileLibHexStringToByte>
 8000f4c:	6833      	ldr	r3, [r6, #0]
 8000f4e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8000f52:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 8000f54:	f104 000a 	add.w	r0, r4, #10
 8000f58:	f7ff fed0 	bl	8000cfc <FileLibHexStringToByte>
 8000f5c:	6833      	ldr	r3, [r6, #0]
 8000f5e:	4418      	add	r0, r3
 8000f60:	6030      	str	r0, [r6, #0]
      line += 2;
 8000f62:	340c      	adds	r4, #12
      data_byte_count = bytes_on_line - 5; /* -4 bytes address, -1 byte checksum */
 8000f64:	3d05      	subs	r5, #5
 8000f66:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8000f68:	b15f      	cbz	r7, 8000f82 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	42ae      	cmp	r6, r5
 8000f6e:	da08      	bge.n	8000f82 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8000f70:	4620      	mov	r0, r4
 8000f72:	f7ff fec3 	bl	8000cfc <FileLibHexStringToByte>
 8000f76:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8000f78:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8000f7a:	3601      	adds	r6, #1
 8000f7c:	b2b6      	uxth	r6, r6
 8000f7e:	e7f5      	b.n	8000f6c <FileSrecParseLine+0x114>
    return 0;
 8000f80:	2500      	movs	r5, #0
} /*** end of FileSrecParseLine ***/
 8000f82:	4628      	mov	r0, r5
 8000f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERROR_SREC_INVALID_CHECKSUM;
 8000f86:	f04f 35ff 	mov.w	r5, #4294967295
 8000f8a:	e7fa      	b.n	8000f82 <FileSrecParseLine+0x12a>
 8000f8c:	08005bf4 	.word	0x08005bf4

08000f90 <FileTask>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 8000f90:	4bb5      	ldr	r3, [pc, #724]	; (8001268 <FileTask+0x2d8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 81f5 	beq.w	8001384 <FileTask+0x3f4>
{
 8000f9a:	b570      	push	{r4, r5, r6, lr}
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_STARTING)
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <FileTask+0x1c>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_ERASING)
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d030      	beq.n	8001006 <FileTask+0x76>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_PROGRAMMING)
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	f000 8120 	beq.w	80011ea <FileTask+0x25a>
} /*** end of FileTask ***/
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
    NvmInit();
 8000fac:	f7ff fc8c 	bl	80008c8 <NvmInit>
    FileFirmwareUpdateStartedHook();
 8000fb0:	f002 fb5a 	bl	8003668 <FileFirmwareUpdateStartedHook>
    FileFirmwareUpdateLogHook("Firmware update request detected\n\r");
 8000fb4:	48ad      	ldr	r0, [pc, #692]	; (800126c <FileTask+0x2dc>)
 8000fb6:	f002 fb9b 	bl	80036f0 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Opening firmware file for reading...");
 8000fba:	48ad      	ldr	r0, [pc, #692]	; (8001270 <FileTask+0x2e0>)
 8000fbc:	f002 fb98 	bl	80036f0 <FileFirmwareUpdateLogHook>
    if (f_open(&fatFsObjects.file, FileGetFirmwareFilenameHook(), FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8000fc0:	f002 fb4e 	bl	8003660 <FileGetFirmwareFilenameHook>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	48aa      	ldr	r0, [pc, #680]	; (8001274 <FileTask+0x2e4>)
 8000fca:	f001 fe35 	bl	8002c38 <f_open>
 8000fce:	b148      	cbz	r0, 8000fe4 <FileTask+0x54>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8000fd0:	4ba5      	ldr	r3, [pc, #660]	; (8001268 <FileTask+0x2d8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8000fd6:	48a8      	ldr	r0, [pc, #672]	; (8001278 <FileTask+0x2e8>)
 8000fd8:	f002 fb8a 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_OPEN_FIRMWARE_FILE);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f002 fb79 	bl	80036d4 <FileFirmwareUpdateErrorHook>
      return;
 8000fe2:	e7e2      	b.n	8000faa <FileTask+0x1a>
    FileFirmwareUpdateLogHook("OK\n\r");
 8000fe4:	48a5      	ldr	r0, [pc, #660]	; (800127c <FileTask+0x2ec>)
 8000fe6:	f002 fb83 	bl	80036f0 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Starting the programming sequence\n\r");
 8000fea:	48a5      	ldr	r0, [pc, #660]	; (8001280 <FileTask+0x2f0>)
 8000fec:	f002 fb80 	bl	80036f0 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8000ff0:	48a4      	ldr	r0, [pc, #656]	; (8001284 <FileTask+0x2f4>)
 8000ff2:	f002 fb7d 	bl	80036f0 <FileFirmwareUpdateLogHook>
    eraseInfo.start_address = 0;
 8000ff6:	4ba4      	ldr	r3, [pc, #656]	; (8001288 <FileTask+0x2f8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    eraseInfo.total_size = 0;
 8000ffc:	605a      	str	r2, [r3, #4]
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_ERASING;
 8000ffe:	4b9a      	ldr	r3, [pc, #616]	; (8001268 <FileTask+0x2d8>)
 8001000:	2202      	movs	r2, #2
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e7d1      	b.n	8000faa <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8001006:	4ca1      	ldr	r4, [pc, #644]	; (800128c <FileTask+0x2fc>)
 8001008:	f504 720c 	add.w	r2, r4, #560	; 0x230
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	489f      	ldr	r0, [pc, #636]	; (8001290 <FileTask+0x300>)
 8001012:	f002 fa33 	bl	800347c <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 8001016:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 800101a:	2b00      	cmp	r3, #0
 800101c:	d15d      	bne.n	80010da <FileTask+0x14a>
    if (read_line_ptr != BLT_NULL)
 800101e:	b1a8      	cbz	r0, 800104c <FileTask+0xbc>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, BLT_NULL);
 8001020:	489b      	ldr	r0, [pc, #620]	; (8001290 <FileTask+0x300>)
 8001022:	2200      	movs	r2, #0
 8001024:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 8001028:	f7ff ff16 	bl	8000e58 <FileSrecParseLine>
 800102c:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 800102e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001032:	d060      	beq.n	80010f6 <FileTask+0x166>
    if (parse_result > 0)
 8001034:	2800      	cmp	r0, #0
 8001036:	dd09      	ble.n	800104c <FileTask+0xbc>
      if (eraseInfo.total_size == 0)
 8001038:	4b93      	ldr	r3, [pc, #588]	; (8001288 <FileTask+0x2f8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d167      	bne.n	8001110 <FileTask+0x180>
        eraseInfo.start_address = lineParseObject.address;
 8001040:	4b93      	ldr	r3, [pc, #588]	; (8001290 <FileTask+0x300>)
 8001042:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001046:	4b90      	ldr	r3, [pc, #576]	; (8001288 <FileTask+0x2f8>)
 8001048:	601a      	str	r2, [r3, #0]
        eraseInfo.total_size = parse_result;
 800104a:	6058      	str	r0, [r3, #4]
    if (f_eof(&fatFsObjects.file) > 0)
 800104c:	4b8f      	ldr	r3, [pc, #572]	; (800128c <FileTask+0x2fc>)
 800104e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001052:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001056:	429a      	cmp	r2, r3
 8001058:	d1a7      	bne.n	8000faa <FileTask+0x1a>
      if (f_lseek(&fatFsObjects.file, 0) != FR_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4885      	ldr	r0, [pc, #532]	; (8001274 <FileTask+0x2e4>)
 800105e:	f002 f8cb 	bl	80031f8 <f_lseek>
 8001062:	2800      	cmp	r0, #0
 8001064:	f040 80a7 	bne.w	80011b6 <FileTask+0x226>
      if (eraseInfo.total_size > 0)
 8001068:	4b87      	ldr	r3, [pc, #540]	; (8001288 <FileTask+0x2f8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	b373      	cbz	r3, 80010cc <FileTask+0x13c>
        FileFirmwareUpdateLogHook("OK\n\r");
 800106e:	4883      	ldr	r0, [pc, #524]	; (800127c <FileTask+0x2ec>)
 8001070:	f002 fb3e 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("Erasing ");
 8001074:	4887      	ldr	r0, [pc, #540]	; (8001294 <FileTask+0x304>)
 8001076:	f002 fb3b 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 800107a:	4d87      	ldr	r5, [pc, #540]	; (8001298 <FileTask+0x308>)
 800107c:	4c82      	ldr	r4, [pc, #520]	; (8001288 <FileTask+0x2f8>)
 800107e:	4629      	mov	r1, r5
 8001080:	6860      	ldr	r0, [r4, #4]
 8001082:	f7ff fdf5 	bl	8000c70 <FileLibLongToIntString>
        FileFirmwareUpdateLogHook(loggingStr);
 8001086:	4628      	mov	r0, r5
 8001088:	f002 fb32 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 800108c:	4883      	ldr	r0, [pc, #524]	; (800129c <FileTask+0x30c>)
 800108e:	f002 fb2f 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 8001092:	4629      	mov	r1, r5
 8001094:	78e0      	ldrb	r0, [r4, #3]
 8001096:	f7ff fe21 	bl	8000cdc <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 800109a:	1ca9      	adds	r1, r5, #2
 800109c:	78a0      	ldrb	r0, [r4, #2]
 800109e:	f7ff fe1d 	bl	8000cdc <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 80010a2:	1d29      	adds	r1, r5, #4
 80010a4:	7860      	ldrb	r0, [r4, #1]
 80010a6:	f7ff fe19 	bl	8000cdc <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 80010aa:	1da9      	adds	r1, r5, #6
 80010ac:	7820      	ldrb	r0, [r4, #0]
 80010ae:	f7ff fe15 	bl	8000cdc <FileLibByteToHexString>
        FileFirmwareUpdateLogHook(loggingStr);
 80010b2:	4628      	mov	r0, r5
 80010b4:	f002 fb1c 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("...");
 80010b8:	4879      	ldr	r0, [pc, #484]	; (80012a0 <FileTask+0x310>)
 80010ba:	f002 fb19 	bl	80036f0 <FileFirmwareUpdateLogHook>
        if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 80010be:	6861      	ldr	r1, [r4, #4]
 80010c0:	6820      	ldr	r0, [r4, #0]
 80010c2:	f7ff fc09 	bl	80008d8 <NvmErase>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	f000 8082 	beq.w	80011d0 <FileTask+0x240>
      FileFirmwareUpdateLogHook("OK\n\r");
 80010cc:	486b      	ldr	r0, [pc, #428]	; (800127c <FileTask+0x2ec>)
 80010ce:	f002 fb0f 	bl	80036f0 <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_PROGRAMMING;
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <FileTask+0x2d8>)
 80010d4:	2203      	movs	r2, #3
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e767      	b.n	8000faa <FileTask+0x1a>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <FileTask+0x2d8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <FileTask+0x2e8>)
 80010e2:	f002 fb05 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f002 faf4 	bl	80036d4 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 80010ec:	f504 700c 	add.w	r0, r4, #560	; 0x230
 80010f0:	f002 f86e 	bl	80031d0 <f_close>
      return;
 80010f4:	e759      	b.n	8000faa <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <FileTask+0x2d8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 80010fc:	485e      	ldr	r0, [pc, #376]	; (8001278 <FileTask+0x2e8>)
 80010fe:	f002 faf7 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8001102:	2003      	movs	r0, #3
 8001104:	f002 fae6 	bl	80036d4 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8001108:	485a      	ldr	r0, [pc, #360]	; (8001274 <FileTask+0x2e4>)
 800110a:	f002 f861 	bl	80031d0 <f_close>
        return;
 800110e:	e74c      	b.n	8000faa <FileTask+0x1a>
        if (lineParseObject.address == (eraseInfo.start_address + eraseInfo.total_size))
 8001110:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <FileTask+0x300>)
 8001112:	f8d2 1180 	ldr.w	r1, [r2, #384]	; 0x180
 8001116:	4a5c      	ldr	r2, [pc, #368]	; (8001288 <FileTask+0x2f8>)
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	441a      	add	r2, r3
 800111c:	4291      	cmp	r1, r2
 800111e:	d103      	bne.n	8001128 <FileTask+0x198>
          eraseInfo.total_size += parse_result;
 8001120:	4403      	add	r3, r0
 8001122:	4a59      	ldr	r2, [pc, #356]	; (8001288 <FileTask+0x2f8>)
 8001124:	6053      	str	r3, [r2, #4]
 8001126:	e791      	b.n	800104c <FileTask+0xbc>
          FileFirmwareUpdateLogHook("OK\n\r");
 8001128:	4854      	ldr	r0, [pc, #336]	; (800127c <FileTask+0x2ec>)
 800112a:	f002 fae1 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Erasing ");
 800112e:	4859      	ldr	r0, [pc, #356]	; (8001294 <FileTask+0x304>)
 8001130:	f002 fade 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 8001134:	4e58      	ldr	r6, [pc, #352]	; (8001298 <FileTask+0x308>)
 8001136:	4d54      	ldr	r5, [pc, #336]	; (8001288 <FileTask+0x2f8>)
 8001138:	4631      	mov	r1, r6
 800113a:	6868      	ldr	r0, [r5, #4]
 800113c:	f7ff fd98 	bl	8000c70 <FileLibLongToIntString>
          FileFirmwareUpdateLogHook(loggingStr);
 8001140:	4630      	mov	r0, r6
 8001142:	f002 fad5 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8001146:	4855      	ldr	r0, [pc, #340]	; (800129c <FileTask+0x30c>)
 8001148:	f002 fad2 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 800114c:	4631      	mov	r1, r6
 800114e:	78e8      	ldrb	r0, [r5, #3]
 8001150:	f7ff fdc4 	bl	8000cdc <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8001154:	1cb1      	adds	r1, r6, #2
 8001156:	78a8      	ldrb	r0, [r5, #2]
 8001158:	f7ff fdc0 	bl	8000cdc <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 800115c:	1d31      	adds	r1, r6, #4
 800115e:	7868      	ldrb	r0, [r5, #1]
 8001160:	f7ff fdbc 	bl	8000cdc <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8001164:	1db1      	adds	r1, r6, #6
 8001166:	7828      	ldrb	r0, [r5, #0]
 8001168:	f7ff fdb8 	bl	8000cdc <FileLibByteToHexString>
          FileFirmwareUpdateLogHook(loggingStr);
 800116c:	4630      	mov	r0, r6
 800116e:	f002 fabf 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("...");
 8001172:	484b      	ldr	r0, [pc, #300]	; (80012a0 <FileTask+0x310>)
 8001174:	f002 fabc 	bl	80036f0 <FileFirmwareUpdateLogHook>
          if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8001178:	6869      	ldr	r1, [r5, #4]
 800117a:	6828      	ldr	r0, [r5, #0]
 800117c:	f7ff fbac 	bl	80008d8 <NvmErase>
 8001180:	b160      	cbz	r0, 800119c <FileTask+0x20c>
          FileFirmwareUpdateLogHook("OK\n\r");
 8001182:	483e      	ldr	r0, [pc, #248]	; (800127c <FileTask+0x2ec>)
 8001184:	f002 fab4 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8001188:	483e      	ldr	r0, [pc, #248]	; (8001284 <FileTask+0x2f4>)
 800118a:	f002 fab1 	bl	80036f0 <FileFirmwareUpdateLogHook>
          eraseInfo.start_address = lineParseObject.address;
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <FileTask+0x300>)
 8001190:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <FileTask+0x2f8>)
 8001196:	601a      	str	r2, [r3, #0]
          eraseInfo.total_size = parse_result;
 8001198:	605c      	str	r4, [r3, #4]
 800119a:	e757      	b.n	800104c <FileTask+0xbc>
            firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <FileTask+0x2d8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
            FileFirmwareUpdateLogHook("ERROR\n\r");
 80011a2:	4835      	ldr	r0, [pc, #212]	; (8001278 <FileTask+0x2e8>)
 80011a4:	f002 faa4 	bl	80036f0 <FileFirmwareUpdateLogHook>
            FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 80011a8:	2005      	movs	r0, #5
 80011aa:	f002 fa93 	bl	80036d4 <FileFirmwareUpdateErrorHook>
            f_close(&fatFsObjects.file);
 80011ae:	4831      	ldr	r0, [pc, #196]	; (8001274 <FileTask+0x2e4>)
 80011b0:	f002 f80e 	bl	80031d0 <f_close>
            return;
 80011b4:	e6f9      	b.n	8000faa <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <FileTask+0x2d8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 80011bc:	482e      	ldr	r0, [pc, #184]	; (8001278 <FileTask+0x2e8>)
 80011be:	f002 fa97 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_REWINDING_FILE_READ_POINTER);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f002 fa86 	bl	80036d4 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 80011c8:	482a      	ldr	r0, [pc, #168]	; (8001274 <FileTask+0x2e4>)
 80011ca:	f002 f801 	bl	80031d0 <f_close>
        return;
 80011ce:	e6ec      	b.n	8000faa <FileTask+0x1a>
          firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <FileTask+0x2d8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
          FileFirmwareUpdateLogHook("ERROR\n\r");
 80011d6:	4828      	ldr	r0, [pc, #160]	; (8001278 <FileTask+0x2e8>)
 80011d8:	f002 fa8a 	bl	80036f0 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 80011dc:	2005      	movs	r0, #5
 80011de:	f002 fa79 	bl	80036d4 <FileFirmwareUpdateErrorHook>
          f_close(&fatFsObjects.file);
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <FileTask+0x2e4>)
 80011e4:	f001 fff4 	bl	80031d0 <f_close>
          return;
 80011e8:	e6df      	b.n	8000faa <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 80011ea:	4c28      	ldr	r4, [pc, #160]	; (800128c <FileTask+0x2fc>)
 80011ec:	f504 720c 	add.w	r2, r4, #560	; 0x230
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <FileTask+0x300>)
 80011f6:	f002 f941 	bl	800347c <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 80011fa:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d156      	bne.n	80012b0 <FileTask+0x320>
    if (read_line_ptr != BLT_NULL)
 8001202:	b160      	cbz	r0, 800121e <FileTask+0x28e>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, lineParseObject.data);
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <FileTask+0x300>)
 8001206:	f500 7280 	add.w	r2, r0, #256	; 0x100
 800120a:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 800120e:	f7ff fe23 	bl	8000e58 <FileSrecParseLine>
 8001212:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8001214:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001218:	d058      	beq.n	80012cc <FileTask+0x33c>
    if (parse_result > 0)
 800121a:	2800      	cmp	r0, #0
 800121c:	dc63      	bgt.n	80012e6 <FileTask+0x356>
    if (f_eof(&fatFsObjects.file) > 0)
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <FileTask+0x2fc>)
 8001220:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8001224:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001228:	429a      	cmp	r2, r3
 800122a:	f47f aebe 	bne.w	8000faa <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Writing program checksum...");
 800122e:	481d      	ldr	r0, [pc, #116]	; (80012a4 <FileTask+0x314>)
 8001230:	f002 fa5e 	bl	80036f0 <FileFirmwareUpdateLogHook>
      if (NvmDone() == BLT_FALSE)
 8001234:	f7ff fb5c 	bl	80008f0 <NvmDone>
 8001238:	2800      	cmp	r0, #0
 800123a:	f000 8096 	beq.w	800136a <FileTask+0x3da>
      FileFirmwareUpdateLogHook("OK\n\r");
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <FileTask+0x2ec>)
 8001240:	f002 fa56 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("Closing firmware file\n\r");
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <FileTask+0x318>)
 8001246:	f002 fa53 	bl	80036f0 <FileFirmwareUpdateLogHook>
      f_close(&fatFsObjects.file);
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <FileTask+0x2e4>)
 800124c:	f001 ffc0 	bl	80031d0 <f_close>
      FileFirmwareUpdateLogHook("Firmware update successfully completed\n\r");
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <FileTask+0x31c>)
 8001252:	f002 fa4d 	bl	80036f0 <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <FileTask+0x2d8>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateCompletedHook();
 800125c:	f002 fa18 	bl	8003690 <FileFirmwareUpdateCompletedHook>
      CpuStartUserProgram();
 8001260:	f7ff f93a 	bl	80004d8 <CpuStartUserProgram>
 8001264:	e6a1      	b.n	8000faa <FileTask+0x1a>
 8001266:	bf00      	nop
 8001268:	20000afc 	.word	0x20000afc
 800126c:	08005c38 	.word	0x08005c38
 8001270:	08005c5c 	.word	0x08005c5c
 8001274:	200008d4 	.word	0x200008d4
 8001278:	08005c84 	.word	0x08005c84
 800127c:	08005c8c 	.word	0x08005c8c
 8001280:	08005c94 	.word	0x08005c94
 8001284:	08005cb8 	.word	0x08005cb8
 8001288:	2000069c 	.word	0x2000069c
 800128c:	200006a4 	.word	0x200006a4
 8001290:	20000b00 	.word	0x20000b00
 8001294:	08005ce8 	.word	0x08005ce8
 8001298:	20000c84 	.word	0x20000c84
 800129c:	08005cf4 	.word	0x08005cf4
 80012a0:	08005d98 	.word	0x08005d98
 80012a4:	08005d80 	.word	0x08005d80
 80012a8:	08005d9c 	.word	0x08005d9c
 80012ac:	08005db4 	.word	0x08005db4
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <FileTask+0x3f8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("Reading line from file...ERROR\n\r");
 80012b6:	4835      	ldr	r0, [pc, #212]	; (800138c <FileTask+0x3fc>)
 80012b8:	f002 fa1a 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 80012bc:	2002      	movs	r0, #2
 80012be:	f002 fa09 	bl	80036d4 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 80012c2:	f504 700c 	add.w	r0, r4, #560	; 0x230
 80012c6:	f001 ff83 	bl	80031d0 <f_close>
      return;
 80012ca:	e66e      	b.n	8000faa <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <FileTask+0x3f8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("Invalid checksum found...ERROR\n\r");
 80012d2:	482f      	ldr	r0, [pc, #188]	; (8001390 <FileTask+0x400>)
 80012d4:	f002 fa0c 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 80012d8:	2003      	movs	r0, #3
 80012da:	f002 f9fb 	bl	80036d4 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 80012de:	482d      	ldr	r0, [pc, #180]	; (8001394 <FileTask+0x404>)
 80012e0:	f001 ff76 	bl	80031d0 <f_close>
        return;
 80012e4:	e661      	b.n	8000faa <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Programming ");
 80012e6:	482c      	ldr	r0, [pc, #176]	; (8001398 <FileTask+0x408>)
 80012e8:	f002 fa02 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileLibLongToIntString(parse_result, loggingStr);
 80012ec:	4d2b      	ldr	r5, [pc, #172]	; (800139c <FileTask+0x40c>)
 80012ee:	4629      	mov	r1, r5
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fcbd 	bl	8000c70 <FileLibLongToIntString>
      FileFirmwareUpdateLogHook(loggingStr);
 80012f6:	4628      	mov	r0, r5
 80012f8:	f002 f9fa 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook(" bytes to memory at 0x");
 80012fc:	4828      	ldr	r0, [pc, #160]	; (80013a0 <FileTask+0x410>)
 80012fe:	f002 f9f7 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 24), &loggingStr[0]);
 8001302:	4e28      	ldr	r6, [pc, #160]	; (80013a4 <FileTask+0x414>)
 8001304:	4629      	mov	r1, r5
 8001306:	f896 0183 	ldrb.w	r0, [r6, #387]	; 0x183
 800130a:	f7ff fce7 	bl	8000cdc <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 16), &loggingStr[2]);
 800130e:	1ca9      	adds	r1, r5, #2
 8001310:	f896 0182 	ldrb.w	r0, [r6, #386]	; 0x182
 8001314:	f7ff fce2 	bl	8000cdc <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 8), &loggingStr[4]);
 8001318:	1d29      	adds	r1, r5, #4
 800131a:	f896 0181 	ldrb.w	r0, [r6, #385]	; 0x181
 800131e:	f7ff fcdd 	bl	8000cdc <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)lineParseObject.address, &loggingStr[6]);
 8001322:	1da9      	adds	r1, r5, #6
 8001324:	f896 0180 	ldrb.w	r0, [r6, #384]	; 0x180
 8001328:	f7ff fcd8 	bl	8000cdc <FileLibByteToHexString>
      FileFirmwareUpdateLogHook(loggingStr);
 800132c:	4628      	mov	r0, r5
 800132e:	f002 f9df 	bl	80036f0 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("...");
 8001332:	481d      	ldr	r0, [pc, #116]	; (80013a8 <FileTask+0x418>)
 8001334:	f002 f9dc 	bl	80036f0 <FileFirmwareUpdateLogHook>
      if (NvmWrite(lineParseObject.address, parse_result, lineParseObject.data) == BLT_FALSE)
 8001338:	f506 7280 	add.w	r2, r6, #256	; 0x100
 800133c:	4621      	mov	r1, r4
 800133e:	f8d6 0180 	ldr.w	r0, [r6, #384]	; 0x180
 8001342:	f7ff fac5 	bl	80008d0 <NvmWrite>
 8001346:	b118      	cbz	r0, 8001350 <FileTask+0x3c0>
      FileFirmwareUpdateLogHook("OK\n\r");
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <FileTask+0x41c>)
 800134a:	f002 f9d1 	bl	80036f0 <FileFirmwareUpdateLogHook>
 800134e:	e766      	b.n	800121e <FileTask+0x28e>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <FileTask+0x3f8>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8001356:	4816      	ldr	r0, [pc, #88]	; (80013b0 <FileTask+0x420>)
 8001358:	f002 f9ca 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_PROGRAM_MEMORY);
 800135c:	2006      	movs	r0, #6
 800135e:	f002 f9b9 	bl	80036d4 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <FileTask+0x404>)
 8001364:	f001 ff34 	bl	80031d0 <f_close>
        return;
 8001368:	e61f      	b.n	8000faa <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <FileTask+0x3f8>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <FileTask+0x420>)
 8001372:	f002 f9bd 	bl	80036f0 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_WRITE_CHECKSUM);
 8001376:	2007      	movs	r0, #7
 8001378:	f002 f9ac 	bl	80036d4 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <FileTask+0x404>)
 800137e:	f001 ff27 	bl	80031d0 <f_close>
        return;
 8001382:	e612      	b.n	8000faa <FileTask+0x1a>
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000afc 	.word	0x20000afc
 800138c:	08005d10 	.word	0x08005d10
 8001390:	08005d34 	.word	0x08005d34
 8001394:	200008d4 	.word	0x200008d4
 8001398:	08005d58 	.word	0x08005d58
 800139c:	20000c84 	.word	0x20000c84
 80013a0:	08005d68 	.word	0x08005d68
 80013a4:	20000b00 	.word	0x20000b00
 80013a8:	08005d98 	.word	0x08005d98
 80013ac:	08005c8c 	.word	0x08005c8c
 80013b0:	08005c84 	.word	0x08005c84

080013b4 <XcpProtectResources>:
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
  xcpInfo.protection = 0;
 80013b4:	4b01      	ldr	r3, [pc, #4]	; (80013bc <XcpProtectResources+0x8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80013ba:	4770      	bx	lr
 80013bc:	20000cc4 	.word	0x20000cc4

080013c0 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <XcpSetCtoError+0x10>)
 80013c2:	22fe      	movs	r2, #254	; 0xfe
 80013c4:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 80013c6:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 80013c8:	2202      	movs	r2, #2
 80013ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 80013ce:	4770      	bx	lr
 80013d0:	20000cc4 	.word	0x20000cc4

080013d4 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 80013d4:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 80013d6:	4c05      	ldr	r4, [pc, #20]	; (80013ec <XcpCmdDisconnect+0x18>)
 80013d8:	2300      	movs	r3, #0
 80013da:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 80013dc:	f7ff ffea 	bl	80013b4 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	20000cc4 	.word	0x20000cc4

080013f0 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <XcpCmdGetStatus+0x1c>)
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 80013f6:	2200      	movs	r2, #0
 80013f8:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 80013fa:	7859      	ldrb	r1, [r3, #1]
 80013fc:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 80013fe:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8001400:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001402:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001404:	2206      	movs	r2, #6
 8001406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 800140a:	4770      	bx	lr
 800140c:	20000cc4 	.word	0x20000cc4

08001410 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001410:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ffd4 	bl	80013c0 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8001418:	bd08      	pop	{r3, pc}
	...

0800141c <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <XcpCmdGetId+0x20>)
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <XcpCmdGetId+0x24>)
 8001424:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8001426:	2200      	movs	r2, #0
 8001428:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 800142a:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 800142c:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 800142e:	2207      	movs	r2, #7
 8001430:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001434:	2208      	movs	r2, #8
 8001436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 800143a:	4770      	bx	lr
 800143c:	20000cc4 	.word	0x20000cc4
 8001440:	08005de0 	.word	0x08005de0

08001444 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <XcpCmdSetMta+0x14>)
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 800144a:	6842      	ldr	r2, [r0, #4]
 800144c:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800144e:	2201      	movs	r2, #1
 8001450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000cc4 	.word	0x20000cc4

0800145c <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 800145c:	b508      	push	{r3, lr}
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 800145e:	2031      	movs	r0, #49	; 0x31
 8001460:	f7ff ffae 	bl	80013c0 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8001464:	bd08      	pop	{r3, pc}
	...

08001468 <XcpCmdProgramStart>:
{
 8001468:	b538      	push	{r3, r4, r5, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800146a:	4c08      	ldr	r4, [pc, #32]	; (800148c <XcpCmdProgramStart+0x24>)
 800146c:	23ff      	movs	r3, #255	; 0xff
 800146e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8001470:	2500      	movs	r5, #0
 8001472:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001474:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001476:	f7ff fbc7 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 800147a:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 800147c:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 800147e:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8001480:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8001482:	2307      	movs	r3, #7
 8001484:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8001488:	bd38      	pop	{r3, r4, r5, pc}
 800148a:	bf00      	nop
 800148c:	20000cc4 	.word	0x20000cc4

08001490 <XcpCmdConnect>:
{
 8001490:	b538      	push	{r3, r4, r5, lr}
  if (FileIsIdle() == BLT_FALSE)
 8001492:	f7ff fc79 	bl	8000d88 <FileIsIdle>
 8001496:	b1e8      	cbz	r0, 80014d4 <XcpCmdConnect+0x44>
  XcpProtectResources();
 8001498:	f7ff ff8c 	bl	80013b4 <XcpProtectResources>
  xcpInfo.connected = 1;
 800149c:	4c0f      	ldr	r4, [pc, #60]	; (80014dc <XcpCmdConnect+0x4c>)
 800149e:	2501      	movs	r5, #1
 80014a0:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80014a6:	2310      	movs	r3, #16
 80014a8:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80014ae:	f7ff fbab 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 80014b2:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 80014b4:	f7ff fbba 	bl	8000c2c <ComGetActiveInterfaceMaxTxLen>
 80014b8:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80014ba:	f7ff fbb7 	bl	8000c2c <ComGetActiveInterfaceMaxTxLen>
 80014be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80014c2:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80014c4:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 80014c6:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 80014c8:	2308      	movs	r3, #8
 80014ca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 80014ce:	f7ff f9fb 	bl	80008c8 <NvmInit>
} /*** end of XcpCmdConnect ***/
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80014d4:	2010      	movs	r0, #16
 80014d6:	f7ff ff73 	bl	80013c0 <XcpSetCtoError>
    return;
 80014da:	e7fa      	b.n	80014d2 <XcpCmdConnect+0x42>
 80014dc:	20000cc4 	.word	0x20000cc4

080014e0 <XcpCmdUpload>:
{
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4605      	mov	r5, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80014e4:	7844      	ldrb	r4, [r0, #1]
 80014e6:	f7ff fb8f 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 80014ea:	3801      	subs	r0, #1
 80014ec:	4284      	cmp	r4, r0
 80014ee:	dc10      	bgt.n	8001512 <XcpCmdUpload+0x32>
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <XcpCmdUpload+0x3c>)
 80014f2:	786a      	ldrb	r2, [r5, #1]
 80014f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80014f6:	1d20      	adds	r0, r4, #4
 80014f8:	f7ff f80e 	bl	8000518 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80014fc:	23ff      	movs	r3, #255	; 0xff
 80014fe:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += data[1];
 8001500:	786a      	ldrb	r2, [r5, #1]
 8001502:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001504:	4413      	add	r3, r2
 8001506:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8001508:	786b      	ldrb	r3, [r5, #1]
 800150a:	3301      	adds	r3, #1
 800150c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8001510:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001512:	2022      	movs	r0, #34	; 0x22
 8001514:	f7ff ff54 	bl	80013c0 <XcpSetCtoError>
    return;
 8001518:	e7fa      	b.n	8001510 <XcpCmdUpload+0x30>
 800151a:	bf00      	nop
 800151c:	20000cc4 	.word	0x20000cc4

08001520 <XcpCmdShortUpload>:
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001524:	7845      	ldrb	r5, [r0, #1]
 8001526:	f7ff fb6f 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 800152a:	3801      	subs	r0, #1
 800152c:	4285      	cmp	r5, r0
 800152e:	dc11      	bgt.n	8001554 <XcpCmdShortUpload+0x34>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001530:	6861      	ldr	r1, [r4, #4]
 8001532:	4d0a      	ldr	r5, [pc, #40]	; (800155c <XcpCmdShortUpload+0x3c>)
 8001534:	64a9      	str	r1, [r5, #72]	; 0x48
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001536:	7862      	ldrb	r2, [r4, #1]
 8001538:	1d28      	adds	r0, r5, #4
 800153a:	f7fe ffed 	bl	8000518 <CpuMemCopy>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800153e:	23ff      	movs	r3, #255	; 0xff
 8001540:	70eb      	strb	r3, [r5, #3]
  xcpInfo.mta += data[1];
 8001542:	7862      	ldrb	r2, [r4, #1]
 8001544:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001546:	4413      	add	r3, r2
 8001548:	64ab      	str	r3, [r5, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 800154a:	7863      	ldrb	r3, [r4, #1]
 800154c:	3301      	adds	r3, #1
 800154e:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8001552:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001554:	2022      	movs	r0, #34	; 0x22
 8001556:	f7ff ff33 	bl	80013c0 <XcpSetCtoError>
    return;
 800155a:	e7fa      	b.n	8001552 <XcpCmdShortUpload+0x32>
 800155c:	20000cc4 	.word	0x20000cc4

08001560 <XcpComputeChecksum>:
{
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8001566:	2400      	movs	r4, #0
  while (length-- > 0)
 8001568:	e006      	b.n	8001578 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 800156a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800156e:	441c      	add	r4, r3
 8001570:	b2e4      	uxtb	r4, r4
    CopService();
 8001572:	f7ff fb79 	bl	8000c68 <CopService>
  while (length-- > 0)
 8001576:	4631      	mov	r1, r6
 8001578:	1e4e      	subs	r6, r1, #1
 800157a:	2900      	cmp	r1, #0
 800157c:	d1f5      	bne.n	800156a <XcpComputeChecksum+0xa>
  *checksum = cs;
 800157e:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8001580:	2001      	movs	r0, #1
 8001582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001584 <XcpCmdBuildCheckSum>:
{
 8001584:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001586:	4c08      	ldr	r4, [pc, #32]	; (80015a8 <XcpCmdBuildCheckSum+0x24>)
 8001588:	23ff      	movs	r3, #255	; 0xff
 800158a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 800158c:	1de2      	adds	r2, r4, #7
 800158e:	6841      	ldr	r1, [r0, #4]
 8001590:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001592:	f7ff ffe5 	bl	8001560 <XcpComputeChecksum>
 8001596:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 800159c:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 800159e:	2308      	movs	r3, #8
 80015a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 80015a4:	bd10      	pop	{r4, pc}
 80015a6:	bf00      	nop
 80015a8:	20000cc4 	.word	0x20000cc4

080015ac <XcpCmdProgramMax>:
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4605      	mov	r5, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <XcpCmdProgramMax+0x3c>)
 80015b2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80015b4:	f7ff fb28 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 80015b8:	1c6a      	adds	r2, r5, #1
 80015ba:	1e41      	subs	r1, r0, #1
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff f987 	bl	80008d0 <NvmWrite>
 80015c2:	b160      	cbz	r0, 80015de <XcpCmdProgramMax+0x32>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80015c4:	4c08      	ldr	r4, [pc, #32]	; (80015e8 <XcpCmdProgramMax+0x3c>)
 80015c6:	23ff      	movs	r3, #255	; 0xff
 80015c8:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 80015ca:	f7ff fb1d 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 80015ce:	3801      	subs	r0, #1
 80015d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015d2:	4403      	add	r3, r0
 80015d4:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 80015dc:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 80015de:	2031      	movs	r0, #49	; 0x31
 80015e0:	f7ff feee 	bl	80013c0 <XcpSetCtoError>
    return;
 80015e4:	e7fa      	b.n	80015dc <XcpCmdProgramMax+0x30>
 80015e6:	bf00      	nop
 80015e8:	20000cc4 	.word	0x20000cc4

080015ec <XcpCmdProgram>:
{
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 80015f0:	7845      	ldrb	r5, [r0, #1]
 80015f2:	f7ff fb09 	bl	8000c08 <ComGetActiveInterfaceMaxRxLen>
 80015f6:	3802      	subs	r0, #2
 80015f8:	4285      	cmp	r5, r0
 80015fa:	dc0e      	bgt.n	800161a <XcpCmdProgram+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <XcpCmdProgram+0x58>)
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8001602:	2201      	movs	r2, #1
 8001604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8001608:	7861      	ldrb	r1, [r4, #1]
 800160a:	b951      	cbnz	r1, 8001622 <XcpCmdProgram+0x36>
    if (NvmDone() == BLT_FALSE)
 800160c:	f7ff f970 	bl	80008f0 <NvmDone>
 8001610:	b930      	cbnz	r0, 8001620 <XcpCmdProgram+0x34>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8001612:	2031      	movs	r0, #49	; 0x31
 8001614:	f7ff fed4 	bl	80013c0 <XcpSetCtoError>
 8001618:	e002      	b.n	8001620 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800161a:	2022      	movs	r0, #34	; 0x22
 800161c:	f7ff fed0 	bl	80013c0 <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8001620:	bd38      	pop	{r3, r4, r5, pc}
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8001622:	1ca2      	adds	r2, r4, #2
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <XcpCmdProgram+0x58>)
 8001626:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001628:	f7ff f952 	bl	80008d0 <NvmWrite>
 800162c:	b128      	cbz	r0, 800163a <XcpCmdProgram+0x4e>
  xcpInfo.mta += data[1];
 800162e:	7861      	ldrb	r1, [r4, #1]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <XcpCmdProgram+0x58>)
 8001632:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8001634:	440b      	add	r3, r1
 8001636:	6493      	str	r3, [r2, #72]	; 0x48
 8001638:	e7f2      	b.n	8001620 <XcpCmdProgram+0x34>
    XcpSetCtoError(XCP_ERR_GENERIC);
 800163a:	2031      	movs	r0, #49	; 0x31
 800163c:	f7ff fec0 	bl	80013c0 <XcpSetCtoError>
    return;
 8001640:	e7ee      	b.n	8001620 <XcpCmdProgram+0x34>
 8001642:	bf00      	nop
 8001644:	20000cc4 	.word	0x20000cc4

08001648 <XcpCmdProgramClear>:
{
 8001648:	b508      	push	{r3, lr}
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 800164a:	6841      	ldr	r1, [r0, #4]
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <XcpCmdProgramClear+0x24>)
 800164e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001650:	f7ff f942 	bl	80008d8 <NvmErase>
 8001654:	b130      	cbz	r0, 8001664 <XcpCmdProgramClear+0x1c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <XcpCmdProgramClear+0x24>)
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800165c:	2201      	movs	r2, #1
 800165e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 8001662:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001664:	2031      	movs	r0, #49	; 0x31
 8001666:	f7ff feab 	bl	80013c0 <XcpSetCtoError>
    return;
 800166a:	e7fa      	b.n	8001662 <XcpCmdProgramClear+0x1a>
 800166c:	20000cc4 	.word	0x20000cc4

08001670 <XcpCmdProgramReset>:
{
 8001670:	b508      	push	{r3, lr}
  CpuStartUserProgram();
 8001672:	f7fe ff31 	bl	80004d8 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001676:	4b03      	ldr	r3, [pc, #12]	; (8001684 <XcpCmdProgramReset+0x14>)
 8001678:	22ff      	movs	r2, #255	; 0xff
 800167a:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800167c:	2201      	movs	r2, #1
 800167e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8001682:	bd08      	pop	{r3, pc}
 8001684:	20000cc4 	.word	0x20000cc4

08001688 <XcpTransmitPacket>:
{
 8001688:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 800168a:	b289      	uxth	r1, r1
 800168c:	f7ff faae 	bl	8000bec <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 8001690:	bd08      	pop	{r3, pc}
	...

08001694 <XcpInit>:
  xcpInfo.connected = 0;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <XcpInit+0x18>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 800169a:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 800169c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 80016a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 80016a4:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 80016a6:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000cc4 	.word	0x20000cc4

080016b0 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <XcpIsConnected+0x10>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b10b      	cbz	r3, 80016ba <XcpIsConnected+0xa>
  return BLT_TRUE;
 80016b6:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 80016b8:	4770      	bx	lr
    return BLT_FALSE;
 80016ba:	2000      	movs	r0, #0
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000cc4 	.word	0x20000cc4

080016c4 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <XcpPacketTransmitted+0xc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000cc4 	.word	0x20000cc4

080016d4 <XcpPacketReceived>:
{
 80016d4:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80016d6:	7803      	ldrb	r3, [r0, #0]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d004      	beq.n	80016e6 <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 80016dc:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <XcpPacketReceived+0xe0>)
 80016de:	7812      	ldrb	r2, [r2, #0]
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d014      	beq.n	800170e <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 80016e4:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 80016e6:	f7ff fed3 	bl	8001490 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <XcpPacketReceived+0xe0>)
 80016ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d05a      	beq.n	80017aa <XcpPacketReceived+0xd6>
  if (xcpInfo.ctoLen > 0)
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <XcpPacketReceived+0xe0>)
 80016f6:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 80016fa:	2900      	cmp	r1, #0
 80016fc:	ddf2      	ble.n	80016e4 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 80016fe:	4618      	mov	r0, r3
 8001700:	2301      	movs	r3, #1
 8001702:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8001706:	3003      	adds	r0, #3
 8001708:	f7ff ffbe 	bl	8001688 <XcpTransmitPacket>
 800170c:	e7ea      	b.n	80016e4 <XcpPacketReceived+0x10>
    switch (data[0])
 800170e:	3bc9      	subs	r3, #201	; 0xc9
 8001710:	2b35      	cmp	r3, #53	; 0x35
 8001712:	d846      	bhi.n	80017a2 <XcpPacketReceived+0xce>
 8001714:	e8df f003 	tbb	[pc, r3]
 8001718:	42454533 	.word	0x42454533
 800171c:	363f4545 	.word	0x363f4545
 8001720:	4545393c 	.word	0x4545393c
 8001724:	45454545 	.word	0x45454545
 8001728:	45454545 	.word	0x45454545
 800172c:	45454545 	.word	0x45454545
 8001730:	45454545 	.word	0x45454545
 8001734:	45454545 	.word	0x45454545
 8001738:	45454545 	.word	0x45454545
 800173c:	45454545 	.word	0x45454545
 8001740:	1e244545 	.word	0x1e244545
 8001744:	4545211b 	.word	0x4545211b
 8001748:	2a452745 	.word	0x2a452745
 800174c:	302d      	.short	0x302d
        XcpCmdUpload(data);
 800174e:	f7ff fec7 	bl	80014e0 <XcpCmdUpload>
        break;
 8001752:	e7ca      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 8001754:	f7ff fee4 	bl	8001520 <XcpCmdShortUpload>
        break;
 8001758:	e7c7      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 800175a:	f7ff fe73 	bl	8001444 <XcpCmdSetMta>
        break;
 800175e:	e7c4      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 8001760:	f7ff ff10 	bl	8001584 <XcpCmdBuildCheckSum>
        break;
 8001764:	e7c1      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 8001766:	f7ff fe59 	bl	800141c <XcpCmdGetId>
        break;
 800176a:	e7be      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 800176c:	f7ff fe50 	bl	8001410 <XcpCmdSynch>
        break;
 8001770:	e7bb      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 8001772:	f7ff fe3d 	bl	80013f0 <XcpCmdGetStatus>
        break;
 8001776:	e7b8      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 8001778:	f7ff fe2c 	bl	80013d4 <XcpCmdDisconnect>
        break;
 800177c:	e7b5      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 800177e:	f7ff ff15 	bl	80015ac <XcpCmdProgramMax>
        break;
 8001782:	e7b2      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8001784:	f7ff ff32 	bl	80015ec <XcpCmdProgram>
        break;
 8001788:	e7af      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 800178a:	f7ff fe6d 	bl	8001468 <XcpCmdProgramStart>
        break;
 800178e:	e7ac      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 8001790:	f7ff ff5a 	bl	8001648 <XcpCmdProgramClear>
        break;
 8001794:	e7a9      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 8001796:	f7ff ff6b 	bl	8001670 <XcpCmdProgramReset>
        break;
 800179a:	e7a6      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 800179c:	f7ff fe5e 	bl	800145c <XcpCmdProgramPrepare>
        break;
 80017a0:	e7a3      	b.n	80016ea <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80017a2:	2020      	movs	r0, #32
 80017a4:	f7ff fe0c 	bl	80013c0 <XcpSetCtoError>
        break;
 80017a8:	e79f      	b.n	80016ea <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80017aa:	2010      	movs	r0, #16
 80017ac:	f7ff fe08 	bl	80013c0 <XcpSetCtoError>
 80017b0:	e7a0      	b.n	80016f4 <XcpPacketReceived+0x20>
 80017b2:	bf00      	nop
 80017b4:	20000cc4 	.word	0x20000cc4

080017b8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80017b8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80017ba:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80017bc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80017c0:	4770      	bx	lr

080017c2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80017c2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80017c4:	7883      	ldrb	r3, [r0, #2]
 80017c6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80017ca:	7843      	ldrb	r3, [r0, #1]
 80017cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80017d0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80017d2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80017d6:	4770      	bx	lr

080017d8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80017d8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80017da:	0a09      	lsrs	r1, r1, #8
 80017dc:	7041      	strb	r1, [r0, #1]
}
 80017de:	4770      	bx	lr

080017e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80017e0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80017e2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80017e6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80017e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80017ec:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80017ee:	0e09      	lsrs	r1, r1, #24
 80017f0:	70c1      	strb	r1, [r0, #3]
}
 80017f2:	4770      	bx	lr

080017f4 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80017f4:	4613      	mov	r3, r2
 80017f6:	b12a      	cbz	r2, 8001804 <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
 80017f8:	780a      	ldrb	r2, [r1, #0]
 80017fa:	7002      	strb	r2, [r0, #0]
 80017fc:	3001      	adds	r0, #1
 80017fe:	3101      	adds	r1, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	d1f9      	bne.n	80017f8 <mem_cpy+0x4>
	}
}
 8001804:	4770      	bx	lr

08001806 <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
 8001806:	7001      	strb	r1, [r0, #0]
 8001808:	3001      	adds	r0, #1
 800180a:	3a01      	subs	r2, #1
 800180c:	d1fb      	bne.n	8001806 <mem_set>
}
 800180e:	4770      	bx	lr

08001810 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8001810:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8001812:	1c45      	adds	r5, r0, #1
 8001814:	7803      	ldrb	r3, [r0, #0]
 8001816:	7808      	ldrb	r0, [r1, #0]
 8001818:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800181a:	3a01      	subs	r2, #1
 800181c:	d004      	beq.n	8001828 <mem_cmp+0x18>
 800181e:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8001820:	4628      	mov	r0, r5
 8001822:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f4      	beq.n	8001812 <mem_cmp+0x2>

	return r;
}
 8001828:	4618      	mov	r0, r3
 800182a:	bc30      	pop	{r4, r5}
 800182c:	4770      	bx	lr

0800182e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 800182e:	e000      	b.n	8001832 <chk_chr+0x4>
 8001830:	3001      	adds	r0, #1
 8001832:	7803      	ldrb	r3, [r0, #0]
 8001834:	b10b      	cbz	r3, 800183a <chk_chr+0xc>
 8001836:	428b      	cmp	r3, r1
 8001838:	d1fa      	bne.n	8001830 <chk_chr+0x2>
	return *str;
}
 800183a:	4618      	mov	r0, r3
 800183c:	4770      	bx	lr

0800183e <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800183e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001840:	6943      	ldr	r3, [r0, #20]
 8001842:	3b02      	subs	r3, #2
 8001844:	428b      	cmp	r3, r1
 8001846:	d904      	bls.n	8001852 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8001848:	8943      	ldrh	r3, [r0, #10]
 800184a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800184c:	fb01 0003 	mla	r0, r1, r3, r0
 8001850:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001852:	2000      	movs	r0, #0
}
 8001854:	4770      	bx	lr

08001856 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8001856:	b570      	push	{r4, r5, r6, lr}
 8001858:	4606      	mov	r6, r0
 800185a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800185c:	f101 001a 	add.w	r0, r1, #26
 8001860:	f7ff ffaa 	bl	80017b8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8001864:	7833      	ldrb	r3, [r6, #0]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d000      	beq.n	800186c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800186e:	f105 0014 	add.w	r0, r5, #20
 8001872:	f7ff ffa1 	bl	80017b8 <ld_word>
 8001876:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800187a:	e7f6      	b.n	800186a <ld_clust+0x14>

0800187c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	4606      	mov	r6, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001884:	b291      	uxth	r1, r2
 8001886:	f104 001a 	add.w	r0, r4, #26
 800188a:	f7ff ffa5 	bl	80017d8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800188e:	7833      	ldrb	r3, [r6, #0]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d000      	beq.n	8001896 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8001894:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001896:	0c29      	lsrs	r1, r5, #16
 8001898:	f104 0014 	add.w	r0, r4, #20
 800189c:	f7ff ff9c 	bl	80017d8 <st_word>
}
 80018a0:	e7f8      	b.n	8001894 <st_clust+0x18>
	...

080018a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	4607      	mov	r7, r0
 80018aa:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80018ac:	f101 001a 	add.w	r0, r1, #26
 80018b0:	f7ff ff82 	bl	80017b8 <ld_word>
 80018b4:	bb60      	cbnz	r0, 8001910 <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80018b6:	7835      	ldrb	r5, [r6, #0]
 80018b8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80018bc:	3d01      	subs	r5, #1
 80018be:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80018c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80018c6:	f04f 0801 	mov.w	r8, #1
 80018ca:	2400      	movs	r4, #0
 80018cc:	e004      	b.n	80018d8 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80018ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d2:	4298      	cmp	r0, r3
 80018d4:	d121      	bne.n	800191a <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80018d6:	3401      	adds	r4, #1
 80018d8:	2c0c      	cmp	r4, #12
 80018da:	d80e      	bhi.n	80018fa <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <pick_lfn+0x84>)
 80018de:	5d18      	ldrb	r0, [r3, r4]
 80018e0:	4430      	add	r0, r6
 80018e2:	f7ff ff69 	bl	80017b8 <ld_word>
		if (wc) {
 80018e6:	f1b8 0f00 	cmp.w	r8, #0
 80018ea:	d0f0      	beq.n	80018ce <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80018ec:	2dfe      	cmp	r5, #254	; 0xfe
 80018ee:	d812      	bhi.n	8001916 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80018f0:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80018f4:	4680      	mov	r8, r0
 80018f6:	3501      	adds	r5, #1
 80018f8:	e7ed      	b.n	80018d6 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80018fa:	7833      	ldrb	r3, [r6, #0]
 80018fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001900:	d00d      	beq.n	800191e <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8001902:	2dfe      	cmp	r5, #254	; 0xfe
 8001904:	d80d      	bhi.n	8001922 <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800190c:	2001      	movs	r0, #1
 800190e:	e000      	b.n	8001912 <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8001910:	2000      	movs	r0, #0
}
 8001912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8001916:	2000      	movs	r0, #0
 8001918:	e7fb      	b.n	8001912 <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800191a:	2000      	movs	r0, #0
 800191c:	e7f9      	b.n	8001912 <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 800191e:	2001      	movs	r0, #1
 8001920:	e7f7      	b.n	8001912 <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8001922:	2000      	movs	r0, #0
 8001924:	e7f5      	b.n	8001912 <pick_lfn+0x6e>
 8001926:	bf00      	nop
 8001928:	08005e68 	.word	0x08005e68

0800192c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001930:	4680      	mov	r8, r0
 8001932:	460f      	mov	r7, r1
 8001934:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8001936:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001938:	230f      	movs	r3, #15
 800193a:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800193c:	2400      	movs	r4, #0
 800193e:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8001940:	4621      	mov	r1, r4
 8001942:	f107 001a 	add.w	r0, r7, #26
 8001946:	f7ff ff47 	bl	80017d8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800194a:	f109 36ff 	add.w	r6, r9, #4294967295
 800194e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001952:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8001956:	4625      	mov	r5, r4
 8001958:	e002      	b.n	8001960 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800195a:	3401      	adds	r4, #1
 800195c:	2c0c      	cmp	r4, #12
 800195e:	d811      	bhi.n	8001984 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8001960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001964:	429d      	cmp	r5, r3
 8001966:	d002      	beq.n	800196e <put_lfn+0x42>
 8001968:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800196c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <put_lfn+0x74>)
 8001970:	5d18      	ldrb	r0, [r3, r4]
 8001972:	4629      	mov	r1, r5
 8001974:	4438      	add	r0, r7
 8001976:	f7ff ff2f 	bl	80017d8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800197a:	2d00      	cmp	r5, #0
 800197c:	d1ed      	bne.n	800195a <put_lfn+0x2e>
 800197e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001982:	e7ea      	b.n	800195a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8001984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001988:	429d      	cmp	r5, r3
 800198a:	d002      	beq.n	8001992 <put_lfn+0x66>
 800198c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8001990:	b90b      	cbnz	r3, 8001996 <put_lfn+0x6a>
 8001992:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8001996:	f887 9000 	strb.w	r9, [r7]
}
 800199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800199e:	bf00      	nop
 80019a0:	08005e68 	.word	0x08005e68

080019a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	4605      	mov	r5, r0
 80019aa:	4616      	mov	r6, r2
 80019ac:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80019ae:	220b      	movs	r2, #11
 80019b0:	f7ff ff20 	bl	80017f4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80019b4:	2c05      	cmp	r4, #5
 80019b6:	d811      	bhi.n	80019dc <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80019b8:	2207      	movs	r2, #7
 80019ba:	e01d      	b.n	80019f8 <gen_numname+0x54>
 80019bc:	3201      	adds	r2, #1
 80019be:	2a0f      	cmp	r2, #15
 80019c0:	d80c      	bhi.n	80019dc <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80019c2:	f003 0101 	and.w	r1, r3, #1
 80019c6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 80019ca:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80019cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80019d0:	d0f4      	beq.n	80019bc <gen_numname+0x18>
 80019d2:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80019d6:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80019da:	e7ef      	b.n	80019bc <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80019dc:	8833      	ldrh	r3, [r6, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ea      	beq.n	80019b8 <gen_numname+0x14>
			wc = *lfn++;
 80019e2:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80019e4:	2200      	movs	r2, #0
 80019e6:	e7ea      	b.n	80019be <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
 80019e8:	1e53      	subs	r3, r2, #1
 80019ea:	a802      	add	r0, sp, #8
 80019ec:	4402      	add	r2, r0
 80019ee:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 80019f2:	0924      	lsrs	r4, r4, #4
 80019f4:	d009      	beq.n	8001a0a <gen_numname+0x66>
		ns[i--] = c;
 80019f6:	461a      	mov	r2, r3
		c = (seq % 16) + '0';
 80019f8:	f004 030f 	and.w	r3, r4, #15
 80019fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8001a00:	2939      	cmp	r1, #57	; 0x39
 8001a02:	d9f1      	bls.n	80019e8 <gen_numname+0x44>
 8001a04:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8001a08:	e7ee      	b.n	80019e8 <gen_numname+0x44>
	ns[i] = '~';
 8001a0a:	217e      	movs	r1, #126	; 0x7e
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	441a      	add	r2, r3
 8001a10:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001a14:	e000      	b.n	8001a18 <gen_numname+0x74>
 8001a16:	3401      	adds	r4, #1
 8001a18:	429c      	cmp	r4, r3
 8001a1a:	d209      	bcs.n	8001a30 <gen_numname+0x8c>
 8001a1c:	5d2a      	ldrb	r2, [r5, r4]
 8001a1e:	2a20      	cmp	r2, #32
 8001a20:	d1f9      	bne.n	8001a16 <gen_numname+0x72>
 8001a22:	e005      	b.n	8001a30 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001a24:	2120      	movs	r1, #32
 8001a26:	1c62      	adds	r2, r4, #1
 8001a28:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 8001a2a:	2a07      	cmp	r2, #7
 8001a2c:	d808      	bhi.n	8001a40 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001a2e:	4614      	mov	r4, r2
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d8f7      	bhi.n	8001a24 <gen_numname+0x80>
 8001a34:	aa02      	add	r2, sp, #8
 8001a36:	441a      	add	r2, r3
 8001a38:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	e7f2      	b.n	8001a26 <gen_numname+0x82>
}
 8001a40:	b002      	add	sp, #8
 8001a42:	bd70      	pop	{r4, r5, r6, pc}

08001a44 <sum_sfn>:
#if _USE_LFN != 0
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8001a44:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8001a46:	220b      	movs	r2, #11
	BYTE sum = 0;
 8001a48:	2000      	movs	r0, #0

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8001a4a:	01c3      	lsls	r3, r0, #7
 8001a4c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8001a50:	7808      	ldrb	r0, [r1, #0]
 8001a52:	fa50 f383 	uxtab	r3, r0, r3
 8001a56:	b2d8      	uxtb	r0, r3
 8001a58:	3101      	adds	r1, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	d1f5      	bne.n	8001a4a <sum_sfn+0x6>
	return sum;
}
 8001a5e:	4770      	bx	lr

08001a60 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001a60:	6801      	ldr	r1, [r0, #0]
 8001a62:	b109      	cbz	r1, 8001a68 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001a64:	460a      	mov	r2, r1
 8001a66:	e003      	b.n	8001a70 <get_ldnumber+0x10>
	int vol = -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	e008      	b.n	8001a80 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001a6e:	3201      	adds	r2, #1
 8001a70:	7813      	ldrb	r3, [r2, #0]
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	d901      	bls.n	8001a7a <get_ldnumber+0x1a>
 8001a76:	2b3a      	cmp	r3, #58	; 0x3a
 8001a78:	d1f9      	bne.n	8001a6e <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001a7a:	2b3a      	cmp	r3, #58	; 0x3a
 8001a7c:	d002      	beq.n	8001a84 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001a7e:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	4770      	bx	lr
{
 8001a84:	b410      	push	{r4}
			i = *tp++ - '0'; 
 8001a86:	1c4c      	adds	r4, r1, #1
 8001a88:	780b      	ldrb	r3, [r1, #0]
 8001a8a:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d808      	bhi.n	8001aa2 <get_ldnumber+0x42>
 8001a90:	42a2      	cmp	r2, r4
 8001a92:	d109      	bne.n	8001aa8 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001a94:	b95b      	cbnz	r3, 8001aae <get_ldnumber+0x4e>
					*path = ++tt;
 8001a96:	3201      	adds	r2, #1
 8001a98:	6002      	str	r2, [r0, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aa0:	4770      	bx	lr
	int vol = -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e7f8      	b.n	8001a9a <get_ldnumber+0x3a>
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	e7f5      	b.n	8001a9a <get_ldnumber+0x3a>
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e7f2      	b.n	8001a9a <get_ldnumber+0x3a>

08001ab4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	460d      	mov	r5, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8001ab8:	b140      	cbz	r0, 8001acc <validate+0x18>
 8001aba:	4604      	mov	r4, r0
 8001abc:	6803      	ldr	r3, [r0, #0]
 8001abe:	b12b      	cbz	r3, 8001acc <validate+0x18>
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	b11a      	cbz	r2, 8001acc <validate+0x18>
 8001ac4:	88d9      	ldrh	r1, [r3, #6]
 8001ac6:	8882      	ldrh	r2, [r0, #4]
 8001ac8:	4291      	cmp	r1, r2
 8001aca:	d003      	beq.n	8001ad4 <validate+0x20>
		*fs = 0;				/* The object is invalid */
 8001acc:	2300      	movs	r3, #0
 8001ace:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;
 8001ad0:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8001ad4:	7858      	ldrb	r0, [r3, #1]
 8001ad6:	f003 ff25 	bl	8005924 <disk_status>
 8001ada:	f010 0f01 	tst.w	r0, #1
 8001ade:	d1f5      	bne.n	8001acc <validate+0x18>
		*fs = obj->fs;			/* Owner file sytem object */
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	602b      	str	r3, [r5, #0]
		res = FR_OK;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e7f4      	b.n	8001ad2 <validate+0x1e>

08001ae8 <sync_window>:
{
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001aea:	78c3      	ldrb	r3, [r0, #3]
 8001aec:	b90b      	cbnz	r3, 8001af2 <sync_window+0xa>
	FRESULT res = FR_OK;
 8001aee:	2000      	movs	r0, #0
}
 8001af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8001af4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001af6:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8001afa:	2301      	movs	r3, #1
 8001afc:	462a      	mov	r2, r5
 8001afe:	4639      	mov	r1, r7
 8001b00:	7840      	ldrb	r0, [r0, #1]
 8001b02:	f003 ff19 	bl	8005938 <disk_write>
 8001b06:	b9a8      	cbnz	r0, 8001b34 <sync_window+0x4c>
			fs->wflag = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001b0c:	6a23      	ldr	r3, [r4, #32]
 8001b0e:	1aeb      	subs	r3, r5, r3
 8001b10:	69a2      	ldr	r2, [r4, #24]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d210      	bcs.n	8001b38 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001b16:	78a6      	ldrb	r6, [r4, #2]
 8001b18:	2e01      	cmp	r6, #1
 8001b1a:	d909      	bls.n	8001b30 <sync_window+0x48>
					wsect += fs->fsize;
 8001b1c:	69a3      	ldr	r3, [r4, #24]
 8001b1e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8001b20:	2301      	movs	r3, #1
 8001b22:	462a      	mov	r2, r5
 8001b24:	4639      	mov	r1, r7
 8001b26:	7860      	ldrb	r0, [r4, #1]
 8001b28:	f003 ff06 	bl	8005938 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001b2c:	3e01      	subs	r6, #1
 8001b2e:	e7f3      	b.n	8001b18 <sync_window+0x30>
	FRESULT res = FR_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7dd      	b.n	8001af0 <sync_window+0x8>
			res = FR_DISK_ERR;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e7db      	b.n	8001af0 <sync_window+0x8>
	FRESULT res = FR_OK;
 8001b38:	2000      	movs	r0, #0
 8001b3a:	e7d9      	b.n	8001af0 <sync_window+0x8>

08001b3c <move_window>:
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8001b3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b40:	428b      	cmp	r3, r1
 8001b42:	d012      	beq.n	8001b6a <move_window+0x2e>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8001b48:	f7ff ffce 	bl	8001ae8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8001b4c:	4606      	mov	r6, r0
 8001b4e:	b968      	cbnz	r0, 8001b6c <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8001b50:	2301      	movs	r3, #1
 8001b52:	462a      	mov	r2, r5
 8001b54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b58:	7860      	ldrb	r0, [r4, #1]
 8001b5a:	f003 fee8 	bl	800592e <disk_read>
 8001b5e:	b110      	cbz	r0, 8001b66 <move_window+0x2a>
				res = FR_DISK_ERR;
 8001b60:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8001b62:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8001b66:	62e5      	str	r5, [r4, #44]	; 0x2c
 8001b68:	e000      	b.n	8001b6c <move_window+0x30>
	FRESULT res = FR_OK;
 8001b6a:	2600      	movs	r6, #0
}
 8001b6c:	4630      	mov	r0, r6
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}

08001b70 <check_fs>:
{
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8001b74:	2300      	movs	r3, #0
 8001b76:	70c3      	strb	r3, [r0, #3]
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001b7e:	f7ff ffdd 	bl	8001b3c <move_window>
 8001b82:	b9d8      	cbnz	r0, 8001bbc <check_fs+0x4c>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001b84:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8001b88:	f7ff fe16 	bl	80017b8 <ld_word>
 8001b8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001b90:	4298      	cmp	r0, r3
 8001b92:	d115      	bne.n	8001bc0 <check_fs+0x50>
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8001b94:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8001b98:	f7ff fe13 	bl	80017c2 <ld_dword>
 8001b9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <check_fs+0x5c>)
 8001ba2:	4298      	cmp	r0, r3
 8001ba4:	d00e      	beq.n	8001bc4 <check_fs+0x54>
	if ((ld_dword(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8001ba6:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8001baa:	f7ff fe0a 	bl	80017c2 <ld_dword>
 8001bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <check_fs+0x5c>)
 8001bb4:	4298      	cmp	r0, r3
 8001bb6:	d107      	bne.n	8001bc8 <check_fs+0x58>
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e002      	b.n	8001bc2 <check_fs+0x52>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001bbc:	2004      	movs	r0, #4
 8001bbe:	e000      	b.n	8001bc2 <check_fs+0x52>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8001bc0:	2003      	movs	r0, #3
}
 8001bc2:	bd10      	pop	{r4, pc}
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e7fc      	b.n	8001bc2 <check_fs+0x52>
	return 2;
 8001bc8:	2002      	movs	r0, #2
 8001bca:	e7fa      	b.n	8001bc2 <check_fs+0x52>
 8001bcc:	00544146 	.word	0x00544146

08001bd0 <find_volume>:
{
 8001bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	460f      	mov	r7, r1
 8001bd8:	4616      	mov	r6, r2
	*rfs = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8001bde:	f7ff ff3f 	bl	8001a60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001be2:	1e05      	subs	r5, r0, #0
 8001be4:	f2c0 8141 	blt.w	8001e6a <find_volume+0x29a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8001be8:	4bb5      	ldr	r3, [pc, #724]	; (8001ec0 <find_volume+0x2f0>)
 8001bea:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	f000 813f 	beq.w	8001e72 <find_volume+0x2a2>
	*rfs = fs;							/* Return pointer to the file system object */
 8001bf4:	603c      	str	r4, [r7, #0]
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 8001bf6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8001bfa:	7823      	ldrb	r3, [r4, #0]
 8001bfc:	b173      	cbz	r3, 8001c1c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8001bfe:	7860      	ldrb	r0, [r4, #1]
 8001c00:	f003 fe90 	bl	8005924 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001c04:	f010 0f01 	tst.w	r0, #1
 8001c08:	d108      	bne.n	8001c1c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8001c0a:	2e00      	cmp	r6, #0
 8001c0c:	f000 8133 	beq.w	8001e76 <find_volume+0x2a6>
 8001c10:	f010 0f04 	tst.w	r0, #4
 8001c14:	f040 8131 	bne.w	8001e7a <find_volume+0x2aa>
			return FR_OK;				/* The file system object is valid */
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e127      	b.n	8001e6c <find_volume+0x29c>
	fs->fs_type = 0;					/* Clear the file system object */
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001c20:	b2e8      	uxtb	r0, r5
 8001c22:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001c24:	f003 fe6e 	bl	8005904 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8001c28:	f010 0f01 	tst.w	r0, #1
 8001c2c:	f040 8127 	bne.w	8001e7e <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8001c30:	b11e      	cbz	r6, 8001c3a <find_volume+0x6a>
 8001c32:	f010 0f04 	tst.w	r0, #4
 8001c36:	f040 8124 	bne.w	8001e82 <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff ff97 	bl	8001b70 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol))) {	/* Not an FAT boot sector or forced partition number */
 8001c42:	2802      	cmp	r0, #2
 8001c44:	f000 80b3 	beq.w	8001dae <find_volume+0x1de>
	bsect = 0;
 8001c48:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001c4a:	2804      	cmp	r0, #4
 8001c4c:	f000 811b 	beq.w	8001e86 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001c50:	2801      	cmp	r0, #1
 8001c52:	f200 811a 	bhi.w	8001e8a <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001c56:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8001c5a:	f7ff fdad 	bl	80017b8 <ld_word>
 8001c5e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001c62:	f040 8114 	bne.w	8001e8e <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8001c66:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8001c6a:	f7ff fda5 	bl	80017b8 <ld_word>
 8001c6e:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8001c70:	b920      	cbnz	r0, 8001c7c <find_volume+0xac>
 8001c72:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8001c76:	f7ff fda4 	bl	80017c2 <ld_dword>
 8001c7a:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8001c7c:	61a7      	str	r7, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 8001c7e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001c82:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001c84:	1e53      	subs	r3, r2, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	f200 8102 	bhi.w	8001e92 <find_volume+0x2c2>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8001c8e:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 8001c92:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
 8001c96:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001c9a:	f1b8 0f00 	cmp.w	r8, #0
 8001c9e:	f000 80fa 	beq.w	8001e96 <find_volume+0x2c6>
 8001ca2:	f108 33ff 	add.w	r3, r8, #4294967295
 8001ca6:	ea18 0f03 	tst.w	r8, r3
 8001caa:	f040 80f6 	bne.w	8001e9a <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8001cae:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8001cb2:	f7ff fd81 	bl	80017b8 <ld_word>
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001cba:	f010 0f0f 	tst.w	r0, #15
 8001cbe:	f040 80ee 	bne.w	8001e9e <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8001cc2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8001cc6:	f7ff fd77 	bl	80017b8 <ld_word>
 8001cca:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8001ccc:	b920      	cbnz	r0, 8001cd8 <find_volume+0x108>
 8001cce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001cd2:	f7ff fd76 	bl	80017c2 <ld_dword>
 8001cd6:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8001cd8:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8001cdc:	f7ff fd6c 	bl	80017b8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8001ce0:	4601      	mov	r1, r0
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	f000 80dd 	beq.w	8001ea2 <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8001ce8:	1942      	adds	r2, r0, r5
 8001cea:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001cee:	4591      	cmp	r9, r2
 8001cf0:	f0c0 80d9 	bcc.w	8001ea6 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8001cf4:	eba9 0302 	sub.w	r3, r9, r2
 8001cf8:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80d4 	beq.w	8001eaa <find_volume+0x2da>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8001d02:	f640 70f5 	movw	r0, #4085	; 0xff5
 8001d06:	4283      	cmp	r3, r0
 8001d08:	d869      	bhi.n	8001dde <find_volume+0x20e>
		fmt = FS_FAT12;
 8001d0a:	f04f 0901 	mov.w	r9, #1
		if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8001d0e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8001d12:	4283      	cmp	r3, r0
 8001d14:	d901      	bls.n	8001d1a <find_volume+0x14a>
 8001d16:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8001d1a:	f103 0802 	add.w	r8, r3, #2
 8001d1e:	f8c4 8014 	str.w	r8, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
 8001d22:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8001d24:	198b      	adds	r3, r1, r6
 8001d26:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 8001d28:	4432      	add	r2, r6
 8001d2a:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8001d2c:	f1b9 0f03 	cmp.w	r9, #3
 8001d30:	d058      	beq.n	8001de4 <find_volume+0x214>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8001d32:	f1ba 0f00 	cmp.w	sl, #0
 8001d36:	f000 80be 	beq.w	8001eb6 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001d3a:	442b      	add	r3, r5
 8001d3c:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001d3e:	f1b9 0f02 	cmp.w	r9, #2
 8001d42:	d060      	beq.n	8001e06 <find_volume+0x236>
 8001d44:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8001d48:	f008 0301 	and.w	r3, r8, #1
 8001d4c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001d50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d54:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8001d58:	f0c0 80af 	bcc.w	8001eba <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	6123      	str	r3, [r4, #16]
 8001d62:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8001d68:	f1b9 0f03 	cmp.w	r9, #3
 8001d6c:	d04e      	beq.n	8001e0c <find_volume+0x23c>
	fs->fs_type = fmt;	/* FAT sub-type */
 8001d6e:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 8001d72:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <find_volume+0x2f4>)
 8001d74:	8813      	ldrh	r3, [r2, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
 8001d7c:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8001d7e:	2000      	movs	r0, #0
 8001d80:	e074      	b.n	8001e6c <find_volume+0x29c>
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 8001d82:	2000      	movs	r0, #0
 8001d84:	ab04      	add	r3, sp, #16
 8001d86:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001d8a:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001d8e:	3501      	adds	r5, #1
 8001d90:	2d03      	cmp	r5, #3
 8001d92:	d80e      	bhi.n	8001db2 <find_volume+0x1e2>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 8001d94:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001d98:	012b      	lsls	r3, r5, #4
 8001d9a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8001d9e:	4418      	add	r0, r3
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 8001da0:	7903      	ldrb	r3, [r0, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ed      	beq.n	8001d82 <find_volume+0x1b2>
 8001da6:	3008      	adds	r0, #8
 8001da8:	f7ff fd0b 	bl	80017c2 <ld_dword>
 8001dac:	e7ea      	b.n	8001d84 <find_volume+0x1b4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8001dae:	2500      	movs	r5, #0
 8001db0:	e7ee      	b.n	8001d90 <find_volume+0x1c0>
 8001db2:	2500      	movs	r5, #0
 8001db4:	e00a      	b.n	8001dcc <find_volume+0x1fc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001db6:	4631      	mov	r1, r6
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff fed9 	bl	8001b70 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 8001dbe:	2801      	cmp	r0, #1
 8001dc0:	f67f af43 	bls.w	8001c4a <find_volume+0x7a>
 8001dc4:	3501      	adds	r5, #1
 8001dc6:	2d03      	cmp	r5, #3
 8001dc8:	f63f af3f 	bhi.w	8001c4a <find_volume+0x7a>
			bsect = br[i];
 8001dcc:	ab04      	add	r3, sp, #16
 8001dce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001dd2:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	d1ed      	bne.n	8001db6 <find_volume+0x1e6>
 8001dda:	2003      	movs	r0, #3
 8001ddc:	e7f2      	b.n	8001dc4 <find_volume+0x1f4>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8001dde:	f04f 0902 	mov.w	r9, #2
 8001de2:	e794      	b.n	8001d0e <find_volume+0x13e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001de4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8001de8:	f7ff fce6 	bl	80017b8 <ld_word>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d15e      	bne.n	8001eae <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8001df0:	f1ba 0f00 	cmp.w	sl, #0
 8001df4:	d15d      	bne.n	8001eb2 <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8001df6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001dfa:	f7ff fce2 	bl	80017c2 <ld_dword>
 8001dfe:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8001e00:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8001e04:	e7a4      	b.n	8001d50 <find_volume+0x180>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001e06:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8001e0a:	e7a1      	b.n	8001d50 <find_volume+0x180>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8001e0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001e10:	f7ff fcd2 	bl	80017b8 <ld_word>
 8001e14:	2801      	cmp	r0, #1
 8001e16:	d1aa      	bne.n	8001d6e <find_volume+0x19e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8001e18:	1c71      	adds	r1, r6, #1
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7ff fe8e 	bl	8001b3c <move_window>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1a4      	bne.n	8001d6e <find_volume+0x19e>
			fs->fsi_flag = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8001e28:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8001e2c:	f7ff fcc4 	bl	80017b8 <ld_word>
 8001e30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8001e34:	4298      	cmp	r0, r3
 8001e36:	d19a      	bne.n	8001d6e <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8001e38:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001e3c:	f7ff fcc1 	bl	80017c2 <ld_dword>
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <find_volume+0x2f8>)
 8001e42:	4298      	cmp	r0, r3
 8001e44:	d193      	bne.n	8001d6e <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8001e46:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8001e4a:	f7ff fcba 	bl	80017c2 <ld_dword>
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <find_volume+0x2fc>)
 8001e50:	4298      	cmp	r0, r3
 8001e52:	d18c      	bne.n	8001d6e <find_volume+0x19e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8001e54:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8001e58:	f7ff fcb3 	bl	80017c2 <ld_dword>
 8001e5c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8001e5e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8001e62:	f7ff fcae 	bl	80017c2 <ld_dword>
 8001e66:	60e0      	str	r0, [r4, #12]
 8001e68:	e781      	b.n	8001d6e <find_volume+0x19e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001e6a:	200b      	movs	r0, #11
}
 8001e6c:	b004      	add	sp, #16
 8001e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001e72:	200c      	movs	r0, #12
 8001e74:	e7fa      	b.n	8001e6c <find_volume+0x29c>
			return FR_OK;				/* The file system object is valid */
 8001e76:	2000      	movs	r0, #0
 8001e78:	e7f8      	b.n	8001e6c <find_volume+0x29c>
				return FR_WRITE_PROTECTED;
 8001e7a:	200a      	movs	r0, #10
 8001e7c:	e7f6      	b.n	8001e6c <find_volume+0x29c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001e7e:	2003      	movs	r0, #3
 8001e80:	e7f4      	b.n	8001e6c <find_volume+0x29c>
		return FR_WRITE_PROTECTED;
 8001e82:	200a      	movs	r0, #10
 8001e84:	e7f2      	b.n	8001e6c <find_volume+0x29c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001e86:	2001      	movs	r0, #1
 8001e88:	e7f0      	b.n	8001e6c <find_volume+0x29c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001e8a:	200d      	movs	r0, #13
 8001e8c:	e7ee      	b.n	8001e6c <find_volume+0x29c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001e8e:	200d      	movs	r0, #13
 8001e90:	e7ec      	b.n	8001e6c <find_volume+0x29c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001e92:	200d      	movs	r0, #13
 8001e94:	e7ea      	b.n	8001e6c <find_volume+0x29c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001e96:	200d      	movs	r0, #13
 8001e98:	e7e8      	b.n	8001e6c <find_volume+0x29c>
 8001e9a:	200d      	movs	r0, #13
 8001e9c:	e7e6      	b.n	8001e6c <find_volume+0x29c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001e9e:	200d      	movs	r0, #13
 8001ea0:	e7e4      	b.n	8001e6c <find_volume+0x29c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8001ea2:	200d      	movs	r0, #13
 8001ea4:	e7e2      	b.n	8001e6c <find_volume+0x29c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001ea6:	200d      	movs	r0, #13
 8001ea8:	e7e0      	b.n	8001e6c <find_volume+0x29c>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8001eaa:	200d      	movs	r0, #13
 8001eac:	e7de      	b.n	8001e6c <find_volume+0x29c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001eae:	200d      	movs	r0, #13
 8001eb0:	e7dc      	b.n	8001e6c <find_volume+0x29c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8001eb2:	200d      	movs	r0, #13
 8001eb4:	e7da      	b.n	8001e6c <find_volume+0x29c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8001eb6:	200d      	movs	r0, #13
 8001eb8:	e7d8      	b.n	8001e6c <find_volume+0x29c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001eba:	200d      	movs	r0, #13
 8001ebc:	e7d6      	b.n	8001e6c <find_volume+0x29c>
 8001ebe:	bf00      	nop
 8001ec0:	20000d10 	.word	0x20000d10
 8001ec4:	20000d14 	.word	0x20000d14
 8001ec8:	41615252 	.word	0x41615252
 8001ecc:	61417272 	.word	0x61417272

08001ed0 <get_fat>:
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8001ed2:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001ed4:	2901      	cmp	r1, #1
 8001ed6:	d952      	bls.n	8001f7e <get_fat+0xae>
 8001ed8:	6973      	ldr	r3, [r6, #20]
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d951      	bls.n	8001f82 <get_fat+0xb2>
 8001ede:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8001ee0:	7833      	ldrb	r3, [r6, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d02b      	beq.n	8001f3e <get_fat+0x6e>
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d038      	beq.n	8001f5c <get_fat+0x8c>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <get_fat+0x22>
			val = 1;	/* Internal error */
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e046      	b.n	8001f80 <get_fat+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8001ef2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001ef6:	6a31      	ldr	r1, [r6, #32]
 8001ef8:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7ff fe1d 	bl	8001b3c <move_window>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d13f      	bne.n	8001f86 <get_fat+0xb6>
			wc = fs->win[bc++ % SS(fs)];
 8001f06:	1c6f      	adds	r7, r5, #1
 8001f08:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001f0c:	4435      	add	r5, r6
 8001f0e:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001f12:	6a31      	ldr	r1, [r6, #32]
 8001f14:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f7ff fe0f 	bl	8001b3c <move_window>
 8001f1e:	bba8      	cbnz	r0, 8001f8c <get_fat+0xbc>
			wc |= fs->win[bc % SS(fs)] << 8;
 8001f20:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001f24:	443e      	add	r6, r7
 8001f26:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8001f2a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8001f2e:	f014 0f01 	tst.w	r4, #1
 8001f32:	d001      	beq.n	8001f38 <get_fat+0x68>
 8001f34:	0900      	lsrs	r0, r0, #4
 8001f36:	e023      	b.n	8001f80 <get_fat+0xb0>
 8001f38:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001f3c:	e020      	b.n	8001f80 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001f3e:	6a31      	ldr	r1, [r6, #32]
 8001f40:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8001f44:	4630      	mov	r0, r6
 8001f46:	f7ff fdf9 	bl	8001b3c <move_window>
 8001f4a:	bb10      	cbnz	r0, 8001f92 <get_fat+0xc2>
			val = ld_word(&fs->win[clst * 2 % SS(fs)]);
 8001f4c:	0060      	lsls	r0, r4, #1
 8001f4e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8001f52:	3030      	adds	r0, #48	; 0x30
 8001f54:	4430      	add	r0, r6
 8001f56:	f7ff fc2f 	bl	80017b8 <ld_word>
			break;
 8001f5a:	e011      	b.n	8001f80 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001f5c:	6a31      	ldr	r1, [r6, #32]
 8001f5e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8001f62:	4630      	mov	r0, r6
 8001f64:	f7ff fdea 	bl	8001b3c <move_window>
 8001f68:	b9b0      	cbnz	r0, 8001f98 <get_fat+0xc8>
			val = ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0x0FFFFFFF;
 8001f6a:	00a0      	lsls	r0, r4, #2
 8001f6c:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8001f70:	3030      	adds	r0, #48	; 0x30
 8001f72:	4430      	add	r0, r6
 8001f74:	f7ff fc25 	bl	80017c2 <ld_dword>
 8001f78:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8001f7c:	e000      	b.n	8001f80 <get_fat+0xb0>
		val = 1;	/* Internal error */
 8001f7e:	2001      	movs	r0, #1
}
 8001f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8001f82:	2001      	movs	r0, #1
 8001f84:	e7fc      	b.n	8001f80 <get_fat+0xb0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8001f86:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8a:	e7f9      	b.n	8001f80 <get_fat+0xb0>
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	e7f6      	b.n	8001f80 <get_fat+0xb0>
 8001f92:	f04f 30ff 	mov.w	r0, #4294967295
 8001f96:	e7f3      	b.n	8001f80 <get_fat+0xb0>
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8001f9c:	e7f0      	b.n	8001f80 <get_fat+0xb0>

08001f9e <dir_sdi>:
{
 8001f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8001fa2:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001fa4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001fa8:	d23b      	bcs.n	8002022 <dir_sdi+0x84>
 8001faa:	4606      	mov	r6, r0
 8001fac:	460d      	mov	r5, r1
 8001fae:	f011 0f1f 	tst.w	r1, #31
 8001fb2:	d139      	bne.n	8002028 <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 8001fb4:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001fb6:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001fb8:	b91c      	cbnz	r4, 8001fc2 <dir_sdi+0x24>
 8001fba:	783b      	ldrb	r3, [r7, #0]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d900      	bls.n	8001fc2 <dir_sdi+0x24>
		clst = fs->dirbase;
 8001fc0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001fc2:	b994      	cbnz	r4, 8001fea <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8001fca:	d92f      	bls.n	800202c <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 8001fd0:	6174      	str	r4, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
 8001fd2:	69b3      	ldr	r3, [r6, #24]
 8001fd4:	b393      	cbz	r3, 800203c <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001fd6:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 8001fda:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001fdc:	3730      	adds	r7, #48	; 0x30
 8001fde:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001fe2:	443d      	add	r5, r7
 8001fe4:	61f5      	str	r5, [r6, #28]
	return FR_OK;
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e01c      	b.n	8002024 <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001fea:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8001fee:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8001ff2:	4545      	cmp	r5, r8
 8001ff4:	d30f      	bcc.n	8002016 <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f7ff ff69 	bl	8001ed0 <get_fat>
 8001ffe:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002000:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002004:	d014      	beq.n	8002030 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002006:	2801      	cmp	r0, #1
 8002008:	d914      	bls.n	8002034 <dir_sdi+0x96>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4283      	cmp	r3, r0
 800200e:	d913      	bls.n	8002038 <dir_sdi+0x9a>
			ofs -= csz;
 8002010:	eba5 0508 	sub.w	r5, r5, r8
 8002014:	e7ed      	b.n	8001ff2 <dir_sdi+0x54>
		dp->sect = clust2sect(fs, clst);
 8002016:	4621      	mov	r1, r4
 8002018:	4638      	mov	r0, r7
 800201a:	f7ff fc10 	bl	800183e <clust2sect>
 800201e:	61b0      	str	r0, [r6, #24]
 8002020:	e7d6      	b.n	8001fd0 <dir_sdi+0x32>
		return FR_INT_ERR;
 8002022:	2002      	movs	r0, #2
}
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8002028:	2002      	movs	r0, #2
 800202a:	e7fb      	b.n	8002024 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800202c:	2002      	movs	r0, #2
 800202e:	e7f9      	b.n	8002024 <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002030:	2001      	movs	r0, #1
 8002032:	e7f7      	b.n	8002024 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002034:	2002      	movs	r0, #2
 8002036:	e7f5      	b.n	8002024 <dir_sdi+0x86>
 8002038:	2002      	movs	r0, #2
 800203a:	e7f3      	b.n	8002024 <dir_sdi+0x86>
	if (!dp->sect) return FR_INT_ERR;
 800203c:	2002      	movs	r0, #2
 800203e:	e7f1      	b.n	8002024 <dir_sdi+0x86>

08002040 <put_fat>:
{
 8002040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002044:	2901      	cmp	r1, #1
 8002046:	d97c      	bls.n	8002142 <put_fat+0x102>
 8002048:	6943      	ldr	r3, [r0, #20]
 800204a:	428b      	cmp	r3, r1
 800204c:	d97b      	bls.n	8002146 <put_fat+0x106>
 800204e:	4616      	mov	r6, r2
 8002050:	460c      	mov	r4, r1
 8002052:	4605      	mov	r5, r0
		switch (fs->fs_type) {
 8002054:	7803      	ldrb	r3, [r0, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d047      	beq.n	80020ea <put_fat+0xaa>
 800205a:	2b03      	cmp	r3, #3
 800205c:	d057      	beq.n	800210e <put_fat+0xce>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 8002062:	2702      	movs	r7, #2
 8002064:	e070      	b.n	8002148 <put_fat+0x108>
			bc = (UINT)clst; bc += bc / 2;
 8002066:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800206a:	6a01      	ldr	r1, [r0, #32]
 800206c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8002070:	f7ff fd64 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 8002074:	4607      	mov	r7, r0
 8002076:	2800      	cmp	r0, #0
 8002078:	d166      	bne.n	8002148 <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
 800207a:	f108 0901 	add.w	r9, r8, #1
 800207e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002082:	f014 0401 	ands.w	r4, r4, #1
 8002086:	d023      	beq.n	80020d0 <put_fat+0x90>
 8002088:	eb05 0308 	add.w	r3, r5, r8
 800208c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	0132      	lsls	r2, r6, #4
 8002096:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800209a:	4313      	orrs	r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	44a8      	add	r8, r5
 80020a0:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80020a8:	6a29      	ldr	r1, [r5, #32]
 80020aa:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff fd44 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 80020b4:	4607      	mov	r7, r0
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d146      	bne.n	8002148 <put_fat+0x108>
			p = &fs->win[bc % SS(fs)];
 80020ba:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80020be:	b14c      	cbz	r4, 80020d4 <put_fat+0x94>
 80020c0:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80020c4:	44a9      	add	r9, r5
 80020c6:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
			fs->wflag = 1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	70eb      	strb	r3, [r5, #3]
			break;
 80020ce:	e03b      	b.n	8002148 <put_fat+0x108>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80020d0:	b2f3      	uxtb	r3, r6
 80020d2:	e7e4      	b.n	800209e <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80020d4:	eb05 0309 	add.w	r3, r5, r9
 80020d8:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 80020dc:	f022 020f 	bic.w	r2, r2, #15
 80020e0:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80020e4:	4332      	orrs	r2, r6
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	e7ec      	b.n	80020c4 <put_fat+0x84>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80020ea:	6a01      	ldr	r1, [r0, #32]
 80020ec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80020f0:	f7ff fd24 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 80020f4:	4607      	mov	r7, r0
 80020f6:	bb38      	cbnz	r0, 8002148 <put_fat+0x108>
			st_word(&fs->win[clst * 2 % SS(fs)], (WORD)val);
 80020f8:	0060      	lsls	r0, r4, #1
 80020fa:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 80020fe:	3030      	adds	r0, #48	; 0x30
 8002100:	b2b1      	uxth	r1, r6
 8002102:	4428      	add	r0, r5
 8002104:	f7ff fb68 	bl	80017d8 <st_word>
			fs->wflag = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	70eb      	strb	r3, [r5, #3]
			break;
 800210c:	e01c      	b.n	8002148 <put_fat+0x108>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800210e:	6a01      	ldr	r1, [r0, #32]
 8002110:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8002114:	f7ff fd12 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 8002118:	4607      	mov	r7, r0
 800211a:	b9a8      	cbnz	r0, 8002148 <put_fat+0x108>
				val = (val & 0x0FFFFFFF) | (ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0xF0000000);
 800211c:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8002120:	00a4      	lsls	r4, r4, #2
 8002122:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8002126:	3430      	adds	r4, #48	; 0x30
 8002128:	442c      	add	r4, r5
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff fb49 	bl	80017c2 <ld_dword>
 8002130:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(&fs->win[clst * 4 % SS(fs)], val);
 8002134:	4331      	orrs	r1, r6
 8002136:	4620      	mov	r0, r4
 8002138:	f7ff fb52 	bl	80017e0 <st_dword>
			fs->wflag = 1;
 800213c:	2301      	movs	r3, #1
 800213e:	70eb      	strb	r3, [r5, #3]
			break;
 8002140:	e002      	b.n	8002148 <put_fat+0x108>
	FRESULT res = FR_INT_ERR;
 8002142:	2702      	movs	r7, #2
 8002144:	e000      	b.n	8002148 <put_fat+0x108>
 8002146:	2702      	movs	r7, #2
}
 8002148:	4638      	mov	r0, r7
 800214a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800214e <create_chain>:
{
 800214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002152:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8002154:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8002156:	4688      	mov	r8, r1
 8002158:	b931      	cbnz	r1, 8002168 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
 800215a:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800215c:	b18d      	cbz	r5, 8002182 <create_chain+0x34>
 800215e:	6973      	ldr	r3, [r6, #20]
 8002160:	42ab      	cmp	r3, r5
 8002162:	d80f      	bhi.n	8002184 <create_chain+0x36>
 8002164:	2501      	movs	r5, #1
 8002166:	e00d      	b.n	8002184 <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002168:	f7ff feb2 	bl	8001ed0 <get_fat>
 800216c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid value */
 800216e:	2801      	cmp	r0, #1
 8002170:	d947      	bls.n	8002202 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002172:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002176:	d049      	beq.n	800220c <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002178:	6972      	ldr	r2, [r6, #20]
 800217a:	4282      	cmp	r2, r0
 800217c:	d846      	bhi.n	800220c <create_chain+0xbe>
		scl = clst;
 800217e:	4645      	mov	r5, r8
 8002180:	e000      	b.n	8002184 <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002182:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8002184:	462c      	mov	r4, r5
 8002186:	e00c      	b.n	80021a2 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002188:	4621      	mov	r1, r4
 800218a:	4638      	mov	r0, r7
 800218c:	f7ff fea0 	bl	8001ed0 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8002190:	4603      	mov	r3, r0
 8002192:	b170      	cbz	r0, 80021b2 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002194:	2801      	cmp	r0, #1
 8002196:	d039      	beq.n	800220c <create_chain+0xbe>
 8002198:	f1b0 3fff 	cmp.w	r0, #4294967295
 800219c:	d036      	beq.n	800220c <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800219e:	42ac      	cmp	r4, r5
 80021a0:	d033      	beq.n	800220a <create_chain+0xbc>
			ncl++;							/* Next cluster */
 80021a2:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80021a4:	6973      	ldr	r3, [r6, #20]
 80021a6:	42a3      	cmp	r3, r4
 80021a8:	d8ee      	bhi.n	8002188 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 80021aa:	2d01      	cmp	r5, #1
 80021ac:	d92b      	bls.n	8002206 <create_chain+0xb8>
				ncl = 2;
 80021ae:	2402      	movs	r4, #2
 80021b0:	e7ea      	b.n	8002188 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80021b2:	f04f 32ff 	mov.w	r2, #4294967295
 80021b6:	4621      	mov	r1, r4
 80021b8:	4630      	mov	r0, r6
 80021ba:	f7ff ff41 	bl	8002040 <put_fat>
		if (res == FR_OK && clst) {
 80021be:	4603      	mov	r3, r0
 80021c0:	b910      	cbnz	r0, 80021c8 <create_chain+0x7a>
 80021c2:	f1b8 0f00 	cmp.w	r8, #0
 80021c6:	d10e      	bne.n	80021e6 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80021c8:	b9a3      	cbnz	r3, 80021f4 <create_chain+0xa6>
		fs->last_clst = ncl;
 80021ca:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 80021cc:	6932      	ldr	r2, [r6, #16]
 80021ce:	6973      	ldr	r3, [r6, #20]
 80021d0:	3b02      	subs	r3, #2
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d201      	bcs.n	80021da <create_chain+0x8c>
 80021d6:	3a01      	subs	r2, #1
 80021d8:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 80021da:	7933      	ldrb	r3, [r6, #4]
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	7133      	strb	r3, [r6, #4]
 80021e2:	4623      	mov	r3, r4
 80021e4:	e012      	b.n	800220c <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80021e6:	4622      	mov	r2, r4
 80021e8:	4641      	mov	r1, r8
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7ff ff28 	bl	8002040 <put_fat>
 80021f0:	4603      	mov	r3, r0
 80021f2:	e7e9      	b.n	80021c8 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d001      	beq.n	80021fc <create_chain+0xae>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e007      	b.n	800220c <create_chain+0xbe>
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	e004      	b.n	800220c <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid value */
 8002202:	2301      	movs	r3, #1
 8002204:	e002      	b.n	800220c <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002212 <remove_chain>:
{
 8002212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002214:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8002216:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002218:	2901      	cmp	r1, #1
 800221a:	d92e      	bls.n	800227a <remove_chain+0x68>
 800221c:	4607      	mov	r7, r0
 800221e:	4611      	mov	r1, r2
 8002220:	6963      	ldr	r3, [r4, #20]
 8002222:	42b3      	cmp	r3, r6
 8002224:	d92b      	bls.n	800227e <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002226:	b15a      	cbz	r2, 8002240 <remove_chain+0x2e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ff07 	bl	8002040 <put_fat>
		if (res != FR_OK) return res;
 8002232:	4602      	mov	r2, r0
 8002234:	b120      	cbz	r0, 8002240 <remove_chain+0x2e>
 8002236:	e023      	b.n	8002280 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002238:	6963      	ldr	r3, [r4, #20]
		clst = nxt;					/* Next cluster */
 800223a:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800223c:	42ab      	cmp	r3, r5
 800223e:	d91f      	bls.n	8002280 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002240:	4631      	mov	r1, r6
 8002242:	4638      	mov	r0, r7
 8002244:	f7ff fe44 	bl	8001ed0 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8002248:	4605      	mov	r5, r0
 800224a:	b1d8      	cbz	r0, 8002284 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800224c:	2801      	cmp	r0, #1
 800224e:	d01b      	beq.n	8002288 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002254:	d01a      	beq.n	800228c <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002256:	2200      	movs	r2, #0
 8002258:	4631      	mov	r1, r6
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fef0 	bl	8002040 <put_fat>
			if (res != FR_OK) return res;
 8002260:	4602      	mov	r2, r0
 8002262:	b968      	cbnz	r0, 8002280 <remove_chain+0x6e>
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 8002264:	6923      	ldr	r3, [r4, #16]
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d0e5      	beq.n	8002238 <remove_chain+0x26>
			fs->free_clst++;
 800226c:	3301      	adds	r3, #1
 800226e:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8002270:	7923      	ldrb	r3, [r4, #4]
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	7123      	strb	r3, [r4, #4]
 8002278:	e7de      	b.n	8002238 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800227a:	2202      	movs	r2, #2
 800227c:	e000      	b.n	8002280 <remove_chain+0x6e>
 800227e:	2202      	movs	r2, #2
}
 8002280:	4610      	mov	r0, r2
 8002282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8002284:	2200      	movs	r2, #0
 8002286:	e7fb      	b.n	8002280 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002288:	2202      	movs	r2, #2
 800228a:	e7f9      	b.n	8002280 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800228c:	2201      	movs	r2, #1
 800228e:	e7f7      	b.n	8002280 <remove_chain+0x6e>

08002290 <dir_next>:
{
 8002290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8002294:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002296:	6905      	ldr	r5, [r0, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002298:	6983      	ldr	r3, [r0, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06d      	beq.n	800237a <dir_next+0xea>
 800229e:	3520      	adds	r5, #32
 80022a0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80022a4:	d26b      	bcs.n	800237e <dir_next+0xee>
 80022a6:	4688      	mov	r8, r1
 80022a8:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80022aa:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80022ae:	b93f      	cbnz	r7, 80022c0 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 80022b0:	3301      	adds	r3, #1
 80022b2:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
 80022b4:	6941      	ldr	r1, [r0, #20]
 80022b6:	b971      	cbnz	r1, 80022d6 <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80022b8:	8933      	ldrh	r3, [r6, #8]
 80022ba:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80022be:	d906      	bls.n	80022ce <dir_next+0x3e>
	dp->dptr = ofs;						/* Current entry */
 80022c0:	6125      	str	r5, [r4, #16]
	dp->dir = &fs->win[ofs % SS(fs)];	/* Pointer to the entry in the win[] */
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	443e      	add	r6, r7
 80022c6:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 80022c8:	2000      	movs	r0, #0
}
 80022ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	6183      	str	r3, [r0, #24]
 80022d2:	2004      	movs	r0, #4
 80022d4:	e7f9      	b.n	80022ca <dir_next+0x3a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80022d6:	8973      	ldrh	r3, [r6, #10]
 80022d8:	3b01      	subs	r3, #1
 80022da:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 80022de:	d1ef      	bne.n	80022c0 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80022e0:	f7ff fdf6 	bl	8001ed0 <get_fat>
 80022e4:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d94b      	bls.n	8002382 <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80022ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80022ee:	d04a      	beq.n	8002386 <dir_next+0xf6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80022f0:	6973      	ldr	r3, [r6, #20]
 80022f2:	4283      	cmp	r3, r0
 80022f4:	d839      	bhi.n	800236a <dir_next+0xda>
					if (!stretch) {								/* If no stretch, report EOT */
 80022f6:	f1b8 0f00 	cmp.w	r8, #0
 80022fa:	d011      	beq.n	8002320 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80022fc:	6961      	ldr	r1, [r4, #20]
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ff25 	bl	800214e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002304:	4681      	mov	r9, r0
 8002306:	2800      	cmp	r0, #0
 8002308:	d03f      	beq.n	800238a <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800230a:	2801      	cmp	r0, #1
 800230c:	d03f      	beq.n	800238e <dir_next+0xfe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800230e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002312:	d03e      	beq.n	8002392 <dir_next+0x102>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002314:	4630      	mov	r0, r6
 8002316:	f7ff fbe7 	bl	8001ae8 <sync_window>
 800231a:	b128      	cbz	r0, 8002328 <dir_next+0x98>
 800231c:	2001      	movs	r0, #1
 800231e:	e7d4      	b.n	80022ca <dir_next+0x3a>
						dp->sect = 0; return FR_NO_FILE;
 8002320:	2300      	movs	r3, #0
 8002322:	61a3      	str	r3, [r4, #24]
 8002324:	2004      	movs	r0, #4
 8002326:	e7d0      	b.n	80022ca <dir_next+0x3a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8002328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232c:	2100      	movs	r1, #0
 800232e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8002332:	f7ff fa68 	bl	8001806 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002336:	4649      	mov	r1, r9
 8002338:	4630      	mov	r0, r6
 800233a:	f7ff fa80 	bl	800183e <clust2sect>
 800233e:	62f0      	str	r0, [r6, #44]	; 0x2c
 8002340:	f04f 0800 	mov.w	r8, #0
 8002344:	8973      	ldrh	r3, [r6, #10]
 8002346:	4598      	cmp	r8, r3
 8002348:	d20b      	bcs.n	8002362 <dir_next+0xd2>
						fs->wflag = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800234e:	4630      	mov	r0, r6
 8002350:	f7ff fbca 	bl	8001ae8 <sync_window>
 8002354:	b9f8      	cbnz	r0, 8002396 <dir_next+0x106>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002356:	f108 0801 	add.w	r8, r8, #1
 800235a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800235c:	3301      	adds	r3, #1
 800235e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8002360:	e7f0      	b.n	8002344 <dir_next+0xb4>
					fs->winsect -= n;							/* Restore window offset */
 8002362:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002364:	eba3 0308 	sub.w	r3, r3, r8
 8002368:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 800236a:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
 800236e:	4649      	mov	r1, r9
 8002370:	4630      	mov	r0, r6
 8002372:	f7ff fa64 	bl	800183e <clust2sect>
 8002376:	61a0      	str	r0, [r4, #24]
 8002378:	e7a2      	b.n	80022c0 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800237a:	2004      	movs	r0, #4
 800237c:	e7a5      	b.n	80022ca <dir_next+0x3a>
 800237e:	2004      	movs	r0, #4
 8002380:	e7a3      	b.n	80022ca <dir_next+0x3a>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002382:	2002      	movs	r0, #2
 8002384:	e7a1      	b.n	80022ca <dir_next+0x3a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002386:	2001      	movs	r0, #1
 8002388:	e79f      	b.n	80022ca <dir_next+0x3a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800238a:	2007      	movs	r0, #7
 800238c:	e79d      	b.n	80022ca <dir_next+0x3a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800238e:	2002      	movs	r0, #2
 8002390:	e79b      	b.n	80022ca <dir_next+0x3a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002392:	2001      	movs	r0, #1
 8002394:	e799      	b.n	80022ca <dir_next+0x3a>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002396:	2001      	movs	r0, #1
 8002398:	e797      	b.n	80022ca <dir_next+0x3a>

0800239a <dir_alloc>:
{
 800239a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239c:	4604      	mov	r4, r0
 800239e:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 80023a0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80023a2:	2100      	movs	r1, #0
 80023a4:	f7ff fdfb 	bl	8001f9e <dir_sdi>
	if (res == FR_OK) {
 80023a8:	4603      	mov	r3, r0
 80023aa:	b9c0      	cbnz	r0, 80023de <dir_alloc+0x44>
		n = 0;
 80023ac:	2500      	movs	r5, #0
 80023ae:	e008      	b.n	80023c2 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80023b0:	3501      	adds	r5, #1
 80023b2:	42bd      	cmp	r5, r7
 80023b4:	d013      	beq.n	80023de <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80023b6:	2101      	movs	r1, #1
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff ff69 	bl	8002290 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80023be:	4603      	mov	r3, r0
 80023c0:	b968      	cbnz	r0, 80023de <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80023c2:	69a1      	ldr	r1, [r4, #24]
 80023c4:	4630      	mov	r0, r6
 80023c6:	f7ff fbb9 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 80023ca:	4603      	mov	r3, r0
 80023cc:	b938      	cbnz	r0, 80023de <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80023ce:	69e2      	ldr	r2, [r4, #28]
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	2ae5      	cmp	r2, #229	; 0xe5
 80023d4:	d0ec      	beq.n	80023b0 <dir_alloc+0x16>
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	d0ea      	beq.n	80023b0 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 80023da:	2500      	movs	r5, #0
 80023dc:	e7eb      	b.n	80023b6 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d001      	beq.n	80023e6 <dir_alloc+0x4c>
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80023e6:	2307      	movs	r3, #7
 80023e8:	e7fb      	b.n	80023e2 <dir_alloc+0x48>

080023ea <dir_read>:
{
 80023ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 80023f2:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 80023f4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80023f8:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 80023fa:	2504      	movs	r5, #4
	while (dp->sect) {
 80023fc:	e02e      	b.n	800245c <dir_read+0x72>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d119      	bne.n	8002436 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8002402:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002406:	d006      	beq.n	8002416 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8002408:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= ~LLEF; ord = c;
 800240c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	6263      	str	r3, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;
 8002414:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8002416:	42b2      	cmp	r2, r6
 8002418:	d001      	beq.n	800241e <dir_read+0x34>
 800241a:	26ff      	movs	r6, #255	; 0xff
 800241c:	e018      	b.n	8002450 <dir_read+0x66>
 800241e:	7b4b      	ldrb	r3, [r1, #13]
 8002420:	454b      	cmp	r3, r9
 8002422:	d001      	beq.n	8002428 <dir_read+0x3e>
 8002424:	26ff      	movs	r6, #255	; 0xff
 8002426:	e013      	b.n	8002450 <dir_read+0x66>
 8002428:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800242a:	f7ff fa3b 	bl	80018a4 <pick_lfn>
 800242e:	b388      	cbz	r0, 8002494 <dir_read+0xaa>
 8002430:	3e01      	subs	r6, #1
 8002432:	b2f6      	uxtb	r6, r6
 8002434:	e00c      	b.n	8002450 <dir_read+0x66>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8002436:	b926      	cbnz	r6, 8002442 <dir_read+0x58>
 8002438:	4608      	mov	r0, r1
 800243a:	f7ff fb03 	bl	8001a44 <sum_sfn>
 800243e:	4548      	cmp	r0, r9
 8002440:	d02b      	beq.n	800249a <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	6263      	str	r3, [r4, #36]	; 0x24
 8002448:	e027      	b.n	800249a <dir_read+0xb0>
				ord = 0xFF;
 800244a:	26ff      	movs	r6, #255	; 0xff
 800244c:	e000      	b.n	8002450 <dir_read+0x66>
 800244e:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8002450:	2100      	movs	r1, #0
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff ff1c 	bl	8002290 <dir_next>
		if (res != FR_OK) break;
 8002458:	4605      	mov	r5, r0
 800245a:	b9f0      	cbnz	r0, 800249a <dir_read+0xb0>
	while (dp->sect) {
 800245c:	69a1      	ldr	r1, [r4, #24]
 800245e:	b1e1      	cbz	r1, 800249a <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 8002460:	4638      	mov	r0, r7
 8002462:	f7ff fb6b 	bl	8001b3c <move_window>
		if (res != FR_OK) break;
 8002466:	4605      	mov	r5, r0
 8002468:	b9b8      	cbnz	r0, 800249a <dir_read+0xb0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800246a:	69e1      	ldr	r1, [r4, #28]
 800246c:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 800246e:	b19a      	cbz	r2, 8002498 <dir_read+0xae>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8002470:	7acb      	ldrb	r3, [r1, #11]
 8002472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002476:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8002478:	2ae5      	cmp	r2, #229	; 0xe5
 800247a:	d0e6      	beq.n	800244a <dir_read+0x60>
 800247c:	2a2e      	cmp	r2, #46	; 0x2e
 800247e:	d0e6      	beq.n	800244e <dir_read+0x64>
 8002480:	f023 0020 	bic.w	r0, r3, #32
 8002484:	2808      	cmp	r0, #8
 8002486:	bf14      	ite	ne
 8002488:	2000      	movne	r0, #0
 800248a:	2001      	moveq	r0, #1
 800248c:	4540      	cmp	r0, r8
 800248e:	d0b6      	beq.n	80023fe <dir_read+0x14>
				ord = 0xFF;
 8002490:	26ff      	movs	r6, #255	; 0xff
 8002492:	e7dd      	b.n	8002450 <dir_read+0x66>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8002494:	26ff      	movs	r6, #255	; 0xff
 8002496:	e7db      	b.n	8002450 <dir_read+0x66>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8002498:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800249a:	b10d      	cbz	r5, 80024a0 <dir_read+0xb6>
 800249c:	2300      	movs	r3, #0
 800249e:	61a3      	str	r3, [r4, #24]
}
 80024a0:	4628      	mov	r0, r5
 80024a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024a6 <dir_remove>:
{
 80024a6:	b570      	push	{r4, r5, r6, lr}
 80024a8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80024aa:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 80024ac:	6906      	ldr	r6, [r0, #16]
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80024ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80024b0:	f1b1 3fff 	cmp.w	r1, #4294967295
 80024b4:	d118      	bne.n	80024e8 <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 80024b6:	69a1      	ldr	r1, [r4, #24]
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7ff fb3f 	bl	8001b3c <move_window>
			if (res != FR_OK) break;
 80024be:	4603      	mov	r3, r0
 80024c0:	b970      	cbnz	r0, 80024e0 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 80024c2:	69e2      	ldr	r2, [r4, #28]
 80024c4:	21e5      	movs	r1, #229	; 0xe5
 80024c6:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 80024c8:	2201      	movs	r2, #1
 80024ca:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80024cc:	6922      	ldr	r2, [r4, #16]
 80024ce:	42b2      	cmp	r2, r6
 80024d0:	d206      	bcs.n	80024e0 <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 80024d2:	2100      	movs	r1, #0
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff fedb 	bl	8002290 <dir_next>
		} while (res == FR_OK);
 80024da:	4603      	mov	r3, r0
 80024dc:	2800      	cmp	r0, #0
 80024de:	d0ea      	beq.n	80024b6 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d007      	beq.n	80024f4 <dir_remove+0x4e>
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80024e8:	f7ff fd59 	bl	8001f9e <dir_sdi>
	if (res == FR_OK) {
 80024ec:	4603      	mov	r3, r0
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d0e1      	beq.n	80024b6 <dir_remove+0x10>
 80024f2:	e7f7      	b.n	80024e4 <dir_remove+0x3e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e7f5      	b.n	80024e4 <dir_remove+0x3e>

080024f8 <create_name>:
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fc:	b083      	sub	sp, #12
 80024fe:	4680      	mov	r8, r0
 8002500:	468a      	mov	sl, r1
	p = *path; lfn = dp->lfn; si = di = 0;
 8002502:	f8d1 9000 	ldr.w	r9, [r1]
 8002506:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002508:	2400      	movs	r4, #0
 800250a:	e011      	b.n	8002530 <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator */
 800250c:	3601      	adds	r6, #1
 800250e:	eb09 0206 	add.w	r2, r9, r6
 8002512:	f819 3006 	ldrb.w	r3, [r9, r6]
 8002516:	2b2f      	cmp	r3, #47	; 0x2f
 8002518:	d0f8      	beq.n	800250c <create_name+0x14>
 800251a:	2b5c      	cmp	r3, #92	; 0x5c
 800251c:	d0f6      	beq.n	800250c <create_name+0x14>
	*path = &p[si];						/* Return pointer to the next segment */
 800251e:	f8ca 2000 	str.w	r2, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002522:	281f      	cmp	r0, #31
 8002524:	d821      	bhi.n	800256a <create_name+0x72>
 8002526:	2704      	movs	r7, #4
 8002528:	e022      	b.n	8002570 <create_name+0x78>
		lfn[di++] = w;					/* Store the Unicode character */
 800252a:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 800252e:	4634      	mov	r4, r6
 8002530:	1c66      	adds	r6, r4, #1
 8002532:	f819 0004 	ldrb.w	r0, [r9, r4]
		if (w < ' ' || w == '/' || w == '\\') {		/* Break on end of segment */
 8002536:	281f      	cmp	r0, #31
 8002538:	d9e9      	bls.n	800250e <create_name+0x16>
 800253a:	282f      	cmp	r0, #47	; 0x2f
 800253c:	d0e7      	beq.n	800250e <create_name+0x16>
 800253e:	285c      	cmp	r0, #92	; 0x5c
 8002540:	d0e5      	beq.n	800250e <create_name+0x16>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8002542:	2cfe      	cmp	r4, #254	; 0xfe
 8002544:	f200 80df 	bhi.w	8002706 <create_name+0x20e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8002548:	2101      	movs	r1, #1
 800254a:	f000 ffe9 	bl	8003520 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800254e:	4607      	mov	r7, r0
 8002550:	2800      	cmp	r0, #0
 8002552:	f000 80da 	beq.w	800270a <create_name+0x212>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8002556:	287f      	cmp	r0, #127	; 0x7f
 8002558:	d8e7      	bhi.n	800252a <create_name+0x32>
 800255a:	4601      	mov	r1, r0
 800255c:	486d      	ldr	r0, [pc, #436]	; (8002714 <create_name+0x21c>)
 800255e:	f7ff f966 	bl	800182e <chk_chr>
 8002562:	2800      	cmp	r0, #0
 8002564:	d0e1      	beq.n	800252a <create_name+0x32>
 8002566:	2006      	movs	r0, #6
 8002568:	e086      	b.n	8002678 <create_name+0x180>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800256a:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800256c:	e000      	b.n	8002570 <create_name+0x78>
		di--;
 800256e:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002570:	b144      	cbz	r4, 8002584 <create_name+0x8c>
		w = lfn[di - 1];
 8002572:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8002576:	3b01      	subs	r3, #1
 8002578:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800257c:	2b20      	cmp	r3, #32
 800257e:	d0f6      	beq.n	800256e <create_name+0x76>
 8002580:	2b2e      	cmp	r3, #46	; 0x2e
 8002582:	d0f4      	beq.n	800256e <create_name+0x76>
	lfn[di] = 0;						/* LFN is created */
 8002584:	2300      	movs	r3, #0
 8002586:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800258a:	2c00      	cmp	r4, #0
 800258c:	f000 80bf 	beq.w	800270e <create_name+0x216>
	mem_set(dp->fn, ' ', 11);
 8002590:	220b      	movs	r2, #11
 8002592:	2120      	movs	r1, #32
 8002594:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8002598:	f7ff f935 	bl	8001806 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <create_name+0xaa>
 80025a0:	3301      	adds	r3, #1
 80025a2:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 80025a6:	2a20      	cmp	r2, #32
 80025a8:	d0fa      	beq.n	80025a0 <create_name+0xa8>
 80025aa:	2a2e      	cmp	r2, #46	; 0x2e
 80025ac:	d0f8      	beq.n	80025a0 <create_name+0xa8>
	if (si) cf |= NS_LOSS | NS_LFN;
 80025ae:	b11b      	cbz	r3, 80025b8 <create_name+0xc0>
 80025b0:	f047 0703 	orr.w	r7, r7, #3
 80025b4:	e000      	b.n	80025b8 <create_name+0xc0>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80025b6:	3c01      	subs	r4, #1
 80025b8:	b16c      	cbz	r4, 80025d6 <create_name+0xde>
 80025ba:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 80025be:	3a01      	subs	r2, #1
 80025c0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80025c4:	2a2e      	cmp	r2, #46	; 0x2e
 80025c6:	d1f6      	bne.n	80025b6 <create_name+0xbe>
 80025c8:	f04f 0b08 	mov.w	fp, #8
 80025cc:	f04f 0a00 	mov.w	sl, #0
 80025d0:	f8cd a004 	str.w	sl, [sp, #4]
 80025d4:	e00a      	b.n	80025ec <create_name+0xf4>
 80025d6:	46a2      	mov	sl, r4
 80025d8:	f04f 0b08 	mov.w	fp, #8
 80025dc:	2200      	movs	r2, #0
 80025de:	9201      	str	r2, [sp, #4]
 80025e0:	e004      	b.n	80025ec <create_name+0xf4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80025e2:	454c      	cmp	r4, r9
 80025e4:	d00b      	beq.n	80025fe <create_name+0x106>
			cf |= NS_LOSS | NS_LFN; continue;
 80025e6:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 80025ea:	464b      	mov	r3, r9
 80025ec:	f103 0901 	add.w	r9, r3, #1
 80025f0:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80025f4:	b1fe      	cbz	r6, 8002636 <create_name+0x13e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80025f6:	2e20      	cmp	r6, #32
 80025f8:	d0f5      	beq.n	80025e6 <create_name+0xee>
 80025fa:	2e2e      	cmp	r6, #46	; 0x2e
 80025fc:	d0f1      	beq.n	80025e2 <create_name+0xea>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80025fe:	45da      	cmp	sl, fp
 8002600:	d210      	bcs.n	8002624 <create_name+0x12c>
 8002602:	454c      	cmp	r4, r9
 8002604:	d00e      	beq.n	8002624 <create_name+0x12c>
		if (w >= 0x80) {				/* Non ASCII character */
 8002606:	2e7f      	cmp	r6, #127	; 0x7f
 8002608:	d846      	bhi.n	8002698 <create_name+0x1a0>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800260a:	2e00      	cmp	r6, #0
 800260c:	d151      	bne.n	80026b2 <create_name+0x1ba>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800260e:	f047 0703 	orr.w	r7, r7, #3
 8002612:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8002614:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8002618:	f803 600a 	strb.w	r6, [r3, sl]
		w = lfn[si++];					/* Get an LFN character */
 800261c:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 800261e:	f10a 0a01 	add.w	sl, sl, #1
 8002622:	e7e3      	b.n	80025ec <create_name+0xf4>
			if (ni == 11) {				/* Long extension */
 8002624:	f1bb 0f0b 	cmp.w	fp, #11
 8002628:	d029      	beq.n	800267e <create_name+0x186>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800262a:	454c      	cmp	r4, r9
 800262c:	d001      	beq.n	8002632 <create_name+0x13a>
 800262e:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 8002632:	454c      	cmp	r4, r9
 8002634:	d226      	bcs.n	8002684 <create_name+0x18c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002636:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	2ae5      	cmp	r2, #229	; 0xe5
 800263e:	d054      	beq.n	80026ea <create_name+0x1f2>
	if (ni == 8) b <<= 2;
 8002640:	f1bb 0f08 	cmp.w	fp, #8
 8002644:	d054      	beq.n	80026f0 <create_name+0x1f8>
 8002646:	9b01      	ldr	r3, [sp, #4]
 8002648:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800264c:	2a0c      	cmp	r2, #12
 800264e:	d003      	beq.n	8002658 <create_name+0x160>
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d101      	bne.n	800265c <create_name+0x164>
 8002658:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800265c:	f017 0f02 	tst.w	r7, #2
 8002660:	d106      	bne.n	8002670 <create_name+0x178>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d046      	beq.n	80026fa <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800266c:	2a04      	cmp	r2, #4
 800266e:	d047      	beq.n	8002700 <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8002670:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8002674:	72df      	strb	r7, [r3, #11]
	return FR_OK;
 8002676:	2000      	movs	r0, #0
}
 8002678:	b003      	add	sp, #12
 800267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800267e:	f047 0703 	orr.w	r7, r7, #3
 8002682:	e7d8      	b.n	8002636 <create_name+0x13e>
			b <<= 2; continue;
 8002684:	9b01      	ldr	r3, [sp, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	b2db      	uxtb	r3, r3
 800268a:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800268c:	4623      	mov	r3, r4
 800268e:	f04f 0b0b 	mov.w	fp, #11
 8002692:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8002696:	e7a9      	b.n	80025ec <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8002698:	2100      	movs	r1, #0
 800269a:	4630      	mov	r0, r6
 800269c:	f000 ff40 	bl	8003520 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80026a0:	4606      	mov	r6, r0
 80026a2:	b118      	cbz	r0, 80026ac <create_name+0x1b4>
 80026a4:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <create_name+0x220>)
 80026aa:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 80026ac:	f047 0702 	orr.w	r7, r7, #2
 80026b0:	e7ab      	b.n	800260a <create_name+0x112>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80026b2:	4631      	mov	r1, r6
 80026b4:	4819      	ldr	r0, [pc, #100]	; (800271c <create_name+0x224>)
 80026b6:	f7ff f8ba 	bl	800182e <chk_chr>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d1a7      	bne.n	800260e <create_name+0x116>
				if (IsUpper(w)) {		/* ASCII large capital */
 80026be:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b19      	cmp	r3, #25
 80026c6:	d804      	bhi.n	80026d2 <create_name+0x1da>
					b |= 2;
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	e7a0      	b.n	8002614 <create_name+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80026d2:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b19      	cmp	r3, #25
 80026da:	d89b      	bhi.n	8002614 <create_name+0x11c>
						b |= 1; w -= 0x20;
 80026dc:	9b01      	ldr	r3, [sp, #4]
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	3e20      	subs	r6, #32
 80026e6:	b2b6      	uxth	r6, r6
 80026e8:	e794      	b.n	8002614 <create_name+0x11c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80026ea:	2205      	movs	r2, #5
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e7a7      	b.n	8002640 <create_name+0x148>
	if (ni == 8) b <<= 2;
 80026f0:	9b01      	ldr	r3, [sp, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	e7a5      	b.n	8002646 <create_name+0x14e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80026fa:	f047 0710 	orr.w	r7, r7, #16
 80026fe:	e7b5      	b.n	800266c <create_name+0x174>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8002700:	f047 0708 	orr.w	r7, r7, #8
 8002704:	e7b4      	b.n	8002670 <create_name+0x178>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8002706:	2006      	movs	r0, #6
 8002708:	e7b6      	b.n	8002678 <create_name+0x180>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800270a:	2006      	movs	r0, #6
 800270c:	e7b4      	b.n	8002678 <create_name+0x180>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800270e:	2006      	movs	r0, #6
 8002710:	e7b2      	b.n	8002678 <create_name+0x180>
 8002712:	bf00      	nop
 8002714:	08005e78 	.word	0x08005e78
 8002718:	08005de8 	.word	0x08005de8
 800271c:	08005e84 	.word	0x08005e84

08002720 <get_fileinfo>:
{
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 8002722:	2300      	movs	r3, #0
 8002724:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8002726:	6983      	ldr	r3, [r0, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d06b      	beq.n	8002804 <get_fileinfo+0xe4>
 800272c:	460d      	mov	r5, r1
 800272e:	4606      	mov	r6, r0
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8002730:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d013      	beq.n	8002760 <get_fileinfo+0x40>
			i = 0; lfn = dp->lfn;
 8002738:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800273a:	2400      	movs	r4, #0
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800273c:	1c9f      	adds	r7, r3, #2
 800273e:	8818      	ldrh	r0, [r3, #0]
 8002740:	b158      	cbz	r0, 800275a <get_fileinfo+0x3a>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8002742:	2100      	movs	r1, #0
 8002744:	f000 feec 	bl	8003520 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8002748:	b130      	cbz	r0, 8002758 <get_fileinfo+0x38>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800274a:	2cfe      	cmp	r4, #254	; 0xfe
 800274c:	d80c      	bhi.n	8002768 <get_fileinfo+0x48>
				fno->fname[i++] = (char)w;
 800274e:	192a      	adds	r2, r5, r4
 8002750:	7590      	strb	r0, [r2, #22]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8002752:	463b      	mov	r3, r7
				fno->fname[i++] = (char)w;
 8002754:	3401      	adds	r4, #1
 8002756:	e7f1      	b.n	800273c <get_fileinfo+0x1c>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8002758:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800275a:	442c      	add	r4, r5
 800275c:	2300      	movs	r3, #0
 800275e:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8002760:	7da8      	ldrb	r0, [r5, #22]
	i = j = 0;
 8002762:	2200      	movs	r2, #0
 8002764:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8002766:	e012      	b.n	800278e <get_fileinfo+0x6e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8002768:	2400      	movs	r4, #0
 800276a:	e7f6      	b.n	800275a <get_fileinfo+0x3a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800276c:	23e5      	movs	r3, #229	; 0xe5
 800276e:	e017      	b.n	80027a0 <get_fileinfo+0x80>
			if (!lfv) fno->fname[j] = '.';
 8002770:	b910      	cbnz	r0, 8002778 <get_fileinfo+0x58>
 8002772:	18a9      	adds	r1, r5, r2
 8002774:	272e      	movs	r7, #46	; 0x2e
 8002776:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8002778:	18a9      	adds	r1, r5, r2
 800277a:	272e      	movs	r7, #46	; 0x2e
 800277c:	724f      	strb	r7, [r1, #9]
 800277e:	3201      	adds	r2, #1
 8002780:	e010      	b.n	80027a4 <get_fileinfo+0x84>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 8002782:	2110      	movs	r1, #16
 8002784:	e01c      	b.n	80027c0 <get_fileinfo+0xa0>
			fno->fname[j] = c;
 8002786:	18a9      	adds	r1, r5, r2
 8002788:	758b      	strb	r3, [r1, #22]
		j++;
 800278a:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 800278c:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 800278e:	2b0a      	cmp	r3, #10
 8002790:	d81b      	bhi.n	80027ca <get_fileinfo+0xaa>
		c = (TCHAR)dp->dir[i++];
 8002792:	69f1      	ldr	r1, [r6, #28]
 8002794:	1c5c      	adds	r4, r3, #1
 8002796:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8002798:	2b20      	cmp	r3, #32
 800279a:	d0f7      	beq.n	800278c <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800279c:	2b05      	cmp	r3, #5
 800279e:	d0e5      	beq.n	800276c <get_fileinfo+0x4c>
		if (i == 9) {						/* Insert a . if extension is exist */
 80027a0:	2c09      	cmp	r4, #9
 80027a2:	d0e5      	beq.n	8002770 <get_fileinfo+0x50>
		fno->altname[j] = c;
 80027a4:	18a9      	adds	r1, r5, r2
 80027a6:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d1ee      	bne.n	800278a <get_fileinfo+0x6a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 80027ac:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 80027b0:	b2c9      	uxtb	r1, r1
 80027b2:	2919      	cmp	r1, #25
 80027b4:	d8e7      	bhi.n	8002786 <get_fileinfo+0x66>
 80027b6:	69f1      	ldr	r1, [r6, #28]
 80027b8:	7b0f      	ldrb	r7, [r1, #12]
 80027ba:	2c08      	cmp	r4, #8
 80027bc:	d8e1      	bhi.n	8002782 <get_fileinfo+0x62>
 80027be:	2108      	movs	r1, #8
 80027c0:	420f      	tst	r7, r1
 80027c2:	d0e0      	beq.n	8002786 <get_fileinfo+0x66>
				c += 0x20;			/* To lower */
 80027c4:	3320      	adds	r3, #32
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e7dd      	b.n	8002786 <get_fileinfo+0x66>
	if (!lfv) {
 80027ca:	b930      	cbnz	r0, 80027da <get_fileinfo+0xba>
		fno->fname[j] = 0;
 80027cc:	18ab      	adds	r3, r5, r2
 80027ce:	2100      	movs	r1, #0
 80027d0:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80027d2:	69f3      	ldr	r3, [r6, #28]
 80027d4:	7b1b      	ldrb	r3, [r3, #12]
 80027d6:	b903      	cbnz	r3, 80027da <get_fileinfo+0xba>
 80027d8:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 80027da:	442a      	add	r2, r5
 80027dc:	2300      	movs	r3, #0
 80027de:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80027e0:	69f3      	ldr	r3, [r6, #28]
 80027e2:	7adb      	ldrb	r3, [r3, #11]
 80027e4:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80027e6:	69f0      	ldr	r0, [r6, #28]
 80027e8:	301c      	adds	r0, #28
 80027ea:	f7fe ffea 	bl	80017c2 <ld_dword>
 80027ee:	6028      	str	r0, [r5, #0]
	fno->fdate = ld_word(dp->dir + DIR_WrtDate);	/* Date */
 80027f0:	69f0      	ldr	r0, [r6, #28]
 80027f2:	3018      	adds	r0, #24
 80027f4:	f7fe ffe0 	bl	80017b8 <ld_word>
 80027f8:	80a8      	strh	r0, [r5, #4]
	fno->ftime = ld_word(dp->dir + DIR_WrtTime);	/* Time */
 80027fa:	69f0      	ldr	r0, [r6, #28]
 80027fc:	3016      	adds	r0, #22
 80027fe:	f7fe ffdb 	bl	80017b8 <ld_word>
 8002802:	80e8      	strh	r0, [r5, #6]
}
 8002804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002808 <cmp_lfn>:
{
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	4681      	mov	r9, r0
 800280e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8002810:	f101 001a 	add.w	r0, r1, #26
 8002814:	f7fe ffd0 	bl	80017b8 <ld_word>
 8002818:	bbb8      	cbnz	r0, 800288a <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800281a:	783d      	ldrb	r5, [r7, #0]
 800281c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8002820:	3d01      	subs	r5, #1
 8002822:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002826:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800282a:	f04f 0801 	mov.w	r8, #1
 800282e:	2400      	movs	r4, #0
 8002830:	e004      	b.n	800283c <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002836:	4298      	cmp	r0, r3
 8002838:	d12e      	bne.n	8002898 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800283a:	3401      	adds	r4, #1
 800283c:	2c0c      	cmp	r4, #12
 800283e:	d818      	bhi.n	8002872 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <cmp_lfn+0xa0>)
 8002842:	5d18      	ldrb	r0, [r3, r4]
 8002844:	4438      	add	r0, r7
 8002846:	f7fe ffb7 	bl	80017b8 <ld_word>
 800284a:	4606      	mov	r6, r0
		if (wc) {
 800284c:	f1b8 0f00 	cmp.w	r8, #0
 8002850:	d0ef      	beq.n	8002832 <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002852:	2dfe      	cmp	r5, #254	; 0xfe
 8002854:	d81c      	bhi.n	8002890 <cmp_lfn+0x88>
 8002856:	f000 fe7f 	bl	8003558 <ff_wtoupper>
 800285a:	4680      	mov	r8, r0
 800285c:	f105 0a01 	add.w	sl, r5, #1
 8002860:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8002864:	f000 fe78 	bl	8003558 <ff_wtoupper>
 8002868:	4580      	cmp	r8, r0
 800286a:	d113      	bne.n	8002894 <cmp_lfn+0x8c>
			wc = uc;
 800286c:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800286e:	4655      	mov	r5, sl
 8002870:	e7e3      	b.n	800283a <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8002872:	783b      	ldrb	r3, [r7, #0]
 8002874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002878:	d010      	beq.n	800289c <cmp_lfn+0x94>
 800287a:	f1b8 0f00 	cmp.w	r8, #0
 800287e:	d00f      	beq.n	80028a0 <cmp_lfn+0x98>
 8002880:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8002884:	b973      	cbnz	r3, 80028a4 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 8002886:	2001      	movs	r0, #1
 8002888:	e000      	b.n	800288c <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800288a:	2000      	movs	r0, #0
}
 800288c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8002890:	2000      	movs	r0, #0
 8002892:	e7fb      	b.n	800288c <cmp_lfn+0x84>
 8002894:	2000      	movs	r0, #0
 8002896:	e7f9      	b.n	800288c <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002898:	2000      	movs	r0, #0
 800289a:	e7f7      	b.n	800288c <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 800289c:	2001      	movs	r0, #1
 800289e:	e7f5      	b.n	800288c <cmp_lfn+0x84>
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7f3      	b.n	800288c <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80028a4:	2000      	movs	r0, #0
 80028a6:	e7f1      	b.n	800288c <cmp_lfn+0x84>
 80028a8:	08005e68 	.word	0x08005e68

080028ac <dir_find>:
{
 80028ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80028b2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80028b6:	2100      	movs	r1, #0
 80028b8:	f7ff fb71 	bl	8001f9e <dir_sdi>
	if (res != FR_OK) return res;
 80028bc:	4606      	mov	r6, r0
 80028be:	2800      	cmp	r0, #0
 80028c0:	d15e      	bne.n	8002980 <dir_find+0xd4>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	6263      	str	r3, [r4, #36]	; 0x24
 80028c8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80028cc:	464f      	mov	r7, r9
 80028ce:	e00a      	b.n	80028e6 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	6263      	str	r3, [r4, #36]	; 0x24
 80028d6:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80028d8:	2100      	movs	r1, #0
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff fcd8 	bl	8002290 <dir_next>
	} while (res == FR_OK);
 80028e0:	4606      	mov	r6, r0
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d14c      	bne.n	8002980 <dir_find+0xd4>
		res = move_window(fs, dp->sect);
 80028e6:	69a1      	ldr	r1, [r4, #24]
 80028e8:	4640      	mov	r0, r8
 80028ea:	f7ff f927 	bl	8001b3c <move_window>
		if (res != FR_OK) break;
 80028ee:	4606      	mov	r6, r0
 80028f0:	2800      	cmp	r0, #0
 80028f2:	d145      	bne.n	8002980 <dir_find+0xd4>
		c = dp->dir[DIR_Name];
 80028f4:	69e5      	ldr	r5, [r4, #28]
 80028f6:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d040      	beq.n	800297e <dir_find+0xd2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80028fc:	7ae9      	ldrb	r1, [r5, #11]
 80028fe:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8002902:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002904:	2be5      	cmp	r3, #229	; 0xe5
 8002906:	d0e3      	beq.n	80028d0 <dir_find+0x24>
 8002908:	f011 0f08 	tst.w	r1, #8
 800290c:	d001      	beq.n	8002912 <dir_find+0x66>
 800290e:	2a0f      	cmp	r2, #15
 8002910:	d1de      	bne.n	80028d0 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002912:	2a0f      	cmp	r2, #15
 8002914:	d014      	beq.n	8002940 <dir_find+0x94>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8002916:	b927      	cbnz	r7, 8002922 <dir_find+0x76>
 8002918:	4628      	mov	r0, r5
 800291a:	f7ff f893 	bl	8001a44 <sum_sfn>
 800291e:	4548      	cmp	r0, r9
 8002920:	d02e      	beq.n	8002980 <dir_find+0xd4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8002922:	6a21      	ldr	r1, [r4, #32]
 8002924:	7acb      	ldrb	r3, [r1, #11]
 8002926:	f013 0f01 	tst.w	r3, #1
 800292a:	d104      	bne.n	8002936 <dir_find+0x8a>
 800292c:	220b      	movs	r2, #11
 800292e:	4628      	mov	r0, r5
 8002930:	f7fe ff6e 	bl	8001810 <mem_cmp>
 8002934:	b320      	cbz	r0, 8002980 <dir_find+0xd4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	6263      	str	r3, [r4, #36]	; 0x24
 800293c:	27ff      	movs	r7, #255	; 0xff
 800293e:	e7cb      	b.n	80028d8 <dir_find+0x2c>
				if (dp->lfn) {
 8002940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002942:	2800      	cmp	r0, #0
 8002944:	d0c8      	beq.n	80028d8 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800294a:	d006      	beq.n	800295a <dir_find+0xae>
						sum = dp->dir[LDIR_Chksum];
 800294c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002950:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8002954:	6922      	ldr	r2, [r4, #16]
 8002956:	6262      	str	r2, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002958:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800295a:	42bb      	cmp	r3, r7
 800295c:	d001      	beq.n	8002962 <dir_find+0xb6>
 800295e:	27ff      	movs	r7, #255	; 0xff
 8002960:	e7ba      	b.n	80028d8 <dir_find+0x2c>
 8002962:	7b6b      	ldrb	r3, [r5, #13]
 8002964:	454b      	cmp	r3, r9
 8002966:	d001      	beq.n	800296c <dir_find+0xc0>
 8002968:	27ff      	movs	r7, #255	; 0xff
 800296a:	e7b5      	b.n	80028d8 <dir_find+0x2c>
 800296c:	4629      	mov	r1, r5
 800296e:	f7ff ff4b 	bl	8002808 <cmp_lfn>
 8002972:	b110      	cbz	r0, 800297a <dir_find+0xce>
 8002974:	3f01      	subs	r7, #1
 8002976:	b2ff      	uxtb	r7, r7
 8002978:	e7ae      	b.n	80028d8 <dir_find+0x2c>
 800297a:	27ff      	movs	r7, #255	; 0xff
 800297c:	e7ac      	b.n	80028d8 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800297e:	2604      	movs	r6, #4
}
 8002980:	4630      	mov	r0, r6
 8002982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002986 <follow_path>:
{
 8002986:	b530      	push	{r4, r5, lr}
 8002988:	b083      	sub	sp, #12
 800298a:	4604      	mov	r4, r0
 800298c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800298e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002990:	e001      	b.n	8002996 <follow_path+0x10>
 8002992:	3301      	adds	r3, #1
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	9b01      	ldr	r3, [sp, #4]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	2a2f      	cmp	r2, #47	; 0x2f
 800299c:	d0f9      	beq.n	8002992 <follow_path+0xc>
 800299e:	2a5c      	cmp	r2, #92	; 0x5c
 80029a0:	d0f7      	beq.n	8002992 <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
 80029a2:	2200      	movs	r2, #0
 80029a4:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b1f      	cmp	r3, #31
 80029aa:	d91d      	bls.n	80029e8 <follow_path+0x62>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80029ac:	a901      	add	r1, sp, #4
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fda2 	bl	80024f8 <create_name>
			if (res != FR_OK) break;
 80029b4:	4603      	mov	r3, r0
 80029b6:	b9f8      	cbnz	r0, 80029f8 <follow_path+0x72>
			res = dir_find(dp);				/* Find an object with the segment name */
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7ff ff77 	bl	80028ac <dir_find>
			ns = dp->fn[NSFLAG];
 80029be:	6a23      	ldr	r3, [r4, #32]
 80029c0:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80029c2:	4603      	mov	r3, r0
 80029c4:	b9d8      	cbnz	r0, 80029fe <follow_path+0x78>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80029c6:	f012 0f04 	tst.w	r2, #4
 80029ca:	d115      	bne.n	80029f8 <follow_path+0x72>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80029cc:	79a3      	ldrb	r3, [r4, #6]
 80029ce:	f013 0f10 	tst.w	r3, #16
 80029d2:	d01b      	beq.n	8002a0c <follow_path+0x86>
				obj->sclust = ld_clust(fs, &fs->win[dp->dptr % SS(fs)]);	/* Open next directory */
 80029d4:	6921      	ldr	r1, [r4, #16]
 80029d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80029da:	3130      	adds	r1, #48	; 0x30
 80029dc:	4429      	add	r1, r5
 80029de:	4628      	mov	r0, r5
 80029e0:	f7fe ff39 	bl	8001856 <ld_clust>
 80029e4:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80029e6:	e7e1      	b.n	80029ac <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 80029e8:	6a23      	ldr	r3, [r4, #32]
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	72da      	strb	r2, [r3, #11]
		res = dir_sdi(dp, 0);
 80029ee:	2100      	movs	r1, #0
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff fad4 	bl	8001f9e <dir_sdi>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	b003      	add	sp, #12
 80029fc:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80029fe:	2804      	cmp	r0, #4
 8002a00:	d1fa      	bne.n	80029f8 <follow_path+0x72>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002a02:	f012 0f04 	tst.w	r2, #4
 8002a06:	d1f7      	bne.n	80029f8 <follow_path+0x72>
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e7f5      	b.n	80029f8 <follow_path+0x72>
				res = FR_NO_PATH; break;
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	e7f3      	b.n	80029f8 <follow_path+0x72>

08002a10 <dir_register>:
{
 8002a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a14:	b084      	sub	sp, #16
	FATFS *fs = dp->obj.fs;
 8002a16:	6806      	ldr	r6, [r0, #0]
	fn = dp->fn; lfn = dp->lfn;
 8002a18:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8002a1c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002a20:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8002a24:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8002a28:	f040 8089 	bne.w	8002b3e <dir_register+0x12e>
	for (nlen = 0; lfn[nlen]; nlen++) ;	/* Get lfn length */
 8002a2c:	2400      	movs	r4, #0
 8002a2e:	e000      	b.n	8002a32 <dir_register+0x22>
 8002a30:	3401      	adds	r4, #1
 8002a32:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1fa      	bne.n	8002a30 <dir_register+0x20>
 8002a3a:	4605      	mov	r5, r0
	mem_cpy(sn, fn, 12);
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	4651      	mov	r1, sl
 8002a40:	a801      	add	r0, sp, #4
 8002a42:	f7fe fed7 	bl	80017f4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002a4a:	f013 0f01 	tst.w	r3, #1
 8002a4e:	d01e      	beq.n	8002a8e <dir_register+0x7e>
		fn[NSFLAG] = 0; dp->lfn = 0;		/* Find only SFN */
 8002a50:	2300      	movs	r3, #0
 8002a52:	f88a 300b 	strb.w	r3, [sl, #11]
 8002a56:	62ab      	str	r3, [r5, #40]	; 0x28
		for (n = 1; n < 100; n++) {
 8002a58:	2701      	movs	r7, #1
 8002a5a:	2f63      	cmp	r7, #99	; 0x63
 8002a5c:	d80c      	bhi.n	8002a78 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4642      	mov	r2, r8
 8002a62:	a901      	add	r1, sp, #4
 8002a64:	4650      	mov	r0, sl
 8002a66:	f7fe ff9d 	bl	80019a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	f7ff ff1e 	bl	80028ac <dir_find>
			if (res != FR_OK) break;
 8002a70:	4681      	mov	r9, r0
 8002a72:	b908      	cbnz	r0, 8002a78 <dir_register+0x68>
		for (n = 1; n < 100; n++) {
 8002a74:	3701      	adds	r7, #1
 8002a76:	e7f0      	b.n	8002a5a <dir_register+0x4a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002a78:	2f64      	cmp	r7, #100	; 0x64
 8002a7a:	d066      	beq.n	8002b4a <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002a7c:	f1b9 0f04 	cmp.w	r9, #4
 8002a80:	d15f      	bne.n	8002b42 <dir_register+0x132>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8002a82:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002a86:	f88a 300b 	strb.w	r3, [sl, #11]
 8002a8a:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8002a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002a92:	f013 0f02 	tst.w	r3, #2
 8002a96:	d02a      	beq.n	8002aee <dir_register+0xde>
 8002a98:	340c      	adds	r4, #12
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <dir_register+0x140>)
 8002a9c:	fba3 3404 	umull	r3, r4, r3, r4
 8002aa0:	08a4      	lsrs	r4, r4, #2
 8002aa2:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7ff fc77 	bl	800239a <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8002aac:	4681      	mov	r9, r0
 8002aae:	b908      	cbnz	r0, 8002ab4 <dir_register+0xa4>
 8002ab0:	3c01      	subs	r4, #1
 8002ab2:	d11e      	bne.n	8002af2 <dir_register+0xe2>
	if (res == FR_OK) {
 8002ab4:	f1b9 0f00 	cmp.w	r9, #0
 8002ab8:	d143      	bne.n	8002b42 <dir_register+0x132>
		res = move_window(fs, dp->sect);
 8002aba:	69a9      	ldr	r1, [r5, #24]
 8002abc:	4630      	mov	r0, r6
 8002abe:	f7ff f83d 	bl	8001b3c <move_window>
		if (res == FR_OK) {
 8002ac2:	4681      	mov	r9, r0
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d13c      	bne.n	8002b42 <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002ac8:	2220      	movs	r2, #32
 8002aca:	2100      	movs	r1, #0
 8002acc:	69e8      	ldr	r0, [r5, #28]
 8002ace:	f7fe fe9a 	bl	8001806 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8002ad2:	220b      	movs	r2, #11
 8002ad4:	6a29      	ldr	r1, [r5, #32]
 8002ad6:	69e8      	ldr	r0, [r5, #28]
 8002ad8:	f7fe fe8c 	bl	80017f4 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8002adc:	6a2b      	ldr	r3, [r5, #32]
 8002ade:	7adb      	ldrb	r3, [r3, #11]
 8002ae0:	69ea      	ldr	r2, [r5, #28]
 8002ae2:	f003 0318 	and.w	r3, r3, #24
 8002ae6:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	70f3      	strb	r3, [r6, #3]
 8002aec:	e029      	b.n	8002b42 <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8002aee:	2401      	movs	r4, #1
 8002af0:	e7d8      	b.n	8002aa4 <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8002af2:	6929      	ldr	r1, [r5, #16]
 8002af4:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8002af8:	4628      	mov	r0, r5
 8002afa:	f7ff fa50 	bl	8001f9e <dir_sdi>
		if (res == FR_OK) {
 8002afe:	4681      	mov	r9, r0
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d1d7      	bne.n	8002ab4 <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8002b04:	6a28      	ldr	r0, [r5, #32]
 8002b06:	f7fe ff9d 	bl	8001a44 <sum_sfn>
 8002b0a:	4607      	mov	r7, r0
				res = move_window(fs, dp->sect);
 8002b0c:	69a9      	ldr	r1, [r5, #24]
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f7ff f814 	bl	8001b3c <move_window>
				if (res != FR_OK) break;
 8002b14:	4681      	mov	r9, r0
 8002b16:	2800      	cmp	r0, #0
 8002b18:	d1cc      	bne.n	8002ab4 <dir_register+0xa4>
				put_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	b2e2      	uxtb	r2, r4
 8002b1e:	69e9      	ldr	r1, [r5, #28]
 8002b20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002b22:	f7fe ff03 	bl	800192c <put_lfn>
				fs->wflag = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f7ff fbaf 	bl	8002290 <dir_next>
			} while (res == FR_OK && --nent);
 8002b32:	4681      	mov	r9, r0
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1bd      	bne.n	8002ab4 <dir_register+0xa4>
 8002b38:	3c01      	subs	r4, #1
 8002b3a:	d1e7      	bne.n	8002b0c <dir_register+0xfc>
 8002b3c:	e7ba      	b.n	8002ab4 <dir_register+0xa4>
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002b3e:	f04f 0906 	mov.w	r9, #6
}
 8002b42:	4648      	mov	r0, r9
 8002b44:	b004      	add	sp, #16
 8002b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002b4a:	f04f 0907 	mov.w	r9, #7
 8002b4e:	e7f8      	b.n	8002b42 <dir_register+0x132>
 8002b50:	4ec4ec4f 	.word	0x4ec4ec4f

08002b54 <sync_fs>:
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002b58:	f7fe ffc6 	bl	8001ae8 <sync_window>
	if (res == FR_OK) {
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	b948      	cbnz	r0, 8002b74 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002b60:	7823      	ldrb	r3, [r4, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d008      	beq.n	8002b78 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002b66:	2200      	movs	r2, #0
 8002b68:	4611      	mov	r1, r2
 8002b6a:	7860      	ldrb	r0, [r4, #1]
 8002b6c:	f002 fee9 	bl	8005942 <disk_ioctl>
 8002b70:	b100      	cbz	r0, 8002b74 <sync_fs+0x20>
 8002b72:	2501      	movs	r5, #1
}
 8002b74:	4628      	mov	r0, r5
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002b78:	7923      	ldrb	r3, [r4, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d1f3      	bne.n	8002b66 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8002b7e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8002b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b86:	2100      	movs	r1, #0
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f7fe fe3c 	bl	8001806 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002b8e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002b92:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8002b96:	f7fe fe1f 	bl	80017d8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002b9a:	490f      	ldr	r1, [pc, #60]	; (8002bd8 <sync_fs+0x84>)
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f7fe fe1f 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <sync_fs+0x88>)
 8002ba4:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8002ba8:	f7fe fe1a 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002bac:	6921      	ldr	r1, [r4, #16]
 8002bae:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8002bb2:	f7fe fe15 	bl	80017e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002bb6:	68e1      	ldr	r1, [r4, #12]
 8002bb8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8002bbc:	f7fe fe10 	bl	80017e0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8002bc0:	69e2      	ldr	r2, [r4, #28]
 8002bc2:	3201      	adds	r2, #1
 8002bc4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4631      	mov	r1, r6
 8002bca:	7860      	ldrb	r0, [r4, #1]
 8002bcc:	f002 feb4 	bl	8005938 <disk_write>
			fs->fsi_flag = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	7123      	strb	r3, [r4, #4]
 8002bd4:	e7c7      	b.n	8002b66 <sync_fs+0x12>
 8002bd6:	bf00      	nop
 8002bd8:	41615252 	.word	0x41615252
 8002bdc:	61417272 	.word	0x61417272

08002be0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002be0:	b510      	push	{r4, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	9001      	str	r0, [sp, #4]
 8002be6:	9100      	str	r1, [sp, #0]
 8002be8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002bea:	a804      	add	r0, sp, #16
 8002bec:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 8002bf0:	f7fe ff36 	bl	8001a60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	db19      	blt.n	8002c2c <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <f_mount+0x54>)
 8002bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 8002bfe:	b10b      	cbz	r3, 8002c04 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	b10b      	cbz	r3, 8002c0c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002c0c:	9b01      	ldr	r3, [sp, #4]
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <f_mount+0x54>)
 8002c10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002c14:	b163      	cbz	r3, 8002c30 <f_mount+0x50>
 8002c16:	2c01      	cmp	r4, #1
 8002c18:	d002      	beq.n	8002c20 <f_mount+0x40>
 8002c1a:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002c20:	2200      	movs	r2, #0
 8002c22:	a901      	add	r1, sp, #4
 8002c24:	4668      	mov	r0, sp
 8002c26:	f7fe ffd3 	bl	8001bd0 <find_volume>
	LEAVE_FF(fs, res);
 8002c2a:	e7f7      	b.n	8002c1c <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c2c:	200b      	movs	r0, #11
 8002c2e:	e7f5      	b.n	8002c1c <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002c30:	2000      	movs	r0, #0
 8002c32:	e7f3      	b.n	8002c1c <f_mount+0x3c>
 8002c34:	20000d10 	.word	0x20000d10

08002c38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c3c:	b093      	sub	sp, #76	; 0x4c
 8002c3e:	9101      	str	r1, [sp, #4]
	DWORD dw, cl;
#endif
	DEF_NAMBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8002c40:	2800      	cmp	r0, #0
 8002c42:	f000 80af 	beq.w	8002da4 <f_open+0x16c>
 8002c46:	4604      	mov	r4, r0
 8002c48:	4615      	mov	r5, r2
	fp->obj.fs = 0;		/* Clear file object */
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8002c4e:	f002 071f 	and.w	r7, r2, #31
	res = find_volume(&path, &fs, mode);
 8002c52:	463a      	mov	r2, r7
 8002c54:	a906      	add	r1, sp, #24
 8002c56:	a801      	add	r0, sp, #4
 8002c58:	f7fe ffba 	bl	8001bd0 <find_volume>
	if (res == FR_OK) {
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	b118      	cbz	r0, 8002c68 <f_open+0x30>

		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8002c60:	4630      	mov	r0, r6
 8002c62:	b013      	add	sp, #76	; 0x4c
 8002c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8002c68:	9b06      	ldr	r3, [sp, #24]
 8002c6a:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(dj);
 8002c6c:	ab03      	add	r3, sp, #12
 8002c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c70:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <f_open+0x170>)
 8002c72:	9311      	str	r3, [sp, #68]	; 0x44
		res = follow_path(&dj, path);	/* Follow the file path */
 8002c74:	9901      	ldr	r1, [sp, #4]
 8002c76:	a807      	add	r0, sp, #28
 8002c78:	f7ff fe85 	bl	8002986 <follow_path>
		if (res == FR_OK) {
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	b920      	cbnz	r0, 8002c8a <f_open+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c82:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db46      	blt.n	8002d18 <f_open+0xe0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002c8a:	f015 0f1c 	tst.w	r5, #28
 8002c8e:	d054      	beq.n	8002d3a <f_open+0x102>
			if (res != FR_OK) {					/* No file, create new */
 8002c90:	2e00      	cmp	r6, #0
 8002c92:	d048      	beq.n	8002d26 <f_open+0xee>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8002c94:	2e04      	cmp	r6, #4
 8002c96:	d041      	beq.n	8002d1c <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002c98:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	d15b      	bne.n	8002d58 <f_open+0x120>
 8002ca0:	f017 0f08 	tst.w	r7, #8
 8002ca4:	d058      	beq.n	8002d58 <f_open+0x120>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002ca6:	4d41      	ldr	r5, [pc, #260]	; (8002dac <f_open+0x174>)
 8002ca8:	4629      	mov	r1, r5
 8002caa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002cac:	300e      	adds	r0, #14
 8002cae:	f7fe fd97 	bl	80017e0 <st_dword>
					st_dword(dj.dir + DIR_WrtTime, dw);	/* Set modified time */
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002cb6:	3016      	adds	r0, #22
 8002cb8:	f7fe fd92 	bl	80017e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002cc2:	9d06      	ldr	r5, [sp, #24]
 8002cc4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8002cc8:	4641      	mov	r1, r8
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f7fe fdc3 	bl	8001856 <ld_clust>
 8002cd0:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7fe fdd0 	bl	800187c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8002cdc:	2100      	movs	r1, #0
 8002cde:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ce0:	301c      	adds	r0, #28
 8002ce2:	f7fe fd7d 	bl	80017e0 <st_dword>
					fs->wflag = 1;
 8002ce6:	9b06      	ldr	r3, [sp, #24]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8002cec:	f1b9 0f00 	cmp.w	r9, #0
 8002cf0:	d032      	beq.n	8002d58 <f_open+0x120>
						dw = fs->winsect;
 8002cf2:	9b06      	ldr	r3, [sp, #24]
 8002cf4:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	a807      	add	r0, sp, #28
 8002cfc:	f7ff fa89 	bl	8002212 <remove_chain>
						if (res == FR_OK) {
 8002d00:	4606      	mov	r6, r0
 8002d02:	bb48      	cbnz	r0, 8002d58 <f_open+0x120>
							res = move_window(fs, dw);
 8002d04:	4629      	mov	r1, r5
 8002d06:	9806      	ldr	r0, [sp, #24]
 8002d08:	f7fe ff18 	bl	8001b3c <move_window>
 8002d0c:	4606      	mov	r6, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002d0e:	f109 33ff 	add.w	r3, r9, #4294967295
 8002d12:	9a06      	ldr	r2, [sp, #24]
 8002d14:	60d3      	str	r3, [r2, #12]
 8002d16:	e01f      	b.n	8002d58 <f_open+0x120>
				res = FR_INVALID_NAME;
 8002d18:	2606      	movs	r6, #6
 8002d1a:	e7b6      	b.n	8002c8a <f_open+0x52>
					res = dir_register(&dj);
 8002d1c:	a807      	add	r0, sp, #28
 8002d1e:	f7ff fe77 	bl	8002a10 <dir_register>
 8002d22:	4606      	mov	r6, r0
 8002d24:	e7b8      	b.n	8002c98 <f_open+0x60>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002d26:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8002d2a:	f013 0f11 	tst.w	r3, #17
 8002d2e:	d112      	bne.n	8002d56 <f_open+0x11e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002d30:	f015 0f04 	tst.w	r5, #4
 8002d34:	d0b2      	beq.n	8002c9c <f_open+0x64>
 8002d36:	2608      	movs	r6, #8
 8002d38:	e00e      	b.n	8002d58 <f_open+0x120>
			if (res == FR_OK) {					/* Following succeeded */
 8002d3a:	b96e      	cbnz	r6, 8002d58 <f_open+0x120>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8002d3c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8002d40:	f013 0f10 	tst.w	r3, #16
 8002d44:	d12c      	bne.n	8002da0 <f_open+0x168>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8002d46:	f015 0f02 	tst.w	r5, #2
 8002d4a:	d005      	beq.n	8002d58 <f_open+0x120>
 8002d4c:	f013 0f01 	tst.w	r3, #1
 8002d50:	d002      	beq.n	8002d58 <f_open+0x120>
						res = FR_DENIED;
 8002d52:	2607      	movs	r6, #7
 8002d54:	e00b      	b.n	8002d6e <f_open+0x136>
					res = FR_DENIED;
 8002d56:	2607      	movs	r6, #7
		if (res == FR_OK) {
 8002d58:	b94e      	cbnz	r6, 8002d6e <f_open+0x136>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002d5a:	f017 0f08 	tst.w	r7, #8
 8002d5e:	d001      	beq.n	8002d64 <f_open+0x12c>
				mode |= _FA_MODIFIED;
 8002d60:	f047 0720 	orr.w	r7, r7, #32
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002d64:	9b06      	ldr	r3, [sp, #24]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 8002d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d6c:	6263      	str	r3, [r4, #36]	; 0x24
		if (res == FR_OK) {
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	f47f af76 	bne.w	8002c60 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8002d74:	9d06      	ldr	r5, [sp, #24]
 8002d76:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f7fe fd6a 	bl	8001856 <ld_clust>
 8002d82:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002d84:	f108 001c 	add.w	r0, r8, #28
 8002d88:	f7fe fd1b 	bl	80017c2 <ld_dword>
 8002d8c:	60e0      	str	r0, [r4, #12]
			fp->err = 0;			/* Clear error flag */
 8002d8e:	2300      	movs	r3, #0
 8002d90:	7463      	strb	r3, [r4, #17]
			fp->fptr = 0;			/* Set file pointer */
 8002d92:	6163      	str	r3, [r4, #20]
			fp->sect = 0;			/* Invalidate current data sector */
 8002d94:	61e3      	str	r3, [r4, #28]
			fp->flag = mode;		/* File access mode */
 8002d96:	7427      	strb	r7, [r4, #16]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002d98:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 8002d9a:	88eb      	ldrh	r3, [r5, #6]
 8002d9c:	80a3      	strh	r3, [r4, #4]
 8002d9e:	e75f      	b.n	8002c60 <f_open+0x28>
					res = FR_NO_FILE;
 8002da0:	2604      	movs	r6, #4
 8002da2:	e7e4      	b.n	8002d6e <f_open+0x136>
	if (!fp) return FR_INVALID_OBJECT;
 8002da4:	2609      	movs	r6, #9
 8002da6:	e75b      	b.n	8002c60 <f_open+0x28>
 8002da8:	20000d18 	.word	0x20000d18
 8002dac:	48610000 	.word	0x48610000

08002db0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b085      	sub	sp, #20
 8002db6:	4604      	mov	r4, r0
 8002db8:	4689      	mov	r9, r1
 8002dba:	4617      	mov	r7, r2
 8002dbc:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c8 3000 	str.w	r3, [r8]
	res = validate(fp, &fs);
 8002dc4:	a903      	add	r1, sp, #12
 8002dc6:	f7fe fe75 	bl	8001ab4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002dca:	4606      	mov	r6, r0
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	f040 80a2 	bne.w	8002f16 <f_read+0x166>
 8002dd2:	7c66      	ldrb	r6, [r4, #17]
 8002dd4:	2e00      	cmp	r6, #0
 8002dd6:	f040 809e 	bne.w	8002f16 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002dda:	7c23      	ldrb	r3, [r4, #16]
 8002ddc:	f013 0f01 	tst.w	r3, #1
 8002de0:	f000 80a3 	beq.w	8002f2a <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 8002de4:	68e5      	ldr	r5, [r4, #12]
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002dea:	42bd      	cmp	r5, r7
 8002dec:	d35d      	bcc.n	8002eaa <f_read+0xfa>
 8002dee:	463d      	mov	r5, r7
 8002df0:	e05b      	b.n	8002eaa <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002df2:	69a1      	ldr	r1, [r4, #24]
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff f86b 	bl	8001ed0 <get_fat>
 8002dfa:	e066      	b.n	8002eca <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002dfc:	2602      	movs	r6, #2
 8002dfe:	7466      	strb	r6, [r4, #17]
 8002e00:	e089      	b.n	8002f16 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002e02:	2601      	movs	r6, #1
 8002e04:	7466      	strb	r6, [r4, #17]
 8002e06:	e086      	b.n	8002f16 <f_read+0x166>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002e08:	2602      	movs	r6, #2
 8002e0a:	7466      	strb	r6, [r4, #17]
 8002e0c:	e083      	b.n	8002f16 <f_read+0x166>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & _FA_DIRTY) && fp->sect - sect < cc) {
 8002e0e:	7c23      	ldrb	r3, [r4, #16]
 8002e10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e14:	d005      	beq.n	8002e22 <f_read+0x72>
 8002e16:	69e0      	ldr	r0, [r4, #28]
 8002e18:	eba0 000a 	sub.w	r0, r0, sl
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	4298      	cmp	r0, r3
 8002e20:	d302      	bcc.n	8002e28 <f_read+0x78>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8002e22:	9b01      	ldr	r3, [sp, #4]
 8002e24:	025f      	lsls	r7, r3, #9
				continue;
 8002e26:	e036      	b.n	8002e96 <f_read+0xe6>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8002e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002e30:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8002e34:	f7fe fcde 	bl	80017f4 <mem_cpy>
 8002e38:	e7f3      	b.n	8002e22 <f_read+0x72>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8002e3a:	69e2      	ldr	r2, [r4, #28]
 8002e3c:	4552      	cmp	r2, sl
 8002e3e:	d01a      	beq.n	8002e76 <f_read+0xc6>
#if !_FS_READONLY
				if (fp->flag & _FA_DIRTY) {		/* Write-back dirty sector cache */
 8002e40:	7c23      	ldrb	r3, [r4, #16]
 8002e42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e46:	d00c      	beq.n	8002e62 <f_read+0xb2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002e4e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8002e52:	f002 fd71 	bl	8005938 <disk_write>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d161      	bne.n	8002f1e <f_read+0x16e>
						ABORT(fs, FR_DISK_ERR);
					}
					fp->flag &= ~_FA_DIRTY;
 8002e5a:	7c23      	ldrb	r3, [r4, #16]
 8002e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e60:	7423      	strb	r3, [r4, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 8002e62:	2301      	movs	r3, #1
 8002e64:	4652      	mov	r2, sl
 8002e66:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002e6a:	9803      	ldr	r0, [sp, #12]
 8002e6c:	7840      	ldrb	r0, [r0, #1]
 8002e6e:	f002 fd5e 	bl	800592e <disk_read>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d156      	bne.n	8002f24 <f_read+0x174>
					ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8002e76:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		rcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Get partial sector data from sector buffer */
 8002e7a:	6961      	ldr	r1, [r4, #20]
 8002e7c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002e80:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 8002e84:	42bd      	cmp	r5, r7
 8002e86:	d200      	bcs.n	8002e8a <f_read+0xda>
 8002e88:	462f      	mov	r7, r5
		if (move_window(fs, fp->sect) != FR_OK) {	/* Move sector window */
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(rbuff, &fs->win[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
 8002e8a:	3128      	adds	r1, #40	; 0x28
 8002e8c:	463a      	mov	r2, r7
 8002e8e:	4421      	add	r1, r4
 8002e90:	4648      	mov	r0, r9
 8002e92:	f7fe fcaf 	bl	80017f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8002e96:	44b9      	add	r9, r7
 8002e98:	6963      	ldr	r3, [r4, #20]
 8002e9a:	443b      	add	r3, r7
 8002e9c:	6163      	str	r3, [r4, #20]
 8002e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea2:	443b      	add	r3, r7
 8002ea4:	f8c8 3000 	str.w	r3, [r8]
 8002ea8:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d033      	beq.n	8002f16 <f_read+0x166>
		if ((fp->fptr % SS(fs)) == 0) {			/* On the sector boundary? */
 8002eae:	6963      	ldr	r3, [r4, #20]
 8002eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eb4:	2a00      	cmp	r2, #0
 8002eb6:	d1e0      	bne.n	8002e7a <f_read+0xca>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002eb8:	9a03      	ldr	r2, [sp, #12]
 8002eba:	8957      	ldrh	r7, [r2, #10]
 8002ebc:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8002ebe:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8002ec2:	d108      	bne.n	8002ed6 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d194      	bne.n	8002df2 <f_read+0x42>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002ec8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002eca:	2801      	cmp	r0, #1
 8002ecc:	d996      	bls.n	8002dfc <f_read+0x4c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002ece:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ed2:	d096      	beq.n	8002e02 <f_read+0x52>
				fp->clust = clst;				/* Update current cluster */
 8002ed4:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002ed6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002eda:	69a1      	ldr	r1, [r4, #24]
 8002edc:	4658      	mov	r0, fp
 8002ede:	f7fe fcae 	bl	800183e <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002ee2:	4682      	mov	sl, r0
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d08f      	beq.n	8002e08 <f_read+0x58>
			sect += csect;
 8002ee8:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002eea:	0a6b      	lsrs	r3, r5, #9
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	d0a4      	beq.n	8002e3a <f_read+0x8a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <f_read+0x14e>
					cc = fs->csize - csect;
 8002efa:	1bd3      	subs	r3, r2, r7
 8002efc:	9301      	str	r3, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	4652      	mov	r2, sl
 8002f02:	4649      	mov	r1, r9
 8002f04:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8002f08:	f002 fd11 	bl	800592e <disk_read>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	f43f af7e 	beq.w	8002e0e <f_read+0x5e>
					ABORT(fs, FR_DISK_ERR);
 8002f12:	2601      	movs	r6, #1
 8002f14:	7466      	strb	r6, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8002f16:	4630      	mov	r0, r6
 8002f18:	b005      	add	sp, #20
 8002f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						ABORT(fs, FR_DISK_ERR);
 8002f1e:	2601      	movs	r6, #1
 8002f20:	7466      	strb	r6, [r4, #17]
 8002f22:	e7f8      	b.n	8002f16 <f_read+0x166>
					ABORT(fs, FR_DISK_ERR);
 8002f24:	2601      	movs	r6, #1
 8002f26:	7466      	strb	r6, [r4, #17]
 8002f28:	e7f5      	b.n	8002f16 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002f2a:	2607      	movs	r6, #7
 8002f2c:	e7f3      	b.n	8002f16 <f_read+0x166>

08002f2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002f2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	4604      	mov	r4, r0
 8002f36:	4688      	mov	r8, r1
 8002f38:	4615      	mov	r5, r2
 8002f3a:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c9 3000 	str.w	r3, [r9]
	res = validate(fp, &fs);
 8002f42:	a903      	add	r1, sp, #12
 8002f44:	f7fe fdb6 	bl	8001ab4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002f48:	4607      	mov	r7, r0
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	f040 80b2 	bne.w	80030b4 <f_write+0x186>
 8002f50:	7c67      	ldrb	r7, [r4, #17]
 8002f52:	2f00      	cmp	r7, #0
 8002f54:	f040 80ae 	bne.w	80030b4 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002f58:	7c23      	ldrb	r3, [r4, #16]
 8002f5a:	f013 0f02 	tst.w	r3, #2
 8002f5e:	f000 80bf 	beq.w	80030e0 <f_write+0x1b2>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 8002f62:	6963      	ldr	r3, [r4, #20]
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
 8002f64:	42eb      	cmn	r3, r5
 8002f66:	d364      	bcc.n	8003032 <f_write+0x104>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8002f68:	43dd      	mvns	r5, r3
 8002f6a:	e062      	b.n	8003032 <f_write+0x104>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff f8ed 	bl	800214e <create_chain>
 8002f74:	e06f      	b.n	8003056 <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002f76:	69a1      	ldr	r1, [r4, #24]
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff f8e8 	bl	800214e <create_chain>
 8002f7e:	e06a      	b.n	8003056 <f_write+0x128>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8002f80:	2702      	movs	r7, #2
 8002f82:	7467      	strb	r7, [r4, #17]
 8002f84:	e096      	b.n	80030b4 <f_write+0x186>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002f86:	2701      	movs	r7, #1
 8002f88:	7467      	strb	r7, [r4, #17]
 8002f8a:	e093      	b.n	80030b4 <f_write+0x186>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK)	{	/* Write-back sector cache */
				ABORT(fs, FR_DISK_ERR);
			}
#else
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	69e2      	ldr	r2, [r4, #28]
 8002f90:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002f94:	9803      	ldr	r0, [sp, #12]
 8002f96:	7840      	ldrb	r0, [r0, #1]
 8002f98:	f002 fcce 	bl	8005938 <disk_write>
 8002f9c:	b920      	cbnz	r0, 8002fa8 <f_write+0x7a>
					ABORT(fs, FR_DISK_ERR);
				}
				fp->flag &= ~_FA_DIRTY;
 8002f9e:	7c23      	ldrb	r3, [r4, #16]
 8002fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa4:	7423      	strb	r3, [r4, #16]
 8002fa6:	e065      	b.n	8003074 <f_write+0x146>
					ABORT(fs, FR_DISK_ERR);
 8002fa8:	2701      	movs	r7, #1
 8002faa:	7467      	strb	r7, [r4, #17]
 8002fac:	e082      	b.n	80030b4 <f_write+0x186>
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002fae:	2702      	movs	r7, #2
 8002fb0:	7467      	strb	r7, [r4, #17]
 8002fb2:	e07f      	b.n	80030b4 <f_write+0x186>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8002fb4:	69e1      	ldr	r1, [r4, #28]
 8002fb6:	eba1 010a 	sub.w	r1, r1, sl
 8002fba:	4559      	cmp	r1, fp
 8002fbc:	d302      	bcc.n	8002fc4 <f_write+0x96>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~_FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8002fbe:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 8002fc2:	e027      	b.n	8003014 <f_write+0xe6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8002fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc8:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8002fcc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8002fd0:	f7fe fc10 	bl	80017f4 <mem_cpy>
					fp->flag &= ~_FA_DIRTY;
 8002fd4:	7c23      	ldrb	r3, [r4, #16]
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fda:	7423      	strb	r3, [r4, #16]
 8002fdc:	e7ef      	b.n	8002fbe <f_write+0x90>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
 8002fde:	69e3      	ldr	r3, [r4, #28]
 8002fe0:	4553      	cmp	r3, sl
 8002fe2:	d003      	beq.n	8002fec <f_write+0xbe>
				if (fp->fptr < fp->obj.objsize &&
 8002fe4:	6962      	ldr	r2, [r4, #20]
 8002fe6:	68e3      	ldr	r3, [r4, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d367      	bcc.n	80030bc <f_write+0x18e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8002fec:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		wcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Put partial sector into file I/O buffer */
 8002ff0:	6960      	ldr	r0, [r4, #20]
 8002ff2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002ff6:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;
 8002ffa:	42b5      	cmp	r5, r6
 8002ffc:	d200      	bcs.n	8003000 <f_write+0xd2>
 8002ffe:	462e      	mov	r6, r5
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(&fs->win[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
		fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
 8003000:	3028      	adds	r0, #40	; 0x28
 8003002:	4632      	mov	r2, r6
 8003004:	4641      	mov	r1, r8
 8003006:	4420      	add	r0, r4
 8003008:	f7fe fbf4 	bl	80017f4 <mem_cpy>
		fp->flag |= _FA_DIRTY;
 800300c:	7c23      	ldrb	r3, [r4, #16]
 800300e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003012:	7423      	strb	r3, [r4, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8003014:	44b0      	add	r8, r6
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	4433      	add	r3, r6
 800301a:	6163      	str	r3, [r4, #20]
 800301c:	68e2      	ldr	r2, [r4, #12]
 800301e:	4293      	cmp	r3, r2
 8003020:	bf38      	it	cc
 8003022:	4613      	movcc	r3, r2
 8003024:	60e3      	str	r3, [r4, #12]
 8003026:	f8d9 3000 	ldr.w	r3, [r9]
 800302a:	4433      	add	r3, r6
 800302c:	f8c9 3000 	str.w	r3, [r9]
 8003030:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 8003032:	2d00      	cmp	r5, #0
 8003034:	d04f      	beq.n	80030d6 <f_write+0x1a8>
		if ((fp->fptr % SS(fs)) == 0) {		/* On the sector boundary? */
 8003036:	6963      	ldr	r3, [r4, #20]
 8003038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800303c:	2a00      	cmp	r2, #0
 800303e:	d1d7      	bne.n	8002ff0 <f_write+0xc2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8003040:	9a03      	ldr	r2, [sp, #12]
 8003042:	8956      	ldrh	r6, [r2, #10]
 8003044:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8003046:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 800304a:	d10f      	bne.n	800306c <f_write+0x13e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800304c:	2b00      	cmp	r3, #0
 800304e:	d192      	bne.n	8002f76 <f_write+0x48>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8003050:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8003052:	2800      	cmp	r0, #0
 8003054:	d08a      	beq.n	8002f6c <f_write+0x3e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003056:	2800      	cmp	r0, #0
 8003058:	d03d      	beq.n	80030d6 <f_write+0x1a8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800305a:	2801      	cmp	r0, #1
 800305c:	d090      	beq.n	8002f80 <f_write+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800305e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003062:	d090      	beq.n	8002f86 <f_write+0x58>
				fp->clust = clst;			/* Update current cluster */
 8003064:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003066:	68a3      	ldr	r3, [r4, #8]
 8003068:	b903      	cbnz	r3, 800306c <f_write+0x13e>
 800306a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
 800306c:	7c23      	ldrb	r3, [r4, #16]
 800306e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003072:	d18b      	bne.n	8002f8c <f_write+0x5e>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	69a1      	ldr	r1, [r4, #24]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fbdf 	bl	800183e <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003080:	4682      	mov	sl, r0
 8003082:	2800      	cmp	r0, #0
 8003084:	d093      	beq.n	8002fae <f_write+0x80>
			sect += csect;
 8003086:	44b2      	add	sl, r6
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003088:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 800308c:	d0a7      	beq.n	8002fde <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800308e:	eb06 030b 	add.w	r3, r6, fp
 8003092:	9a01      	ldr	r2, [sp, #4]
 8003094:	8952      	ldrh	r2, [r2, #10]
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <f_write+0x170>
					cc = fs->csize - csect;
 800309a:	eba2 0b06 	sub.w	fp, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 800309e:	465b      	mov	r3, fp
 80030a0:	4652      	mov	r2, sl
 80030a2:	4641      	mov	r1, r8
 80030a4:	9801      	ldr	r0, [sp, #4]
 80030a6:	7840      	ldrb	r0, [r0, #1]
 80030a8:	f002 fc46 	bl	8005938 <disk_write>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d081      	beq.n	8002fb4 <f_write+0x86>
					ABORT(fs, FR_DISK_ERR);
 80030b0:	2701      	movs	r7, #1
 80030b2:	7467      	strb	r7, [r4, #17]
	}

	fp->flag |= _FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80030b4:	4638      	mov	r0, r7
 80030b6:	b005      	add	sp, #20
 80030b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80030bc:	2301      	movs	r3, #1
 80030be:	4652      	mov	r2, sl
 80030c0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80030c4:	9801      	ldr	r0, [sp, #4]
 80030c6:	7840      	ldrb	r0, [r0, #1]
 80030c8:	f002 fc31 	bl	800592e <disk_read>
				if (fp->fptr < fp->obj.objsize &&
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d08d      	beq.n	8002fec <f_write+0xbe>
						ABORT(fs, FR_DISK_ERR);
 80030d0:	2701      	movs	r7, #1
 80030d2:	7467      	strb	r7, [r4, #17]
 80030d4:	e7ee      	b.n	80030b4 <f_write+0x186>
	fp->flag |= _FA_MODIFIED;						/* Set file change flag */
 80030d6:	7c23      	ldrb	r3, [r4, #16]
 80030d8:	f043 0320 	orr.w	r3, r3, #32
 80030dc:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
 80030de:	e7e9      	b.n	80030b4 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80030e0:	2707      	movs	r7, #7
 80030e2:	e7e7      	b.n	80030b4 <f_write+0x186>

080030e4 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80030ec:	290a      	cmp	r1, #10
 80030ee:	d00d      	beq.n	800310c <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;	/* Buffer write index (-1:error) */
 80030f0:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	db08      	blt.n	8003108 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80030f6:	1c5e      	adds	r6, r3, #1
 80030f8:	4423      	add	r3, r4
 80030fa:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80030fc:	2e3c      	cmp	r6, #60	; 0x3c
 80030fe:	dc09      	bgt.n	8003114 <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8003100:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	3301      	adds	r3, #1
 8003106:	60a3      	str	r3, [r4, #8]
}
 8003108:	b002      	add	sp, #8
 800310a:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800310c:	210d      	movs	r1, #13
 800310e:	f7ff ffe9 	bl	80030e4 <putc_bfd>
 8003112:	e7ed      	b.n	80030f0 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8003114:	ab01      	add	r3, sp, #4
 8003116:	4632      	mov	r2, r6
 8003118:	f104 010c 	add.w	r1, r4, #12
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	f7ff ff06 	bl	8002f2e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8003122:	9b01      	ldr	r3, [sp, #4]
 8003124:	429e      	cmp	r6, r3
 8003126:	d002      	beq.n	800312e <putc_bfd+0x4a>
 8003128:	f04f 36ff 	mov.w	r6, #4294967295
 800312c:	e7e8      	b.n	8003100 <putc_bfd+0x1c>
 800312e:	2600      	movs	r6, #0
 8003130:	e7e6      	b.n	8003100 <putc_bfd+0x1c>
	...

08003134 <f_sync>:
{
 8003134:	b530      	push	{r4, r5, lr}
 8003136:	b083      	sub	sp, #12
 8003138:	4604      	mov	r4, r0
	res = validate(fp, &fs);	/* Check validity of the object */
 800313a:	a901      	add	r1, sp, #4
 800313c:	f7fe fcba 	bl	8001ab4 <validate>
	if (res == FR_OK) {
 8003140:	4603      	mov	r3, r0
 8003142:	b9c8      	cbnz	r0, 8003178 <f_sync+0x44>
		if (fp->flag & _FA_MODIFIED) {	/* Is there any change to the file? */
 8003144:	7c22      	ldrb	r2, [r4, #16]
 8003146:	f012 0f20 	tst.w	r2, #32
 800314a:	d015      	beq.n	8003178 <f_sync+0x44>
			if (fp->flag & _FA_DIRTY) {	/* Write-back cached data if needed */
 800314c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003150:	d00c      	beq.n	800316c <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8003152:	2301      	movs	r3, #1
 8003154:	69e2      	ldr	r2, [r4, #28]
 8003156:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800315a:	9801      	ldr	r0, [sp, #4]
 800315c:	7840      	ldrb	r0, [r0, #1]
 800315e:	f002 fbeb 	bl	8005938 <disk_write>
 8003162:	bb88      	cbnz	r0, 80031c8 <f_sync+0x94>
				fp->flag &= ~_FA_DIRTY;
 8003164:	7c23      	ldrb	r3, [r4, #16]
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	7423      	strb	r3, [r4, #16]
				res = move_window(fs, fp->dir_sect);
 800316c:	6a21      	ldr	r1, [r4, #32]
 800316e:	9801      	ldr	r0, [sp, #4]
 8003170:	f7fe fce4 	bl	8001b3c <move_window>
				if (res == FR_OK) {
 8003174:	4603      	mov	r3, r0
 8003176:	b110      	cbz	r0, 800317e <f_sync+0x4a>
}
 8003178:	4618      	mov	r0, r3
 800317a:	b003      	add	sp, #12
 800317c:	bd30      	pop	{r4, r5, pc}
					dir = fp->dir_ptr;
 800317e:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003180:	7aeb      	ldrb	r3, [r5, #11]
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003188:	68a2      	ldr	r2, [r4, #8]
 800318a:	4629      	mov	r1, r5
 800318c:	6820      	ldr	r0, [r4, #0]
 800318e:	f7fe fb75 	bl	800187c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003192:	68e1      	ldr	r1, [r4, #12]
 8003194:	f105 001c 	add.w	r0, r5, #28
 8003198:	f7fe fb22 	bl	80017e0 <st_dword>
					st_dword(dir + DIR_WrtTime, tm);				/* Update modified time */
 800319c:	490b      	ldr	r1, [pc, #44]	; (80031cc <f_sync+0x98>)
 800319e:	f105 0016 	add.w	r0, r5, #22
 80031a2:	f7fe fb1d 	bl	80017e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80031a6:	2100      	movs	r1, #0
 80031a8:	f105 0012 	add.w	r0, r5, #18
 80031ac:	f7fe fb14 	bl	80017d8 <st_word>
					fs->wflag = 1;
 80031b0:	9b01      	ldr	r3, [sp, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80031b6:	9801      	ldr	r0, [sp, #4]
 80031b8:	f7ff fccc 	bl	8002b54 <sync_fs>
 80031bc:	4603      	mov	r3, r0
					fp->flag &= ~_FA_MODIFIED;
 80031be:	7c22      	ldrb	r2, [r4, #16]
 80031c0:	f022 0220 	bic.w	r2, r2, #32
 80031c4:	7422      	strb	r2, [r4, #16]
 80031c6:	e7d7      	b.n	8003178 <f_sync+0x44>
					LEAVE_FF(fs, FR_DISK_ERR);
 80031c8:	2301      	movs	r3, #1
 80031ca:	e7d5      	b.n	8003178 <f_sync+0x44>
 80031cc:	48610000 	.word	0x48610000

080031d0 <f_close>:
{
 80031d0:	b510      	push	{r4, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80031d6:	f7ff ffad 	bl	8003134 <f_sync>
	if (res == FR_OK)
 80031da:	4603      	mov	r3, r0
 80031dc:	b110      	cbz	r0, 80031e4 <f_close+0x14>
}
 80031de:	4618      	mov	r0, r3
 80031e0:	b002      	add	sp, #8
 80031e2:	bd10      	pop	{r4, pc}
		res = validate(fp, &fs);	/* Lock volume */
 80031e4:	a901      	add	r1, sp, #4
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7fe fc64 	bl	8001ab4 <validate>
		if (res == FR_OK) {
 80031ec:	4603      	mov	r3, r0
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d1f5      	bne.n	80031de <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 80031f2:	2200      	movs	r2, #0
 80031f4:	6022      	str	r2, [r4, #0]
 80031f6:	e7f2      	b.n	80031de <f_close+0xe>

080031f8 <f_lseek>:
{
 80031f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	4604      	mov	r4, r0
 8003200:	460f      	mov	r7, r1
	res = validate(fp, &fs);		/* Check validity of the object */
 8003202:	a901      	add	r1, sp, #4
 8003204:	f7fe fc56 	bl	8001ab4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003208:	4606      	mov	r6, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	f040 80a2 	bne.w	8003354 <f_lseek+0x15c>
 8003210:	7c66      	ldrb	r6, [r4, #17]
 8003212:	2e00      	cmp	r6, #0
 8003214:	f040 809e 	bne.w	8003354 <f_lseek+0x15c>
		if (ofs > fp->obj.objsize				/* In read-only mode, clip offset with the file size */
 8003218:	68e3      	ldr	r3, [r4, #12]
 800321a:	42bb      	cmp	r3, r7
 800321c:	d204      	bcs.n	8003228 <f_lseek+0x30>
			 && !(fp->flag & FA_WRITE)
 800321e:	7c22      	ldrb	r2, [r4, #16]
 8003220:	f012 0f02 	tst.w	r2, #2
 8003224:	d100      	bne.n	8003228 <f_lseek+0x30>
			) ofs = fp->obj.objsize;
 8003226:	461f      	mov	r7, r3
		ifptr = fp->fptr;
 8003228:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 800322a:	2200      	movs	r2, #0
 800322c:	6162      	str	r2, [r4, #20]
		if (ofs) {
 800322e:	2f00      	cmp	r7, #0
 8003230:	d065      	beq.n	80032fe <f_lseek+0x106>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8003232:	9a01      	ldr	r2, [sp, #4]
 8003234:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8003238:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800323c:	b173      	cbz	r3, 800325c <f_lseek+0x64>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800323e:	1e7a      	subs	r2, r7, #1
 8003240:	fbb2 f2f8 	udiv	r2, r2, r8
 8003244:	3b01      	subs	r3, #1
 8003246:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 800324a:	428a      	cmp	r2, r1
 800324c:	d306      	bcc.n	800325c <f_lseek+0x64>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800324e:	f1c8 0200 	rsb	r2, r8, #0
 8003252:	4013      	ands	r3, r2
 8003254:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8003256:	1aff      	subs	r7, r7, r3
				clst = fp->clust;
 8003258:	69a5      	ldr	r5, [r4, #24]
 800325a:	e002      	b.n	8003262 <f_lseek+0x6a>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800325c:	68a5      	ldr	r5, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800325e:	b115      	cbz	r5, 8003266 <f_lseek+0x6e>
				fp->clust = clst;
 8003260:	61a5      	str	r5, [r4, #24]
			if (clst != 0) {
 8003262:	bb35      	cbnz	r5, 80032b2 <f_lseek+0xba>
 8003264:	e04c      	b.n	8003300 <f_lseek+0x108>
					clst = create_chain(&fp->obj, 0);
 8003266:	2100      	movs	r1, #0
 8003268:	4620      	mov	r0, r4
 800326a:	f7fe ff70 	bl	800214e <create_chain>
 800326e:	4605      	mov	r5, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8003270:	2801      	cmp	r0, #1
 8003272:	d004      	beq.n	800327e <f_lseek+0x86>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003278:	d004      	beq.n	8003284 <f_lseek+0x8c>
					fp->obj.sclust = clst;
 800327a:	60a0      	str	r0, [r4, #8]
 800327c:	e7f0      	b.n	8003260 <f_lseek+0x68>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800327e:	2602      	movs	r6, #2
 8003280:	7466      	strb	r6, [r4, #17]
 8003282:	e067      	b.n	8003354 <f_lseek+0x15c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003284:	2601      	movs	r6, #1
 8003286:	7466      	strb	r6, [r4, #17]
 8003288:	e064      	b.n	8003354 <f_lseek+0x15c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800328a:	4629      	mov	r1, r5
 800328c:	4620      	mov	r0, r4
 800328e:	f7fe fe1f 	bl	8001ed0 <get_fat>
 8003292:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003294:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003298:	d028      	beq.n	80032ec <f_lseek+0xf4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800329a:	2d01      	cmp	r5, #1
 800329c:	d929      	bls.n	80032f2 <f_lseek+0xfa>
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	42ab      	cmp	r3, r5
 80032a4:	d925      	bls.n	80032f2 <f_lseek+0xfa>
					fp->clust = clst;
 80032a6:	61a5      	str	r5, [r4, #24]
					fp->fptr += bcs;
 80032a8:	6963      	ldr	r3, [r4, #20]
 80032aa:	4443      	add	r3, r8
 80032ac:	6163      	str	r3, [r4, #20]
					ofs -= bcs;
 80032ae:	eba7 0708 	sub.w	r7, r7, r8
				while (ofs > bcs) {						/* Cluster following loop */
 80032b2:	4547      	cmp	r7, r8
 80032b4:	d90b      	bls.n	80032ce <f_lseek+0xd6>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80032b6:	7c23      	ldrb	r3, [r4, #16]
 80032b8:	f013 0f02 	tst.w	r3, #2
 80032bc:	d0e5      	beq.n	800328a <f_lseek+0x92>
						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 80032be:	4629      	mov	r1, r5
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7fe ff44 	bl	800214e <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80032c6:	4605      	mov	r5, r0
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d1e3      	bne.n	8003294 <f_lseek+0x9c>
							ofs = bcs; break;
 80032cc:	4647      	mov	r7, r8
				fp->fptr += ofs;
 80032ce:	6963      	ldr	r3, [r4, #20]
 80032d0:	443b      	add	r3, r7
 80032d2:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 80032d4:	f3c7 0308 	ubfx	r3, r7, #0, #9
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03f      	beq.n	800335c <f_lseek+0x164>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80032dc:	4629      	mov	r1, r5
 80032de:	9801      	ldr	r0, [sp, #4]
 80032e0:	f7fe faad 	bl	800183e <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80032e4:	b140      	cbz	r0, 80032f8 <f_lseek+0x100>
					nsect += (DWORD)(ofs / SS(fs));
 80032e6:	eb00 2557 	add.w	r5, r0, r7, lsr #9
 80032ea:	e009      	b.n	8003300 <f_lseek+0x108>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80032ec:	2601      	movs	r6, #1
 80032ee:	7466      	strb	r6, [r4, #17]
 80032f0:	e030      	b.n	8003354 <f_lseek+0x15c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80032f2:	2602      	movs	r6, #2
 80032f4:	7466      	strb	r6, [r4, #17]
 80032f6:	e02d      	b.n	8003354 <f_lseek+0x15c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80032f8:	2602      	movs	r6, #2
 80032fa:	7466      	strb	r6, [r4, #17]
 80032fc:	e02a      	b.n	8003354 <f_lseek+0x15c>
		fp->fptr = nsect = 0;
 80032fe:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8003300:	6963      	ldr	r3, [r4, #20]
 8003302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003306:	b1e3      	cbz	r3, 8003342 <f_lseek+0x14a>
 8003308:	69e2      	ldr	r2, [r4, #28]
 800330a:	42aa      	cmp	r2, r5
 800330c:	d019      	beq.n	8003342 <f_lseek+0x14a>
			if (fp->flag & _FA_DIRTY) {			/* Write-back dirty sector cache */
 800330e:	7c23      	ldrb	r3, [r4, #16]
 8003310:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003314:	d00b      	beq.n	800332e <f_lseek+0x136>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8003316:	2301      	movs	r3, #1
 8003318:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800331c:	9801      	ldr	r0, [sp, #4]
 800331e:	7840      	ldrb	r0, [r0, #1]
 8003320:	f002 fb0a 	bl	8005938 <disk_write>
 8003324:	b9e0      	cbnz	r0, 8003360 <f_lseek+0x168>
				fp->flag &= ~_FA_DIRTY;
 8003326:	7c23      	ldrb	r3, [r4, #16]
 8003328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332c:	7423      	strb	r3, [r4, #16]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 800332e:	2301      	movs	r3, #1
 8003330:	462a      	mov	r2, r5
 8003332:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003336:	9801      	ldr	r0, [sp, #4]
 8003338:	7840      	ldrb	r0, [r0, #1]
 800333a:	f002 faf8 	bl	800592e <disk_read>
 800333e:	b990      	cbnz	r0, 8003366 <f_lseek+0x16e>
			fp->sect = nsect;
 8003340:	61e5      	str	r5, [r4, #28]
		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8003342:	6963      	ldr	r3, [r4, #20]
 8003344:	68e2      	ldr	r2, [r4, #12]
 8003346:	4293      	cmp	r3, r2
 8003348:	d904      	bls.n	8003354 <f_lseek+0x15c>
			fp->obj.objsize = fp->fptr;
 800334a:	60e3      	str	r3, [r4, #12]
			fp->flag |= _FA_MODIFIED;
 800334c:	7c23      	ldrb	r3, [r4, #16]
 800334e:	f043 0320 	orr.w	r3, r3, #32
 8003352:	7423      	strb	r3, [r4, #16]
}
 8003354:	4630      	mov	r0, r6
 8003356:	b002      	add	sp, #8
 8003358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fp->fptr = nsect = 0;
 800335c:	2500      	movs	r5, #0
 800335e:	e7cf      	b.n	8003300 <f_lseek+0x108>
					ABORT(fs, FR_DISK_ERR);
 8003360:	2601      	movs	r6, #1
 8003362:	7466      	strb	r6, [r4, #17]
 8003364:	e7f6      	b.n	8003354 <f_lseek+0x15c>
				ABORT(fs, FR_DISK_ERR);
 8003366:	2601      	movs	r6, #1
 8003368:	7466      	strb	r6, [r4, #17]
 800336a:	e7f3      	b.n	8003354 <f_lseek+0x15c>

0800336c <f_stat>:
{
 800336c:	b530      	push	{r4, r5, lr}
 800336e:	b091      	sub	sp, #68	; 0x44
 8003370:	9001      	str	r0, [sp, #4]
 8003372:	460d      	mov	r5, r1
	res = find_volume(&path, &dj.obj.fs, 0);
 8003374:	2200      	movs	r2, #0
 8003376:	a905      	add	r1, sp, #20
 8003378:	a801      	add	r0, sp, #4
 800337a:	f7fe fc29 	bl	8001bd0 <find_volume>
	if (res == FR_OK) {
 800337e:	4604      	mov	r4, r0
 8003380:	b110      	cbz	r0, 8003388 <f_stat+0x1c>
}
 8003382:	4620      	mov	r0, r4
 8003384:	b011      	add	sp, #68	; 0x44
 8003386:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj);
 8003388:	ab02      	add	r3, sp, #8
 800338a:	930d      	str	r3, [sp, #52]	; 0x34
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <f_stat+0x50>)
 800338e:	930f      	str	r3, [sp, #60]	; 0x3c
		res = follow_path(&dj, path);	/* Follow the file path */
 8003390:	9901      	ldr	r1, [sp, #4]
 8003392:	a805      	add	r0, sp, #20
 8003394:	f7ff faf7 	bl	8002986 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8003398:	4604      	mov	r4, r0
 800339a:	2800      	cmp	r0, #0
 800339c:	d1f1      	bne.n	8003382 <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800339e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db06      	blt.n	80033b6 <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d0ea      	beq.n	8003382 <f_stat+0x16>
 80033ac:	4629      	mov	r1, r5
 80033ae:	a805      	add	r0, sp, #20
 80033b0:	f7ff f9b6 	bl	8002720 <get_fileinfo>
 80033b4:	e7e5      	b.n	8003382 <f_stat+0x16>
				res = FR_INVALID_NAME;
 80033b6:	2406      	movs	r4, #6
 80033b8:	e7e3      	b.n	8003382 <f_stat+0x16>
 80033ba:	bf00      	nop
 80033bc:	20000d18 	.word	0x20000d18

080033c0 <f_unlink>:
{
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b09d      	sub	sp, #116	; 0x74
 80033c4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80033c6:	2202      	movs	r2, #2
 80033c8:	a905      	add	r1, sp, #20
 80033ca:	a801      	add	r0, sp, #4
 80033cc:	f7fe fc00 	bl	8001bd0 <find_volume>
	dj.obj.fs = fs;
 80033d0:	9b05      	ldr	r3, [sp, #20]
 80033d2:	9311      	str	r3, [sp, #68]	; 0x44
	if (res == FR_OK) {
 80033d4:	4604      	mov	r4, r0
 80033d6:	b110      	cbz	r0, 80033de <f_unlink+0x1e>
}
 80033d8:	4620      	mov	r0, r4
 80033da:	b01d      	add	sp, #116	; 0x74
 80033dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_NAMBUF(dj);
 80033de:	ab02      	add	r3, sp, #8
 80033e0:	9319      	str	r3, [sp, #100]	; 0x64
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <f_unlink+0xb8>)
 80033e4:	931b      	str	r3, [sp, #108]	; 0x6c
		res = follow_path(&dj, path);		/* Follow the file path */
 80033e6:	9901      	ldr	r1, [sp, #4]
 80033e8:	a811      	add	r0, sp, #68	; 0x44
 80033ea:	f7ff facc 	bl	8002986 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 80033ee:	4604      	mov	r4, r0
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d1f1      	bne.n	80033d8 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80033f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80033f6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db1e      	blt.n	800343c <f_unlink+0x7c>
				if (dj.obj.attr & AM_RDO) {
 80033fe:	f89d 504a 	ldrb.w	r5, [sp, #74]	; 0x4a
 8003402:	f015 0f01 	tst.w	r5, #1
 8003406:	d12a      	bne.n	800345e <f_unlink+0x9e>
					dclst = ld_clust(fs, dj.dir);
 8003408:	9f05      	ldr	r7, [sp, #20]
 800340a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800340c:	4638      	mov	r0, r7
 800340e:	f7fe fa22 	bl	8001856 <ld_clust>
 8003412:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 8003414:	f015 0f10 	tst.w	r5, #16
 8003418:	d012      	beq.n	8003440 <f_unlink+0x80>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800341a:	9706      	str	r7, [sp, #24]
						sdj.obj.sclust = dclst;
 800341c:	9008      	str	r0, [sp, #32]
						res = dir_sdi(&sdj, 0);
 800341e:	2100      	movs	r1, #0
 8003420:	a806      	add	r0, sp, #24
 8003422:	f7fe fdbc 	bl	8001f9e <dir_sdi>
						if (res == FR_OK) {
 8003426:	4604      	mov	r4, r0
 8003428:	b950      	cbnz	r0, 8003440 <f_unlink+0x80>
							res = dir_read(&sdj, 0);			/* Read an item */
 800342a:	2100      	movs	r1, #0
 800342c:	a806      	add	r0, sp, #24
 800342e:	f7fe ffdc 	bl	80023ea <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8003432:	4604      	mov	r4, r0
 8003434:	b1b0      	cbz	r0, 8003464 <f_unlink+0xa4>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8003436:	2804      	cmp	r0, #4
 8003438:	d102      	bne.n	8003440 <f_unlink+0x80>
 800343a:	e003      	b.n	8003444 <f_unlink+0x84>
	DWORD dclst = 0;
 800343c:	2600      	movs	r6, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800343e:	2406      	movs	r4, #6
			if (res == FR_OK) {
 8003440:	2c00      	cmp	r4, #0
 8003442:	d1c9      	bne.n	80033d8 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8003444:	a811      	add	r0, sp, #68	; 0x44
 8003446:	f7ff f82e 	bl	80024a6 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800344a:	4604      	mov	r4, r0
 800344c:	b900      	cbnz	r0, 8003450 <f_unlink+0x90>
 800344e:	b95e      	cbnz	r6, 8003468 <f_unlink+0xa8>
				if (res == FR_OK) res = sync_fs(fs);
 8003450:	2c00      	cmp	r4, #0
 8003452:	d1c1      	bne.n	80033d8 <f_unlink+0x18>
 8003454:	9805      	ldr	r0, [sp, #20]
 8003456:	f7ff fb7d 	bl	8002b54 <sync_fs>
 800345a:	4604      	mov	r4, r0
 800345c:	e7bc      	b.n	80033d8 <f_unlink+0x18>
	DWORD dclst = 0;
 800345e:	2600      	movs	r6, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 8003460:	2407      	movs	r4, #7
 8003462:	e7ed      	b.n	8003440 <f_unlink+0x80>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8003464:	2407      	movs	r4, #7
 8003466:	e7eb      	b.n	8003440 <f_unlink+0x80>
					res = remove_chain(&dj.obj, dclst, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	4631      	mov	r1, r6
 800346c:	a811      	add	r0, sp, #68	; 0x44
 800346e:	f7fe fed0 	bl	8002212 <remove_chain>
 8003472:	4604      	mov	r4, r0
 8003474:	e7ec      	b.n	8003450 <f_unlink+0x90>
 8003476:	bf00      	nop
 8003478:	20000d18 	.word	0x20000d18

0800347c <f_gets>:
{
 800347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	4680      	mov	r8, r0
 8003484:	460e      	mov	r6, r1
 8003486:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 8003488:	4604      	mov	r4, r0
	int n = 0;
 800348a:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800348c:	e001      	b.n	8003492 <f_gets+0x16>
 800348e:	4622      	mov	r2, r4
 8003490:	4614      	mov	r4, r2
 8003492:	1e73      	subs	r3, r6, #1
 8003494:	42ab      	cmp	r3, r5
 8003496:	dd12      	ble.n	80034be <f_gets+0x42>
		f_read(fp, s, 1, &rc);
 8003498:	466b      	mov	r3, sp
 800349a:	2201      	movs	r2, #1
 800349c:	a901      	add	r1, sp, #4
 800349e:	4638      	mov	r0, r7
 80034a0:	f7ff fc86 	bl	8002db0 <f_read>
		if (rc != 1) break;
 80034a4:	9b00      	ldr	r3, [sp, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d109      	bne.n	80034be <f_gets+0x42>
		c = s[0];
 80034aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80034ae:	2b0d      	cmp	r3, #13
 80034b0:	d0ed      	beq.n	800348e <f_gets+0x12>
		*p++ = c;
 80034b2:	1c62      	adds	r2, r4, #1
 80034b4:	7023      	strb	r3, [r4, #0]
		n++;
 80034b6:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 80034b8:	2b0a      	cmp	r3, #10
 80034ba:	d1e9      	bne.n	8003490 <f_gets+0x14>
		*p++ = c;
 80034bc:	4614      	mov	r4, r2
	*p = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	7023      	strb	r3, [r4, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80034c2:	b11d      	cbz	r5, 80034cc <f_gets+0x50>
 80034c4:	4640      	mov	r0, r8
}
 80034c6:	b002      	add	sp, #8
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80034cc:	2000      	movs	r0, #0
 80034ce:	e7fa      	b.n	80034c6 <f_gets+0x4a>

080034d0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80034d0:	b510      	push	{r4, lr}
 80034d2:	b094      	sub	sp, #80	; 0x50
 80034d4:	4604      	mov	r4, r0
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80034d6:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	9303      	str	r3, [sp, #12]

	while (*str)			/* Put the string */
 80034de:	e003      	b.n	80034e8 <f_puts+0x18>
		putc_bfd(&pb, *str++);
 80034e0:	3401      	adds	r4, #1
 80034e2:	a801      	add	r0, sp, #4
 80034e4:	f7ff fdfe 	bl	80030e4 <putc_bfd>
	while (*str)			/* Put the string */
 80034e8:	7821      	ldrb	r1, [r4, #0]
 80034ea:	2900      	cmp	r1, #0
 80034ec:	d1f8      	bne.n	80034e0 <f_puts+0x10>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80034ee:	9a02      	ldr	r2, [sp, #8]
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	db0c      	blt.n	800350e <f_puts+0x3e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80034f4:	466b      	mov	r3, sp
 80034f6:	a904      	add	r1, sp, #16
 80034f8:	9801      	ldr	r0, [sp, #4]
 80034fa:	f7ff fd18 	bl	8002f2e <f_write>
 80034fe:	b948      	cbnz	r0, 8003514 <f_puts+0x44>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8003500:	9a02      	ldr	r2, [sp, #8]
 8003502:	9b00      	ldr	r3, [sp, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d108      	bne.n	800351a <f_puts+0x4a>
 8003508:	9803      	ldr	r0, [sp, #12]
	return EOF;
}
 800350a:	b014      	add	sp, #80	; 0x50
 800350c:	bd10      	pop	{r4, pc}
	return EOF;
 800350e:	f04f 30ff 	mov.w	r0, #4294967295
 8003512:	e7fa      	b.n	800350a <f_puts+0x3a>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e7f7      	b.n	800350a <f_puts+0x3a>
 800351a:	f04f 30ff 	mov.w	r0, #4294967295
 800351e:	e7f4      	b.n	800350a <f_puts+0x3a>

08003520 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8003520:	287f      	cmp	r0, #127	; 0x7f
 8003522:	d916      	bls.n	8003552 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8003524:	b131      	cbz	r1, 8003534 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003526:	28ff      	cmp	r0, #255	; 0xff
 8003528:	d812      	bhi.n	8003550 <ff_convert+0x30>
 800352a:	3880      	subs	r0, #128	; 0x80
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <ff_convert+0x34>)
 800352e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003532:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8003534:	2300      	movs	r3, #0
 8003536:	2b7f      	cmp	r3, #127	; 0x7f
 8003538:	d807      	bhi.n	800354a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800353a:	4a06      	ldr	r2, [pc, #24]	; (8003554 <ff_convert+0x34>)
 800353c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003540:	4282      	cmp	r2, r0
 8003542:	d002      	beq.n	800354a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8003544:	3301      	adds	r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	e7f5      	b.n	8003536 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800354a:	3380      	adds	r3, #128	; 0x80
 800354c:	b2d8      	uxtb	r0, r3
 800354e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003550:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8003552:	4770      	bx	lr
 8003554:	08005e8c 	.word	0x08005e8c

08003558 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8003558:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800355c:	d207      	bcs.n	800356e <ff_wtoupper+0x16>
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8003560:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8003562:	2a00      	cmp	r2, #0
 8003564:	d040      	beq.n	80035e8 <ff_wtoupper+0x90>
 8003566:	4290      	cmp	r0, r2
 8003568:	d33e      	bcc.n	80035e8 <ff_wtoupper+0x90>
{
 800356a:	b4f0      	push	{r4, r5, r6, r7}
 800356c:	e006      	b.n	800357c <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <ff_wtoupper+0x98>)
 8003570:	e7f6      	b.n	8003560 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8003572:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 8003574:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8003576:	b1ca      	cbz	r2, 80035ac <ff_wtoupper+0x54>
 8003578:	4290      	cmp	r0, r2
 800357a:	d317      	bcc.n	80035ac <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800357c:	1d1d      	adds	r5, r3, #4
 800357e:	885b      	ldrh	r3, [r3, #2]
 8003580:	0a19      	lsrs	r1, r3, #8
 8003582:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8003584:	189c      	adds	r4, r3, r2
 8003586:	42a0      	cmp	r0, r4
 8003588:	db04      	blt.n	8003594 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800358a:	2900      	cmp	r1, #0
 800358c:	d1f1      	bne.n	8003572 <ff_wtoupper+0x1a>
 800358e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003592:	e7ef      	b.n	8003574 <ff_wtoupper+0x1c>
			switch (cmd) {
 8003594:	2908      	cmp	r1, #8
 8003596:	d809      	bhi.n	80035ac <ff_wtoupper+0x54>
 8003598:	e8df f001 	tbb	[pc, r1]
 800359c:	13100a05 	.word	0x13100a05
 80035a0:	1f1c1916 	.word	0x1f1c1916
 80035a4:	22          	.byte	0x22
 80035a5:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80035a6:	1a86      	subs	r6, r0, r2
 80035a8:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 80035ac:	bcf0      	pop	{r4, r5, r6, r7}
 80035ae:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80035b0:	1a82      	subs	r2, r0, r2
 80035b2:	f002 0301 	and.w	r3, r2, #1
 80035b6:	1ac0      	subs	r0, r0, r3
 80035b8:	b280      	uxth	r0, r0
 80035ba:	e7f7      	b.n	80035ac <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 80035bc:	3810      	subs	r0, #16
 80035be:	b280      	uxth	r0, r0
 80035c0:	e7f4      	b.n	80035ac <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80035c2:	3820      	subs	r0, #32
 80035c4:	b280      	uxth	r0, r0
 80035c6:	e7f1      	b.n	80035ac <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80035c8:	3830      	subs	r0, #48	; 0x30
 80035ca:	b280      	uxth	r0, r0
 80035cc:	e7ee      	b.n	80035ac <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80035ce:	381a      	subs	r0, #26
 80035d0:	b280      	uxth	r0, r0
 80035d2:	e7eb      	b.n	80035ac <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 80035d4:	3008      	adds	r0, #8
 80035d6:	b280      	uxth	r0, r0
 80035d8:	e7e8      	b.n	80035ac <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 80035da:	3850      	subs	r0, #80	; 0x50
 80035dc:	b280      	uxth	r0, r0
 80035de:	e7e5      	b.n	80035ac <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80035e0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80035e4:	b280      	uxth	r0, r0
 80035e6:	e7e1      	b.n	80035ac <ff_wtoupper+0x54>
}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	08005f8c 	.word	0x08005f8c
 80035f0:	08006180 	.word	0x08006180

080035f4 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 80035f4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <CpuUserProgramStartHook+0x18>)
 80035f8:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_1) == 0)
 80035fa:	f013 0f02 	tst.w	r3, #2
 80035fe:	d101      	bne.n	8003604 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 8003600:	2000      	movs	r0, #0
  /* clean up the LED driver */
  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 8003602:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 8003604:	f000 f8d2 	bl	80037ac <LedBlinkExit>
  return BLT_TRUE;
 8003608:	2001      	movs	r0, #1
 800360a:	e7fa      	b.n	8003602 <CpuUserProgramStartHook+0xe>
 800360c:	40020400 	.word	0x40020400

08003610 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8003610:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8003612:	2064      	movs	r0, #100	; 0x64
 8003614:	f000 f89a 	bl	800374c <LedBlinkInit>
} /*** end of CopInitHook ***/
 8003618:	bd08      	pop	{r3, pc}

0800361a <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 800361a:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 800361c:	f000 f89c 	bl	8003758 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8003620:	bd08      	pop	{r3, pc}
	...

08003624 <FileIsFirmwareUpdateRequestedHook>:
**            storage, etc.
** \return    BLT_TRUE if a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsFirmwareUpdateRequestedHook(void)
{
 8003624:	b500      	push	{lr}
 8003626:	b0c7      	sub	sp, #284	; 0x11c
  FILINFO fileInfoObject = { 0 }; /* needs to be zeroed according to f_stat docs */;
 8003628:	f44f 728c 	mov.w	r2, #280	; 0x118
 800362c:	2100      	movs	r1, #0
 800362e:	4668      	mov	r0, sp
 8003630:	f002 fa56 	bl	8005ae0 <memset>
   * update is started. When successfully completed, the firmware file is deleted.
   * During the firmware update, progress information is written to a file called
   * bootlog.txt and additionally outputted on UART @57600 bps for debugging purposes.
   */
  /* check if firmware file is present and SD-card is accessible */
  if (f_stat(firmwareFilename, &fileInfoObject) == FR_OK) 
 8003634:	4669      	mov	r1, sp
 8003636:	4809      	ldr	r0, [pc, #36]	; (800365c <FileIsFirmwareUpdateRequestedHook+0x38>)
 8003638:	f7ff fe98 	bl	800336c <f_stat>
 800363c:	b940      	cbnz	r0, 8003650 <FileIsFirmwareUpdateRequestedHook+0x2c>
  {
    /* check if the filesize is valid and that it is not a directory */
    if ( (fileInfoObject.fsize > 0) && (!(fileInfoObject.fattrib & AM_DIR)) )
 800363e:	9b00      	ldr	r3, [sp, #0]
 8003640:	b153      	cbz	r3, 8003658 <FileIsFirmwareUpdateRequestedHook+0x34>
 8003642:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003646:	f013 0f10 	tst.w	r3, #16
 800364a:	d102      	bne.n	8003652 <FileIsFirmwareUpdateRequestedHook+0x2e>
    {
      /* all conditions are met to start a firmware update from local file storage */
      return BLT_TRUE;
 800364c:	2001      	movs	r0, #1
 800364e:	e000      	b.n	8003652 <FileIsFirmwareUpdateRequestedHook+0x2e>
    }
  }
  /* still here so no firmware update request is pending */  
  return BLT_FALSE;
 8003650:	2000      	movs	r0, #0
} /*** end of FileIsFirmwareUpdateRequestedHook ***/
 8003652:	b047      	add	sp, #284	; 0x11c
 8003654:	f85d fb04 	ldr.w	pc, [sp], #4
  return BLT_FALSE;
 8003658:	2000      	movs	r0, #0
 800365a:	e7fa      	b.n	8003652 <FileIsFirmwareUpdateRequestedHook+0x2e>
 800365c:	0800624c 	.word	0x0800624c

08003660 <FileGetFirmwareFilenameHook>:
**
****************************************************************************************/
const blt_char *FileGetFirmwareFilenameHook(void)
{
  return firmwareFilename;
} /*** end of FileGetFirmwareFilenameHook ***/
 8003660:	4800      	ldr	r0, [pc, #0]	; (8003664 <FileGetFirmwareFilenameHook+0x4>)
 8003662:	4770      	bx	lr
 8003664:	0800624c 	.word	0x0800624c

08003668 <FileFirmwareUpdateStartedHook>:
**            update from local storage just started. 
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateStartedHook(void)
{
 8003668:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* create/overwrite the logfile */
  logfile.canUse = BLT_FALSE;
 800366a:	4807      	ldr	r0, [pc, #28]	; (8003688 <FileFirmwareUpdateStartedHook+0x20>)
 800366c:	2300      	movs	r3, #0
 800366e:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  if (f_open(&logfile.handle, "/bootlog.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8003672:	220a      	movs	r2, #10
 8003674:	4905      	ldr	r1, [pc, #20]	; (800368c <FileFirmwareUpdateStartedHook+0x24>)
 8003676:	f7ff fadf 	bl	8002c38 <f_open>
 800367a:	b918      	cbnz	r0, 8003684 <FileFirmwareUpdateStartedHook+0x1c>
  {
    logfile.canUse = BLT_TRUE;
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <FileFirmwareUpdateStartedHook+0x20>)
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  }
  #endif
} /*** end of FileFirmwareUpdateStartedHook ***/
 8003684:	bd08      	pop	{r3, pc}
 8003686:	bf00      	nop
 8003688:	20000f18 	.word	0x20000f18
 800368c:	0800623c 	.word	0x0800623c

08003690 <FileFirmwareUpdateCompletedHook>:
**            update was successfully completed.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateCompletedHook(void)
{
 8003690:	b510      	push	{r4, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  blt_int32u timeoutTime;

  /* close the log file */
  if (logfile.canUse == BLT_TRUE)
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <FileFirmwareUpdateCompletedHook+0x38>)
 8003694:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003698:	2b01      	cmp	r3, #1
 800369a:	d010      	beq.n	80036be <FileFirmwareUpdateCompletedHook+0x2e>
    f_close(&logfile.handle);
  }
  /* wait for all logging related transmission to complete with a maximum wait time of
   * 100ms.
   */
  timeoutTime = TimerGet() + 100;
 800369c:	f7fd fa0c 	bl	8000ab8 <TimerGet>
 80036a0:	f100 0464 	add.w	r4, r0, #100	; 0x64
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <FileFirmwareUpdateCompletedHook+0x3c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
  while (LL_USART_IsActiveFlag_TC(USART6) == 0)
 80036a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036ac:	d103      	bne.n	80036b6 <FileFirmwareUpdateCompletedHook+0x26>
  {
    /* check for timeout */
    if (TimerGet() > timeoutTime)
 80036ae:	f7fd fa03 	bl	8000ab8 <TimerGet>
 80036b2:	42a0      	cmp	r0, r4
 80036b4:	d9f6      	bls.n	80036a4 <FileFirmwareUpdateCompletedHook+0x14>
      break;
    }
  }
  #endif
  /* now delete the firmware file from the disk since the update was successful */
  f_unlink(firmwareFilename);
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <FileFirmwareUpdateCompletedHook+0x40>)
 80036b8:	f7ff fe82 	bl	80033c0 <f_unlink>
} /*** end of FileFirmwareUpdateCompletedHook ***/
 80036bc:	bd10      	pop	{r4, pc}
    f_close(&logfile.handle);
 80036be:	4802      	ldr	r0, [pc, #8]	; (80036c8 <FileFirmwareUpdateCompletedHook+0x38>)
 80036c0:	f7ff fd86 	bl	80031d0 <f_close>
 80036c4:	e7ea      	b.n	800369c <FileFirmwareUpdateCompletedHook+0xc>
 80036c6:	bf00      	nop
 80036c8:	20000f18 	.word	0x20000f18
 80036cc:	40011400 	.word	0x40011400
 80036d0:	0800624c 	.word	0x0800624c

080036d4 <FileFirmwareUpdateErrorHook>:
**            update. Refer to <file.h> for a list of available error codes.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateErrorHook(blt_int8u error_code)
{
 80036d4:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* error detected which stops the firmware update, so close the log file */
  if (logfile.canUse == BLT_TRUE)
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <FileFirmwareUpdateErrorHook+0x18>)
 80036d8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d000      	beq.n	80036e2 <FileFirmwareUpdateErrorHook+0xe>
  {
    f_close(&logfile.handle);
  }
  #endif
} /*** end of FileFirmwareUpdateErrorHook ***/
 80036e0:	bd08      	pop	{r3, pc}
    f_close(&logfile.handle);
 80036e2:	4802      	ldr	r0, [pc, #8]	; (80036ec <FileFirmwareUpdateErrorHook+0x18>)
 80036e4:	f7ff fd74 	bl	80031d0 <f_close>
} /*** end of FileFirmwareUpdateErrorHook ***/
 80036e8:	e7fa      	b.n	80036e0 <FileFirmwareUpdateErrorHook+0xc>
 80036ea:	bf00      	nop
 80036ec:	20000f18 	.word	0x20000f18

080036f0 <FileFirmwareUpdateLogHook>:
** \param     info_string Pointer to a character array with the log entry info.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateLogHook(blt_char *info_string)
{
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4605      	mov	r5, r0
  blt_int32u timeoutTime;

  /* write the string to the log file */
  if (logfile.canUse == BLT_TRUE)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <FileFirmwareUpdateLogHook+0x54>)
 80036f6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10c      	bne.n	8003718 <FileFirmwareUpdateLogHook+0x28>
  {
    if (f_puts(info_string, &logfile.handle) < 0)
 80036fe:	4911      	ldr	r1, [pc, #68]	; (8003744 <FileFirmwareUpdateLogHook+0x54>)
 8003700:	f7ff fee6 	bl	80034d0 <f_puts>
 8003704:	2800      	cmp	r0, #0
 8003706:	da07      	bge.n	8003718 <FileFirmwareUpdateLogHook+0x28>
    {
      logfile.canUse = BLT_FALSE;
 8003708:	480e      	ldr	r0, [pc, #56]	; (8003744 <FileFirmwareUpdateLogHook+0x54>)
 800370a:	2300      	movs	r3, #0
 800370c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
      f_close(&logfile.handle);
 8003710:	f7ff fd5e 	bl	80031d0 <f_close>
 8003714:	e000      	b.n	8003718 <FileFirmwareUpdateLogHook+0x28>
      {
        break;
      }
    }
    /* point to the next character in the string */
    info_string++;
 8003716:	3501      	adds	r5, #1
  while(*info_string != '\0')
 8003718:	782b      	ldrb	r3, [r5, #0]
 800371a:	b18b      	cbz	r3, 8003740 <FileFirmwareUpdateLogHook+0x50>
  USARTx->DR = Value;
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <FileFirmwareUpdateLogHook+0x58>)
 800371e:	6053      	str	r3, [r2, #4]
    timeoutTime = TimerGet() + 10;
 8003720:	f7fd f9ca 	bl	8000ab8 <TimerGet>
 8003724:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <FileFirmwareUpdateLogHook+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
    while (LL_USART_IsActiveFlag_TXE(USART6) == 0)
 800372c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003730:	d1f1      	bne.n	8003716 <FileFirmwareUpdateLogHook+0x26>
      CopService();
 8003732:	f7fd fa99 	bl	8000c68 <CopService>
      if (TimerGet() > timeoutTime)
 8003736:	f7fd f9bf 	bl	8000ab8 <TimerGet>
 800373a:	42a0      	cmp	r0, r4
 800373c:	d9f4      	bls.n	8003728 <FileFirmwareUpdateLogHook+0x38>
 800373e:	e7ea      	b.n	8003716 <FileFirmwareUpdateLogHook+0x26>
  }
} /*** end of FileFirmwareUpdateLogHook ***/
 8003740:	bd38      	pop	{r3, r4, r5, pc}
 8003742:	bf00      	nop
 8003744:	20000f18 	.word	0x20000f18
 8003748:	40011400 	.word	0x40011400

0800374c <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <LedBlinkInit+0x8>)
 800374e:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20001144 	.word	0x20001144

08003758 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8003758:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 800375a:	f7fd f9ad 	bl	8000ab8 <TimerGet>
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <LedBlinkTask+0x44>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4298      	cmp	r0, r3
 8003764:	d310      	bcc.n	8003788 <LedBlinkTask+0x30>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <LedBlinkTask+0x48>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b973      	cbnz	r3, 800378a <LedBlinkTask+0x32>
    {
      ledOn = BLT_TRUE;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <LedBlinkTask+0x48>)
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <LedBlinkTask+0x4c>)
 8003774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003778:	619a      	str	r2, [r3, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800377a:	f7fd f99d 	bl	8000ab8 <TimerGet>
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <LedBlinkTask+0x50>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	4418      	add	r0, r3
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <LedBlinkTask+0x44>)
 8003786:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 8003788:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <LedBlinkTask+0x48>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <LedBlinkTask+0x4c>)
 8003792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003796:	619a      	str	r2, [r3, #24]
 8003798:	e7ef      	b.n	800377a <LedBlinkTask+0x22>
 800379a:	bf00      	nop
 800379c:	20001148 	.word	0x20001148
 80037a0:	20001146 	.word	0x20001146
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	20001144 	.word	0x20001144

080037ac <LedBlinkExit>:
 80037ac:	4b02      	ldr	r3, [pc, #8]	; (80037b8 <LedBlinkExit+0xc>)
 80037ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b2:	619a      	str	r2, [r3, #24]
****************************************************************************************/
void LedBlinkExit(void)
{
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
} /*** end of LedBlinkExit ***/
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40020c00 	.word	0x40020c00

080037bc <SystemClock_Config>:
**            subsystem.
** \return    none.
**
****************************************************************************************/
static void SystemClock_Config(void)
{
 80037bc:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80037be:	4a2b      	ldr	r2, [pc, #172]	; (800386c <SystemClock_Config+0xb0>)
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	f023 030f 	bic.w	r3, r3, #15
 80037c6:	f043 0305 	orr.w	r3, r3, #5
 80037ca:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80037cc:	6813      	ldr	r3, [r2, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
  /* Set flash latency. */
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
  /* Verify flash latency setting. */
  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d144      	bne.n	8003860 <SystemClock_Config+0xa4>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80037d6:	4a26      	ldr	r2, [pc, #152]	; (8003870 <SystemClock_Config+0xb4>)
 80037d8:	6813      	ldr	r3, [r2, #0]
 80037da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037de:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80037e0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <SystemClock_Config+0xb8>)
 80037ee:	681b      	ldr	r3, [r3, #0]

  /* Enable the HSE clock. */
  LL_RCC_HSE_Enable();

  /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80037f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037f4:	d0fa      	beq.n	80037ec <SystemClock_Config+0x30>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <SystemClock_Config+0xb8>)
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	491f      	ldr	r1, [pc, #124]	; (8003878 <SystemClock_Config+0xbc>)
 80037fc:	4011      	ands	r1, r2
 80037fe:	4a1f      	ldr	r2, [pc, #124]	; (800387c <SystemClock_Config+0xc0>)
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800380a:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003812:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003814:	4b17      	ldr	r3, [pc, #92]	; (8003874 <SystemClock_Config+0xb8>)
 8003816:	681b      	ldr	r3, [r3, #0]
  /* Configure and enable the PLL. */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

  /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003818:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800381c:	d0fa      	beq.n	8003814 <SystemClock_Config+0x58>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <SystemClock_Config+0xb8>)
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003826:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800382e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003832:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800383a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	f022 0203 	bic.w	r2, r2, #3
 8003846:	f042 0202 	orr.w	r2, r2, #2
 800384a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <SystemClock_Config+0xb8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

  /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003854:	2b08      	cmp	r3, #8
 8003856:	d1f9      	bne.n	800384c <SystemClock_Config+0x90>
  {
    ;
  }
  /* Update the system clock speed setting. */
  LL_SetSystemCoreClock(BOOT_CPU_SYSTEM_SPEED_KHZ * 1000u);
 8003858:	4809      	ldr	r0, [pc, #36]	; (8003880 <SystemClock_Config+0xc4>)
 800385a:	f001 ffab 	bl	80057b4 <LL_SetSystemCoreClock>
} /*** end of SystemClock_Config ***/
 800385e:	bd08      	pop	{r3, pc}
    ASSERT_RT(BLT_FALSE);
 8003860:	216b      	movs	r1, #107	; 0x6b
 8003862:	4808      	ldr	r0, [pc, #32]	; (8003884 <SystemClock_Config+0xc8>)
 8003864:	f7fd f935 	bl	8000ad2 <AssertFailure>
 8003868:	e7b5      	b.n	80037d6 <SystemClock_Config+0x1a>
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40007000 	.word	0x40007000
 8003874:	40023800 	.word	0x40023800
 8003878:	ffbf8000 	.word	0xffbf8000
 800387c:	00405408 	.word	0x00405408
 8003880:	0a037a00 	.word	0x0a037a00
 8003884:	0800625c 	.word	0x0800625c

08003888 <Init>:
{
 8003888:	b508      	push	{r3, lr}
  HAL_Init();
 800388a:	f000 f91b 	bl	8003ac4 <HAL_Init>
  SystemClock_Config();
 800388e:	f7ff ff95 	bl	80037bc <SystemClock_Config>
} /*** end of Init ***/
 8003892:	bd08      	pop	{r3, pc}

08003894 <main>:
{
 8003894:	b508      	push	{r3, lr}
  Init();
 8003896:	f7ff fff7 	bl	8003888 <Init>
  BootInit();
 800389a:	f7fd f963 	bl	8000b64 <BootInit>
    BootTask();
 800389e:	f7fd f971 	bl	8000b84 <BootTask>
 80038a2:	e7fc      	b.n	800389e <main+0xa>

080038a4 <HAL_MspInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspInit(void)
{
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_MspInit+0xd4>)
 80038aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80038b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038b8:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
 80038ba:	9a07      	ldr	r2, [sp, #28]
  SET_BIT(RCC->APB1ENR, Periphs);
 80038bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80038ca:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 80038cc:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d8:	f002 0201 	and.w	r2, r2, #1
 80038dc:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80038de:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e2:	f042 0202 	orr.w	r2, r2, #2
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ea:	f002 0202 	and.w	r2, r2, #2
 80038ee:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80038f0:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f4:	f042 0204 	orr.w	r2, r2, #4
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fc:	f002 0204 	and.w	r2, r2, #4
 8003900:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8003902:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	f042 0208 	orr.w	r2, r2, #8
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	f002 0208 	and.w	r2, r2, #8
 8003912:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003914:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003918:	f042 0210 	orr.w	r2, r2, #16
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003926:	9b01      	ldr	r3, [sp, #4]
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_CAN1);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_CAN2);
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8003928:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800392c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800392e:	2301      	movs	r3, #1
 8003930:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003932:	2400      	movs	r4, #0
 8003934:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003936:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003938:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800393a:	4d10      	ldr	r5, [pc, #64]	; (800397c <HAL_MspInit+0xd8>)
 800393c:	a908      	add	r1, sp, #32
 800393e:	4628      	mov	r0, r5
 8003940:	f001 f986 	bl	8004c50 <LL_GPIO_Init>
 8003944:	61ae      	str	r6, [r5, #24]
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003946:	2502      	movs	r5, #2
 8003948:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800394a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800394c:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394e:	a908      	add	r1, sp, #32
 8003950:	480b      	ldr	r0, [pc, #44]	; (8003980 <HAL_MspInit+0xdc>)
 8003952:	f001 f97d 	bl	8004c50 <LL_GPIO_Init>

#if (BOOT_COM_RS232_ENABLE > 0) || (BOOT_FILE_LOGGING_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8003956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800395a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800395c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003962:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003964:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003966:	2307      	movs	r3, #7
 8003968:	930d      	str	r3, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	a908      	add	r1, sp, #32
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <HAL_MspInit+0xe0>)
 800396e:	f001 f96f 	bl	8004c50 <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#endif
} /*** end of HAL_MspInit ***/
 8003972:	b00e      	add	sp, #56	; 0x38
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40020400 	.word	0x40020400
 8003984:	40020000 	.word	0x40020000

08003988 <HAL_MspDeInit>:
**            interrupt).
** \return    none.
**
****************************************************************************************/
void HAL_MspDeInit(void)
{
 8003988:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 800398a:	f001 f9f7 	bl	8004d7c <LL_RCC_DeInit>
  
  /* Deinit used GPIOs. */

  LL_GPIO_DeInit(GPIOA);
 800398e:	4815      	ldr	r0, [pc, #84]	; (80039e4 <HAL_MspDeInit+0x5c>)
 8003990:	f001 f8c2 	bl	8004b18 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 8003994:	4814      	ldr	r0, [pc, #80]	; (80039e8 <HAL_MspDeInit+0x60>)
 8003996:	f001 f8bf 	bl	8004b18 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOC);
 800399a:	4814      	ldr	r0, [pc, #80]	; (80039ec <HAL_MspDeInit+0x64>)
 800399c:	f001 f8bc 	bl	8004b18 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOD);
 80039a0:	4813      	ldr	r0, [pc, #76]	; (80039f0 <HAL_MspDeInit+0x68>)
 80039a2:	f001 f8b9 	bl	8004b18 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_MspDeInit+0x6c>)
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	f022 0210 	bic.w	r2, r2, #16
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80039b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	f022 0202 	bic.w	r2, r2, #2
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
 80039c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
 80039c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ca:	f022 0208 	bic.w	r2, r2, #8
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80039d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039de:	645a      	str	r2, [r3, #68]	; 0x44
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOD);

  /* SYSCFG and PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
} /*** end of HAL_MspDeInit ***/
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40023800 	.word	0x40023800

080039f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039fe:	e003      	b.n	8003a08 <LoopCopyDataInit>

08003a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a06:	3104      	adds	r1, #4

08003a08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a08:	480b      	ldr	r0, [pc, #44]	; (8003a38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a10:	d3f6      	bcc.n	8003a00 <CopyDataInit>
  ldr  r2, =_sbss
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a14:	e002      	b.n	8003a1c <LoopFillZerobss>

08003a16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a18:	f842 3b04 	str.w	r3, [r2], #4

08003a1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a20:	d3f9      	bcc.n	8003a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a22:	f002 f80b 	bl	8005a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a26:	f002 f817 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2a:	f7ff ff33 	bl	8003894 <main>
  bx  lr    
 8003a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a34:	0800639c 	.word	0x0800639c
  ldr  r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a3c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003a40:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003a44:	200011f4 	.word	0x200011f4

08003a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a48:	e7fe      	b.n	8003a48 <ADC_IRQHandler>
	...

08003a4c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003a4c:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_DeInit+0x28>)
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003a56:	2400      	movs	r4, #0
 8003a58:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003a5c:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003a5e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003a60:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003a62:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003a64:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003a66:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003a68:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003a6a:	f7ff ff8d 	bl	8003988 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8003a6e:	4620      	mov	r0, r4
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <HAL_InitTick+0x40>)
 8003a7e:	7818      	ldrb	r0, [r3, #0]
 8003a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a84:	fbb3 f3f0 	udiv	r3, r3, r0
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <HAL_InitTick+0x44>)
 8003a8a:	6810      	ldr	r0, [r2, #0]
 8003a8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a90:	f000 f88c 	bl	8003bac <HAL_SYSTICK_Config>
 8003a94:	b968      	cbnz	r0, 8003ab2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a96:	2c0f      	cmp	r4, #15
 8003a98:	d901      	bls.n	8003a9e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	e00a      	b.n	8003ab4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa6:	f000 f84d 	bl	8003b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_InitTick+0x48>)
 8003aac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
}
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000001 	.word	0x20000001
 8003abc:	2000000c 	.word	0x2000000c
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <HAL_Init>:
{
 8003ac4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_Init+0x30>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ade:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f000 f81d 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff ffc6 	bl	8003a78 <HAL_InitTick>
  HAL_MspInit();
 8003aec:	f7ff feda 	bl	80038a4 <HAL_MspInit>
}
 8003af0:	2000      	movs	r0, #0
 8003af2:	bd08      	pop	{r3, pc}
 8003af4:	40023c00 	.word	0x40023c00

08003af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7fc ffe4 	bl	8000ac8 <HAL_GetTick>
 8003b00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b02:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003b06:	d002      	beq.n	8003b0e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_Delay+0x24>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b0e:	f7fc ffdb 	bl	8000ac8 <HAL_GetTick>
 8003b12:	1b40      	subs	r0, r0, r5
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d3fa      	bcc.n	8003b0e <HAL_Delay+0x16>
  {
  }
}
 8003b18:	bd38      	pop	{r3, r4, r5, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000001 	.word	0x20000001

08003b20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b20:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b2c:	0200      	lsls	r0, r0, #8
 8003b2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b32:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8003b34:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003b38:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003b3c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b44:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_NVIC_SetPriority+0x60>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4e:	f1c3 0407 	rsb	r4, r3, #7
 8003b52:	2c04      	cmp	r4, #4
 8003b54:	bf28      	it	cs
 8003b56:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b58:	1d1d      	adds	r5, r3, #4
 8003b5a:	2d06      	cmp	r5, #6
 8003b5c:	d918      	bls.n	8003b90 <HAL_NVIC_SetPriority+0x4c>
 8003b5e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 35ff 	mov.w	r5, #4294967295
 8003b64:	fa05 f404 	lsl.w	r4, r5, r4
 8003b68:	ea21 0104 	bic.w	r1, r1, r4
 8003b6c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b6e:	fa05 f303 	lsl.w	r3, r5, r3
 8003b72:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b76:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	db0b      	blt.n	8003b94 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	0109      	lsls	r1, r1, #4
 8003b7e:	b2c9      	uxtb	r1, r1
 8003b80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003b84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003b88:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b8c:	bc30      	pop	{r4, r5}
 8003b8e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b90:	2300      	movs	r3, #0
 8003b92:	e7e5      	b.n	8003b60 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	f000 000f 	and.w	r0, r0, #15
 8003b98:	0109      	lsls	r1, r1, #4
 8003b9a:	b2c9      	uxtb	r1, r1
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_NVIC_SetPriority+0x64>)
 8003b9e:	5419      	strb	r1, [r3, r0]
 8003ba0:	e7f4      	b.n	8003b8c <HAL_NVIC_SetPriority+0x48>
 8003ba2:	bf00      	nop
 8003ba4:	e000ed00 	.word	0xe000ed00
 8003ba8:	e000ed14 	.word	0xe000ed14

08003bac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bac:	3801      	subs	r0, #1
 8003bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003bb2:	d20a      	bcs.n	8003bca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_SYSTICK_Config+0x24>)
 8003bb6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <HAL_SYSTICK_Config+0x28>)
 8003bba:	21f0      	movs	r1, #240	; 0xf0
 8003bbc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003bca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e010 	.word	0xe000e010
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003bd8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <FLASH_Program_DoubleWord+0x2c>)
 8003bdc:	690c      	ldr	r4, [r1, #16]
 8003bde:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8003be2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003be4:	690c      	ldr	r4, [r1, #16]
 8003be6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8003bea:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bec:	690c      	ldr	r4, [r1, #16]
 8003bee:	f044 0401 	orr.w	r4, r4, #1
 8003bf2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003bf4:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003bf6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003bfa:	6043      	str	r3, [r0, #4]
}
 8003bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <FLASH_Program_Word+0x20>)
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c10:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8003c22:	6001      	str	r1, [r0, #0]
}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <FLASH_Program_HalfWord+0x20>)
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c34:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8003c46:	8001      	strh	r1, [r0, #0]
}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023c00 	.word	0x40023c00

08003c50 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <FLASH_Program_Byte+0x1c>)
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c58:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8003c66:	7001      	strb	r1, [r0, #0]
}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00

08003c70 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f013 0f10 	tst.w	r3, #16
 8003c78:	d007      	beq.n	8003c8a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003c7a:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <FLASH_SetErrorCode+0x88>)
 8003c7c:	69d3      	ldr	r3, [r2, #28]
 8003c7e:	f043 0310 	orr.w	r3, r3, #16
 8003c82:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003c86:	2210      	movs	r2, #16
 8003c88:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f013 0f20 	tst.w	r3, #32
 8003c92:	d007      	beq.n	8003ca4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <FLASH_SetErrorCode+0x88>)
 8003c96:	69d3      	ldr	r3, [r2, #28]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cac:	d007      	beq.n	8003cbe <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <FLASH_SetErrorCode+0x88>)
 8003cb0:	69d3      	ldr	r3, [r2, #28]
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cc6:	d007      	beq.n	8003cd8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <FLASH_SetErrorCode+0x88>)
 8003cca:	69d3      	ldr	r3, [r2, #28]
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f013 0f02 	tst.w	r3, #2
 8003ce0:	d007      	beq.n	8003cf2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <FLASH_SetErrorCode+0x88>)
 8003ce4:	69d3      	ldr	r3, [r2, #28]
 8003ce6:	f043 0320 	orr.w	r3, r3, #32
 8003cea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003cec:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <FLASH_SetErrorCode+0x84>)
 8003cee:	2202      	movs	r2, #2
 8003cf0:	60da      	str	r2, [r3, #12]
  }
}
 8003cf2:	4770      	bx	lr
 8003cf4:	40023c00 	.word	0x40023c00
 8003cf8:	20001150 	.word	0x20001150

08003cfc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_FLASH_Unlock+0x28>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db01      	blt.n	8003d08 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2000      	movs	r0, #0
 8003d06:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_FLASH_Unlock+0x28>)
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <HAL_FLASH_Unlock+0x2c>)
 8003d0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d0e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003d12:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db01      	blt.n	8003d1e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	4770      	bx	lr
      status = HAL_ERROR;
 8003d1e:	2001      	movs	r0, #1
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	45670123 	.word	0x45670123

08003d2c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8003d2c:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <HAL_FLASH_Lock+0x10>)
 8003d2e:	6913      	ldr	r3, [r2, #16]
 8003d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d34:	6113      	str	r3, [r2, #16]
}
 8003d36:	2000      	movs	r0, #0
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00

08003d40 <FLASH_WaitForLastOperation>:
{ 
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d44:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <FLASH_WaitForLastOperation+0x5c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8003d4a:	f7fc febd 	bl	8000ac8 <HAL_GetTick>
 8003d4e:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <FLASH_WaitForLastOperation+0x60>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d58:	d00a      	beq.n	8003d70 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8003d5a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003d5e:	d0f7      	beq.n	8003d50 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d60:	b1cc      	cbz	r4, 8003d96 <FLASH_WaitForLastOperation+0x56>
 8003d62:	f7fc feb1 	bl	8000ac8 <HAL_GetTick>
 8003d66:	1b40      	subs	r0, r0, r5
 8003d68:	42a0      	cmp	r0, r4
 8003d6a:	d9f1      	bls.n	8003d50 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8003d6c:	2003      	movs	r0, #3
 8003d6e:	e00d      	b.n	8003d8c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <FLASH_WaitForLastOperation+0x60>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f013 0f01 	tst.w	r3, #1
 8003d78:	d002      	beq.n	8003d80 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <FLASH_WaitForLastOperation+0x60>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <FLASH_WaitForLastOperation+0x60>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8003d88:	d101      	bne.n	8003d8e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8003d8a:	2000      	movs	r0, #0
}  
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8003d8e:	f7ff ff6f 	bl	8003c70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d92:	2001      	movs	r0, #1
 8003d94:	e7fa      	b.n	8003d8c <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8003d96:	2003      	movs	r0, #3
 8003d98:	e7f8      	b.n	8003d8c <FLASH_WaitForLastOperation+0x4c>
 8003d9a:	bf00      	nop
 8003d9c:	20001150 	.word	0x20001150
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_FLASH_Program>:
{
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003da6:	4c1d      	ldr	r4, [pc, #116]	; (8003e1c <HAL_FLASH_Program+0x78>)
 8003da8:	7e24      	ldrb	r4, [r4, #24]
 8003daa:	2c01      	cmp	r4, #1
 8003dac:	d034      	beq.n	8003e18 <HAL_FLASH_Program+0x74>
 8003dae:	461f      	mov	r7, r3
 8003db0:	4616      	mov	r6, r2
 8003db2:	460d      	mov	r5, r1
 8003db4:	4604      	mov	r4, r0
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_FLASH_Program+0x78>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc0:	f7ff ffbe 	bl	8003d40 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003dc4:	4601      	mov	r1, r0
 8003dc6:	b998      	cbnz	r0, 8003df0 <HAL_FLASH_Program+0x4c>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003dc8:	b1bc      	cbz	r4, 8003dfa <HAL_FLASH_Program+0x56>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dca:	2c01      	cmp	r4, #1
 8003dcc:	d01a      	beq.n	8003e04 <HAL_FLASH_Program+0x60>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003dce:	2c02      	cmp	r4, #2
 8003dd0:	d01d      	beq.n	8003e0e <HAL_FLASH_Program+0x6a>
      FLASH_Program_DoubleWord(Address, Data);
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7ff fefe 	bl	8003bd8 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de0:	f7ff ffae 	bl	8003d40 <FLASH_WaitForLastOperation>
 8003de4:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8003de6:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_FLASH_Program+0x7c>)
 8003de8:	6913      	ldr	r3, [r2, #16]
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_FLASH_Program+0x78>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	761a      	strb	r2, [r3, #24]
}
 8003df6:	4608      	mov	r0, r1
 8003df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003dfa:	b2f1      	uxtb	r1, r6
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff ff27 	bl	8003c50 <FLASH_Program_Byte>
 8003e02:	e7eb      	b.n	8003ddc <HAL_FLASH_Program+0x38>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e04:	b2b1      	uxth	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	f7ff ff10 	bl	8003c2c <FLASH_Program_HalfWord>
 8003e0c:	e7e6      	b.n	8003ddc <HAL_FLASH_Program+0x38>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7ff fef9 	bl	8003c08 <FLASH_Program_Word>
 8003e16:	e7e1      	b.n	8003ddc <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8003e18:	2102      	movs	r1, #2
 8003e1a:	e7ec      	b.n	8003df6 <HAL_FLASH_Program+0x52>
 8003e1c:	20001150 	.word	0x20001150
 8003e20:	40023c00 	.word	0x40023c00

08003e24 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <FLASH_MassErase+0x20>)
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e2c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	f042 0204 	orr.w	r2, r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8003e3c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003e40:	6118      	str	r0, [r3, #16]
}
 8003e42:	4770      	bx	lr
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003e48:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003e4a:	b149      	cbz	r1, 8003e60 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003e4c:	2901      	cmp	r1, #1
 8003e4e:	d021      	beq.n	8003e94 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003e50:	2902      	cmp	r1, #2
 8003e52:	d002      	beq.n	8003e5a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003e54:	f44f 7440 	mov.w	r4, #768	; 0x300
 8003e58:	e003      	b.n	8003e62 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8003e5a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003e5e:	e000      	b.n	8003e62 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8003e60:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e62:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <FLASH_Erase_Sector+0x54>)
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003e6a:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	4322      	orrs	r2, r4
 8003e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8003e80:	f040 0002 	orr.w	r0, r0, #2
 8003e84:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e8c:	611a      	str	r2, [r3, #16]
}
 8003e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e92:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003e94:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003e98:	e7e3      	b.n	8003e62 <FLASH_Erase_Sector+0x1a>
 8003e9a:	bf00      	nop
 8003e9c:	40023c00 	.word	0x40023c00

08003ea0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <FLASH_FlushCaches+0x5c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003ea8:	d010      	beq.n	8003ecc <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <FLASH_FlushCaches+0x5c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eca:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <FLASH_FlushCaches+0x5c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ed4:	d010      	beq.n	8003ef8 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <FLASH_FlushCaches+0x5c>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ede:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eee:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]
  }
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_FLASHEx_Erase>:
{
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_FLASHEx_Erase+0x8c>)
 8003f04:	7e1b      	ldrb	r3, [r3, #24]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d03e      	beq.n	8003f88 <HAL_FLASHEx_Erase+0x88>
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <HAL_FLASHEx_Erase+0x8c>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f18:	f7ff ff12 	bl	8003d40 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	bb70      	cbnz	r0, 8003f7e <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d016      	beq.n	8003f5a <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f2c:	68a5      	ldr	r5, [r4, #8]
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	68a2      	ldr	r2, [r4, #8]
 8003f32:	4413      	add	r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	d920      	bls.n	8003f7a <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003f38:	7c21      	ldrb	r1, [r4, #16]
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7ff ff84 	bl	8003e48 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f44:	f7ff fefc 	bl	8003d40 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <HAL_FLASHEx_Erase+0x90>)
 8003f4a:	6913      	ldr	r3, [r2, #16]
 8003f4c:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003f50:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8003f52:	4607      	mov	r7, r0
 8003f54:	b980      	cbnz	r0, 8003f78 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f56:	3501      	adds	r5, #1
 8003f58:	e7e9      	b.n	8003f2e <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003f5a:	6861      	ldr	r1, [r4, #4]
 8003f5c:	7c20      	ldrb	r0, [r4, #16]
 8003f5e:	f7ff ff61 	bl	8003e24 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f66:	f7ff feeb 	bl	8003d40 <FLASH_WaitForLastOperation>
 8003f6a:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <HAL_FLASHEx_Erase+0x90>)
 8003f6e:	6913      	ldr	r3, [r2, #16]
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	6113      	str	r3, [r2, #16]
 8003f76:	e000      	b.n	8003f7a <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8003f78:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8003f7a:	f7ff ff91 	bl	8003ea0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003f7e:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_FLASHEx_Erase+0x8c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	761a      	strb	r2, [r3, #24]
}
 8003f84:	4638      	mov	r0, r7
 8003f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003f88:	2702      	movs	r7, #2
 8003f8a:	e7fb      	b.n	8003f84 <HAL_FLASHEx_Erase+0x84>
 8003f8c:	20001150 	.word	0x20001150
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f9e:	6800      	ldr	r0, [r0, #0]
 8003fa0:	f001 fa58 	bl	8005454 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	b110      	cbz	r0, 8003fae <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8003fa8:	4630      	mov	r0, r6
 8003faa:	b002      	add	sp, #8
 8003fac:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	f001 fa63 	bl	800547a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb4:	b938      	cbnz	r0, 8003fc6 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003fba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00b      	beq.n	8003fd8 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003fc0:	4635      	mov	r5, r6
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	e014      	b.n	8003ff0 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	f001 fa42 	bl	8005454 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0f2      	beq.n	8003fba <SD_PowerON+0x26>
      return errorstate;
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	e7e7      	b.n	8003fa8 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	f001 fa64 	bl	80054a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d0ed      	beq.n	8003fc0 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fe4:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8003fe8:	e7de      	b.n	8003fa8 <SD_PowerON+0x14>
    count++;
 8003fea:	9b01      	ldr	r3, [sp, #4]
 8003fec:	3301      	adds	r3, #1
 8003fee:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ff0:	9a01      	ldr	r2, [sp, #4]
 8003ff2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d813      	bhi.n	8004022 <SD_PowerON+0x8e>
 8003ffa:	b995      	cbnz	r5, 8004022 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	f001 fa52 	bl	80054a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004004:	b9d8      	cbnz	r0, 800403e <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004006:	4912      	ldr	r1, [pc, #72]	; (8004050 <SD_PowerON+0xbc>)
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	f001 fa65 	bl	80054d8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	4605      	mov	r5, r0
 8004010:	b9b8      	cbnz	r0, 8004042 <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004012:	2100      	movs	r1, #0
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	f001 f860 	bl	80050da <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800401a:	0fc3      	lsrs	r3, r0, #31
 800401c:	d0e5      	beq.n	8003fea <SD_PowerON+0x56>
 800401e:	461d      	mov	r5, r3
 8004020:	e7e3      	b.n	8003fea <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004022:	9a01      	ldr	r2, [sp, #4]
 8004024:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004028:	429a      	cmp	r2, r3
 800402a:	d80d      	bhi.n	8004048 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800402c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004030:	d102      	bne.n	8004038 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 8004032:	2300      	movs	r3, #0
 8004034:	6463      	str	r3, [r4, #68]	; 0x44
 8004036:	e7b7      	b.n	8003fa8 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004038:	2301      	movs	r3, #1
 800403a:	6463      	str	r3, [r4, #68]	; 0x44
 800403c:	e7b4      	b.n	8003fa8 <SD_PowerON+0x14>
      return errorstate;
 800403e:	4606      	mov	r6, r0
 8004040:	e7b2      	b.n	8003fa8 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004042:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8004046:	e7af      	b.n	8003fa8 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004048:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 800404c:	e7ac      	b.n	8003fa8 <SD_PowerON+0x14>
 800404e:	bf00      	nop
 8004050:	c1100000 	.word	0xc1100000

08004054 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004058:	b088      	sub	sp, #32
 800405a:	4604      	mov	r4, r0
 800405c:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7fc fd33 	bl	8000ac8 <HAL_GetTick>
 8004062:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800406a:	2108      	movs	r1, #8
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	f001 f947 	bl	8005300 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004072:	4605      	mov	r5, r0
 8004074:	b118      	cbz	r0, 800407e <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8004076:	4628      	mov	r0, r5
 8004078:	b008      	add	sp, #32
 800407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800407e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004080:	0409      	lsls	r1, r1, #16
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	f001 fa10 	bl	80054a8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004088:	4605      	mov	r5, r0
 800408a:	2800      	cmp	r0, #0
 800408c:	d1f3      	bne.n	8004076 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8004094:	2308      	movs	r3, #8
 8004096:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004098:	2330      	movs	r3, #48	; 0x30
 800409a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800409c:	2302      	movs	r3, #2
 800409e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80040a8:	a902      	add	r1, sp, #8
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	f001 f916 	bl	80052dc <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	f001 fa42 	bl	800553a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80040b6:	4605      	mov	r5, r0
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d1dc      	bne.n	8004076 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80040bc:	4680      	mov	r8, r0
 80040be:	e005      	b.n	80040cc <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80040c0:	f7fc fd02 	bl	8000ac8 <HAL_GetTick>
 80040c4:	1b80      	subs	r0, r0, r6
 80040c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040ca:	d043      	beq.n	8004154 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80040d0:	f240 432a 	movw	r3, #1066	; 0x42a
 80040d4:	421a      	tst	r2, r3
 80040d6:	d10a      	bne.n	80040ee <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80040d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040da:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80040de:	d0ef      	beq.n	80040c0 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80040e0:	f000 ffd2 	bl	8005088 <SDIO_ReadFIFO>
 80040e4:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 80040e8:	f108 0801 	add.w	r8, r8, #1
 80040ec:	e7e8      	b.n	80040c0 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80040ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040f0:	f013 0f08 	tst.w	r3, #8
 80040f4:	d125      	bne.n	8004142 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80040f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040f8:	f013 0f02 	tst.w	r3, #2
 80040fc:	d124      	bne.n	8004148 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80040fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004100:	f013 0f20 	tst.w	r3, #32
 8004104:	d123      	bne.n	800414e <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004106:	f240 533a 	movw	r3, #1338	; 0x53a
 800410a:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800410c:	9a01      	ldr	r2, [sp, #4]
 800410e:	0213      	lsls	r3, r2, #8
 8004110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004118:	0a11      	lsrs	r1, r2, #8
 800411a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800411e:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004120:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004124:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004126:	9a00      	ldr	r2, [sp, #0]
 8004128:	0213      	lsls	r3, r2, #8
 800412a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800412e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004132:	0a11      	lsrs	r1, r2, #8
 8004134:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004138:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800413a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800413e:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8004140:	e799      	b.n	8004076 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004142:	2508      	movs	r5, #8
 8004144:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004146:	e796      	b.n	8004076 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004148:	2502      	movs	r5, #2
 800414a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800414c:	e793      	b.n	8004076 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800414e:	2520      	movs	r5, #32
 8004150:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004152:	e790      	b.n	8004076 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8004154:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8004158:	e78d      	b.n	8004076 <SD_FindSCR+0x22>

0800415a <SD_WideBus_Enable>:
{
 800415a:	b510      	push	{r4, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8004160:	2100      	movs	r1, #0
 8004162:	9100      	str	r1, [sp, #0]
 8004164:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004166:	6800      	ldr	r0, [r0, #0]
 8004168:	f000 ffb7 	bl	80050da <SDIO_GetResponse>
 800416c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8004170:	d116      	bne.n	80041a0 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8004172:	4669      	mov	r1, sp
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff ff6d 	bl	8004054 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	4603      	mov	r3, r0
 800417c:	b990      	cbnz	r0, 80041a4 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800417e:	9b01      	ldr	r3, [sp, #4]
 8004180:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004184:	d011      	beq.n	80041aa <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004186:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004188:	0409      	lsls	r1, r1, #16
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	f001 f98c 	bl	80054a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004190:	4603      	mov	r3, r0
 8004192:	b938      	cbnz	r0, 80041a4 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004194:	2102      	movs	r1, #2
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	f001 f9b7 	bl	800550a <SDMMC_CmdBusWidth>
 800419c:	4603      	mov	r3, r0
 800419e:	e001      	b.n	80041a4 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	b002      	add	sp, #8
 80041a8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041ae:	e7f9      	b.n	80041a4 <SD_WideBus_Enable+0x4a>

080041b0 <SD_WideBus_Disable>:
{
 80041b0:	b510      	push	{r4, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80041b6:	2100      	movs	r1, #0
 80041b8:	9100      	str	r1, [sp, #0]
 80041ba:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80041bc:	6800      	ldr	r0, [r0, #0]
 80041be:	f000 ff8c 	bl	80050da <SDIO_GetResponse>
 80041c2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80041c6:	d116      	bne.n	80041f6 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80041c8:	4669      	mov	r1, sp
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff42 	bl	8004054 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80041d0:	4603      	mov	r3, r0
 80041d2:	b990      	cbnz	r0, 80041fa <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041d4:	9b01      	ldr	r3, [sp, #4]
 80041d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80041da:	d011      	beq.n	8004200 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80041de:	0409      	lsls	r1, r1, #16
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	f001 f961 	bl	80054a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80041e6:	4603      	mov	r3, r0
 80041e8:	b938      	cbnz	r0, 80041fa <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80041ea:	2100      	movs	r1, #0
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	f001 f98c 	bl	800550a <SDMMC_CmdBusWidth>
 80041f2:	4603      	mov	r3, r0
 80041f4:	e001      	b.n	80041fa <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	b002      	add	sp, #8
 80041fe:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004204:	e7f9      	b.n	80041fa <SD_WideBus_Disable+0x4a>

08004206 <SD_SendStatus>:
{
 8004206:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8004208:	b181      	cbz	r1, 800422c <SD_SendStatus+0x26>
 800420a:	460d      	mov	r5, r1
 800420c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800420e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004210:	0409      	lsls	r1, r1, #16
 8004212:	6800      	ldr	r0, [r0, #0]
 8004214:	f001 f9eb 	bl	80055ee <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004218:	4606      	mov	r6, r0
 800421a:	b108      	cbz	r0, 8004220 <SD_SendStatus+0x1a>
}
 800421c:	4630      	mov	r0, r6
 800421e:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004220:	2100      	movs	r1, #0
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	f000 ff59 	bl	80050da <SDIO_GetResponse>
 8004228:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 800422a:	e7f7      	b.n	800421c <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800422c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8004230:	e7f4      	b.n	800421c <SD_SendStatus+0x16>
	...

08004234 <HAL_SD_ReadBlocks>:
{
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	4604      	mov	r4, r0
 800423c:	460d      	mov	r5, r1
 800423e:	4690      	mov	r8, r2
 8004240:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8004242:	f7fc fc41 	bl	8000ac8 <HAL_GetTick>
  if(NULL == pData)
 8004246:	b16d      	cbz	r5, 8004264 <HAL_SD_ReadBlocks+0x30>
 8004248:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800424a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d00d      	beq.n	8004270 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800425c:	2001      	movs	r0, #1
}
 800425e:	b006      	add	sp, #24
 8004260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800426a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800426c:	2001      	movs	r0, #1
 800426e:	e7f6      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004270:	2300      	movs	r3, #0
 8004272:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004274:	eb08 0306 	add.w	r3, r8, r6
 8004278:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800427a:	4293      	cmp	r3, r2
 800427c:	d81b      	bhi.n	80042b6 <HAL_SD_ReadBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 800427e:	2303      	movs	r3, #3
 8004280:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800428a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <HAL_SD_ReadBlocks+0x60>
      add *= 512U;
 8004290:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	f001 f831 	bl	8005300 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800429e:	4603      	mov	r3, r0
 80042a0:	b178      	cbz	r0, 80042c2 <HAL_SD_ReadBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	497c      	ldr	r1, [pc, #496]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 80042a6:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80042aa:	4318      	orrs	r0, r3
 80042ac:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042ae:	2001      	movs	r0, #1
 80042b0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80042b4:	e7d3      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80042b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042bc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80042be:	2001      	movs	r0, #1
 80042c0:	e7cd      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80042c8:	0273      	lsls	r3, r6, #9
 80042ca:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80042cc:	2390      	movs	r3, #144	; 0x90
 80042ce:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80042d0:	2302      	movs	r3, #2
 80042d2:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80042d8:	2301      	movs	r3, #1
 80042da:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80042dc:	4669      	mov	r1, sp
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	f000 fffc 	bl	80052dc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80042e4:	2e01      	cmp	r6, #1
 80042e6:	d90c      	bls.n	8004302 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80042e8:	2302      	movs	r3, #2
 80042ea:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80042ec:	4641      	mov	r1, r8
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	f001 f836 	bl	8005360 <SDMMC_CmdReadMultiBlock>
 80042f4:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80042f6:	f1ba 0f00 	cmp.w	sl, #0
 80042fa:	d10a      	bne.n	8004312 <HAL_SD_ReadBlocks+0xde>
    dataremaining = config.DataLength;
 80042fc:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004300:	e02f      	b.n	8004362 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004302:	2301      	movs	r3, #1
 8004304:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004306:	4641      	mov	r1, r8
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	f001 f811 	bl	8005330 <SDMMC_CmdReadSingleBlock>
 800430e:	4682      	mov	sl, r0
 8004310:	e7f1      	b.n	80042f6 <HAL_SD_ReadBlocks+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	4a60      	ldr	r2, [pc, #384]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800431a:	ea43 030a 	orr.w	r3, r3, sl
 800431e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004320:	2001      	movs	r0, #1
 8004322:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800432a:	e798      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
          data = SDIO_ReadFIFO(hsd->Instance);
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	f000 feab 	bl	8005088 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004332:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004334:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004338:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800433a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800433e:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004340:	0e00      	lsrs	r0, r0, #24
 8004342:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 8004344:	3504      	adds	r5, #4
          dataremaining--;
 8004346:	f1a9 0904 	sub.w	r9, r9, #4
        for(count = 0U; count < 8U; count++)
 800434a:	f108 0801 	add.w	r8, r8, #1
 800434e:	f1b8 0f07 	cmp.w	r8, #7
 8004352:	d9eb      	bls.n	800432c <HAL_SD_ReadBlocks+0xf8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004354:	f7fc fbb8 	bl	8000ac8 <HAL_GetTick>
 8004358:	1bc0      	subs	r0, r0, r7
 800435a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800435c:	4298      	cmp	r0, r3
 800435e:	d20f      	bcs.n	8004380 <HAL_SD_ReadBlocks+0x14c>
 8004360:	b173      	cbz	r3, 8004380 <HAL_SD_ReadBlocks+0x14c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004366:	f240 332a 	movw	r3, #810	; 0x32a
 800436a:	421a      	tst	r2, r3
 800436c:	d116      	bne.n	800439c <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800436e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004370:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004374:	d0ee      	beq.n	8004354 <HAL_SD_ReadBlocks+0x120>
 8004376:	f1b9 0f00 	cmp.w	r9, #0
 800437a:	d0eb      	beq.n	8004354 <HAL_SD_ReadBlocks+0x120>
        for(count = 0U; count < 8U; count++)
 800437c:	46d0      	mov	r8, sl
 800437e:	e7e6      	b.n	800434e <HAL_SD_ReadBlocks+0x11a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	4a45      	ldr	r2, [pc, #276]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800438c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800438e:	2301      	movs	r3, #1
 8004390:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004394:	2300      	movs	r3, #0
 8004396:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004398:	2003      	movs	r0, #3
 800439a:	e760      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800439c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800439e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043a2:	d008      	beq.n	80043b6 <HAL_SD_ReadBlocks+0x182>
 80043a4:	2e01      	cmp	r6, #1
 80043a6:	d906      	bls.n	80043b6 <HAL_SD_ReadBlocks+0x182>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d003      	beq.n	80043b6 <HAL_SD_ReadBlocks+0x182>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ae:	f001 f81f 	bl	80053f0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d137      	bne.n	8004426 <HAL_SD_ReadBlocks+0x1f2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	f012 0f08 	tst.w	r2, #8
 80043be:	d13e      	bne.n	800443e <HAL_SD_ReadBlocks+0x20a>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	f012 0f02 	tst.w	r2, #2
 80043c6:	d146      	bne.n	8004456 <HAL_SD_ReadBlocks+0x222>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80043c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ca:	f012 0f20 	tst.w	r2, #32
 80043ce:	d14e      	bne.n	800446e <HAL_SD_ReadBlocks+0x23a>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80043d4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80043d8:	d055      	beq.n	8004486 <HAL_SD_ReadBlocks+0x252>
 80043da:	f1b9 0f00 	cmp.w	r9, #0
 80043de:	d052      	beq.n	8004486 <HAL_SD_ReadBlocks+0x252>
      data = SDIO_ReadFIFO(hsd->Instance);
 80043e0:	f000 fe52 	bl	8005088 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80043e4:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80043e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80043ea:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80043ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80043f0:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80043f2:	0e00      	lsrs	r0, r0, #24
 80043f4:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 80043f6:	3504      	adds	r5, #4
      dataremaining--;
 80043f8:	f1a9 0904 	sub.w	r9, r9, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80043fc:	f7fc fb64 	bl	8000ac8 <HAL_GetTick>
 8004400:	1bc0      	subs	r0, r0, r7
 8004402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004404:	4298      	cmp	r0, r3
 8004406:	d201      	bcs.n	800440c <HAL_SD_ReadBlocks+0x1d8>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e1      	bne.n	80043d0 <HAL_SD_ReadBlocks+0x19c>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004418:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800441a:	2001      	movs	r0, #1
 800441c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004420:	2300      	movs	r3, #0
 8004422:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8004424:	e71b      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	491b      	ldr	r1, [pc, #108]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 800442a:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800442c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800442e:	4303      	orrs	r3, r0
 8004430:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004432:	2001      	movs	r0, #1
 8004434:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004438:	2300      	movs	r3, #0
 800443a:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 800443c:	e70f      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004444:	f043 0308 	orr.w	r3, r3, #8
 8004448:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800444a:	2001      	movs	r0, #1
 800444c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004454:	e703      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004456:	4a10      	ldr	r2, [pc, #64]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800445a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004462:	2001      	movs	r0, #1
 8004464:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004468:	2300      	movs	r3, #0
 800446a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800446c:	e6f7      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_SD_ReadBlocks+0x264>)
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800447a:	2001      	movs	r0, #1
 800447c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004480:	2300      	movs	r3, #0
 8004482:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004484:	e6eb      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004486:	f240 533a 	movw	r3, #1338	; 0x53a
 800448a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800448c:	2301      	movs	r3, #1
 800448e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8004492:	2000      	movs	r0, #0
 8004494:	e6e3      	b.n	800425e <HAL_SD_ReadBlocks+0x2a>
 8004496:	bf00      	nop
 8004498:	004005ff 	.word	0x004005ff

0800449c <HAL_SD_WriteBlocks>:
{
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	b088      	sub	sp, #32
 80044a2:	4604      	mov	r4, r0
 80044a4:	460d      	mov	r5, r1
 80044a6:	4690      	mov	r8, r2
 80044a8:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80044aa:	f7fc fb0d 	bl	8000ac8 <HAL_GetTick>
  if(NULL == pData)
 80044ae:	b16d      	cbz	r5, 80044cc <HAL_SD_WriteBlocks+0x30>
 80044b0:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80044b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d00d      	beq.n	80044d8 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80044bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044c2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80044c4:	2001      	movs	r0, #1
}
 80044c6:	b008      	add	sp, #32
 80044c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044d2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7f6      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044d8:	2300      	movs	r3, #0
 80044da:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044dc:	eb08 0306 	add.w	r3, r8, r6
 80044e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d81b      	bhi.n	800451e <HAL_SD_WriteBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 80044e6:	2303      	movs	r3, #3
 80044e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80044f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_SD_WriteBlocks+0x60>
      add *= 512U;
 80044f8:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	f000 fefd 	bl	8005300 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004506:	4603      	mov	r3, r0
 8004508:	b178      	cbz	r0, 800452a <HAL_SD_WriteBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800450a:	6822      	ldr	r2, [r4, #0]
 800450c:	4967      	ldr	r1, [pc, #412]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 800450e:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004510:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004512:	4318      	orrs	r0, r3
 8004514:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004516:	2001      	movs	r0, #1
 8004518:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800451c:	e7d3      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800451e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004524:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004526:	2001      	movs	r0, #1
 8004528:	e7cd      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004530:	0273      	lsls	r3, r6, #9
 8004532:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004534:	2390      	movs	r3, #144	; 0x90
 8004536:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004538:	2300      	movs	r3, #0
 800453a:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800453c:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800453e:	2301      	movs	r3, #1
 8004540:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004542:	a902      	add	r1, sp, #8
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	f000 fec9 	bl	80052dc <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800454a:	2e01      	cmp	r6, #1
 800454c:	d90c      	bls.n	8004568 <HAL_SD_WriteBlocks+0xcc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800454e:	2320      	movs	r3, #32
 8004550:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004552:	4641      	mov	r1, r8
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f000 ff33 	bl	80053c0 <SDMMC_CmdWriteMultiBlock>
 800455a:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 800455c:	f1ba 0f00 	cmp.w	sl, #0
 8004560:	d10a      	bne.n	8004578 <HAL_SD_WriteBlocks+0xdc>
    dataremaining = config.DataLength;
 8004562:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004566:	e033      	b.n	80045d0 <HAL_SD_WriteBlocks+0x134>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004568:	2310      	movs	r3, #16
 800456a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800456c:	4641      	mov	r1, r8
 800456e:	6820      	ldr	r0, [r4, #0]
 8004570:	f000 ff0e 	bl	8005390 <SDMMC_CmdWriteSingleBlock>
 8004574:	4682      	mov	sl, r0
 8004576:	e7f1      	b.n	800455c <HAL_SD_WriteBlocks+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	4a4c      	ldr	r2, [pc, #304]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800457e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004580:	ea43 030a 	orr.w	r3, r3, sl
 8004584:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004586:	2001      	movs	r0, #1
 8004588:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800458c:	2300      	movs	r3, #0
 800458e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004590:	e799      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
          data = (uint32_t)(*tempbuff);
 8004592:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004594:	786a      	ldrb	r2, [r5, #1]
 8004596:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 800459a:	78aa      	ldrb	r2, [r5, #2]
 800459c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 80045a0:	78ea      	ldrb	r2, [r5, #3]
 80045a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80045a6:	a908      	add	r1, sp, #32
 80045a8:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 80045ac:	3504      	adds	r5, #4
          dataremaining--;
 80045ae:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	f000 fd6b 	bl	800508e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80045b8:	f108 0801 	add.w	r8, r8, #1
 80045bc:	f1b8 0f07 	cmp.w	r8, #7
 80045c0:	d9e7      	bls.n	8004592 <HAL_SD_WriteBlocks+0xf6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80045c2:	f7fc fa81 	bl	8000ac8 <HAL_GetTick>
 80045c6:	1bc0      	subs	r0, r0, r7
 80045c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045ca:	4298      	cmp	r0, r3
 80045cc:	d20f      	bcs.n	80045ee <HAL_SD_WriteBlocks+0x152>
 80045ce:	b173      	cbz	r3, 80045ee <HAL_SD_WriteBlocks+0x152>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045d0:	6820      	ldr	r0, [r4, #0]
 80045d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80045d4:	f240 331a 	movw	r3, #794	; 0x31a
 80045d8:	421a      	tst	r2, r3
 80045da:	d116      	bne.n	800460a <HAL_SD_WriteBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80045dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80045de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80045e2:	d0ee      	beq.n	80045c2 <HAL_SD_WriteBlocks+0x126>
 80045e4:	f1b9 0f00 	cmp.w	r9, #0
 80045e8:	d0eb      	beq.n	80045c2 <HAL_SD_WriteBlocks+0x126>
        for(count = 0U; count < 8U; count++)
 80045ea:	46d0      	mov	r8, sl
 80045ec:	e7e6      	b.n	80045bc <HAL_SD_WriteBlocks+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80045f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045f6:	ea43 030a 	orr.w	r3, r3, sl
 80045fa:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8004606:	2003      	movs	r0, #3
 8004608:	e75d      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800460a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800460c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004610:	d007      	beq.n	8004622 <HAL_SD_WriteBlocks+0x186>
 8004612:	2e01      	cmp	r6, #1
 8004614:	d905      	bls.n	8004622 <HAL_SD_WriteBlocks+0x186>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004618:	2b03      	cmp	r3, #3
 800461a:	d002      	beq.n	8004622 <HAL_SD_WriteBlocks+0x186>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800461c:	f000 fee8 	bl	80053f0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004620:	b9c0      	cbnz	r0, 8004654 <HAL_SD_WriteBlocks+0x1b8>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004626:	f012 0f08 	tst.w	r2, #8
 800462a:	d11f      	bne.n	800466c <HAL_SD_WriteBlocks+0x1d0>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800462c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462e:	f012 0f02 	tst.w	r2, #2
 8004632:	d127      	bne.n	8004684 <HAL_SD_WriteBlocks+0x1e8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004636:	f012 0f10 	tst.w	r2, #16
 800463a:	d02f      	beq.n	800469c <HAL_SD_WriteBlocks+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004642:	f043 0310 	orr.w	r3, r3, #16
 8004646:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004648:	2001      	movs	r0, #1
 800464a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800464e:	2300      	movs	r3, #0
 8004650:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004652:	e738      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	4915      	ldr	r1, [pc, #84]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 8004658:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800465a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800465c:	4303      	orrs	r3, r0
 800465e:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004660:	2001      	movs	r0, #1
 8004662:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004666:	2300      	movs	r3, #0
 8004668:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 800466a:	e72c      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800466c:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004672:	f043 0308 	orr.w	r3, r3, #8
 8004676:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004678:	2001      	movs	r0, #1
 800467a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800467e:	2300      	movs	r3, #0
 8004680:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004682:	e720      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_SD_WriteBlocks+0x210>)
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004690:	2001      	movs	r0, #1
 8004692:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004696:	2300      	movs	r3, #0
 8004698:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800469a:	e714      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800469c:	f240 523a 	movw	r2, #1338	; 0x53a
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80046a8:	2000      	movs	r0, #0
 80046aa:	e70c      	b.n	80044c6 <HAL_SD_WriteBlocks+0x2a>
 80046ac:	004005ff 	.word	0x004005ff

080046b0 <HAL_SD_GetCardCSD>:
{
 80046b0:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80046b2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80046b4:	0f9b      	lsrs	r3, r3, #30
 80046b6:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80046b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80046ba:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80046be:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80046c0:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80046ca:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80046ce:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80046d0:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80046d4:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80046d6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80046da:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80046de:	0d1b      	lsrs	r3, r3, #20
 80046e0:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046e2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80046ee:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80046f2:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80046f6:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80046fa:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80046fe:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8004702:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004704:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004706:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800470a:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800470c:	2300      	movs	r3, #0
 800470e:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004710:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 8088 	bne.w	8004828 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004718:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800471a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800471e:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8004722:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8004724:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8004728:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800472a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800472c:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8004730:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004732:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800473c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800473e:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8004742:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004744:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004746:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800474a:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800474c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800474e:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8004752:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004754:	690b      	ldr	r3, [r1, #16]
 8004756:	3301      	adds	r3, #1
 8004758:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800475a:	7e0a      	ldrb	r2, [r1, #24]
 800475c:	f002 0207 	and.w	r2, r2, #7
 8004760:	3202      	adds	r2, #2
 8004762:	fa03 f202 	lsl.w	r2, r3, r2
 8004766:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004768:	7a0b      	ldrb	r3, [r1, #8]
 800476a:	f003 040f 	and.w	r4, r3, #15
 800476e:	2301      	movs	r3, #1
 8004770:	40a3      	lsls	r3, r4
 8004772:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004774:	0a5b      	lsrs	r3, r3, #9
 8004776:	fb03 f302 	mul.w	r3, r3, r2
 800477a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800477c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004780:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004782:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004784:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004788:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800478a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800478c:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8004790:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004792:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004798:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800479a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800479c:	0fdb      	lsrs	r3, r3, #31
 800479e:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80047a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80047a2:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80047a6:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80047a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80047aa:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80047ae:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80047b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80047b2:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80047b6:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80047b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80047ba:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80047be:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80047c8:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 80047cc:	f002 0201 	and.w	r2, r2, #1
 80047d0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80047d6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80047da:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047de:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80047e0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80047e4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047e8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80047ea:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80047ee:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047f2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80047f4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80047f8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047fc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80047fe:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8004802:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004806:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004808:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800480c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004810:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004812:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8004816:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800481a:	2201      	movs	r2, #1
 800481c:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8004820:	4618      	mov	r0, r3
}
 8004822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004826:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004828:	2b01      	cmp	r3, #1
 800482a:	d00b      	beq.n	8004844 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800482c:	6803      	ldr	r3, [r0, #0]
 800482e:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <HAL_SD_GetCardCSD+0x1b8>)
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004832:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800483a:	2301      	movs	r3, #1
 800483c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8004840:	4618      	mov	r0, r3
 8004842:	e7ee      	b.n	8004822 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004844:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800484c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004854:	690b      	ldr	r3, [r1, #16]
 8004856:	3301      	adds	r3, #1
 8004858:	029b      	lsls	r3, r3, #10
 800485a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800485c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800485e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004862:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004864:	6603      	str	r3, [r0, #96]	; 0x60
 8004866:	e78c      	b.n	8004782 <HAL_SD_GetCardCSD+0xd2>
 8004868:	004005ff 	.word	0x004005ff

0800486c <SD_InitCard>:
{
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	b090      	sub	sp, #64	; 0x40
 8004870:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8004872:	2301      	movs	r3, #1
 8004874:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004878:	6800      	ldr	r0, [r0, #0]
 800487a:	f000 fc15 	bl	80050a8 <SDIO_GetPowerState>
 800487e:	2800      	cmp	r0, #0
 8004880:	d06c      	beq.n	800495c <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004882:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004884:	2b03      	cmp	r3, #3
 8004886:	d145      	bne.n	8004914 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800488a:	2b03      	cmp	r3, #3
 800488c:	d15d      	bne.n	800494a <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800488e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004890:	2b03      	cmp	r3, #3
 8004892:	d01d      	beq.n	80048d0 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8004894:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8004898:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800489a:	0409      	lsls	r1, r1, #16
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	f000 fe79 	bl	8005594 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a2:	4605      	mov	r5, r0
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d15b      	bne.n	8004960 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048a8:	2100      	movs	r1, #0
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	f000 fc15 	bl	80050da <SDIO_GetResponse>
 80048b0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048b2:	2104      	movs	r1, #4
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f000 fc10 	bl	80050da <SDIO_GetResponse>
 80048ba:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048bc:	2108      	movs	r1, #8
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	f000 fc0b 	bl	80050da <SDIO_GetResponse>
 80048c4:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048c6:	210c      	movs	r1, #12
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	f000 fc06 	bl	80050da <SDIO_GetResponse>
 80048ce:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80048d0:	2104      	movs	r1, #4
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	f000 fc01 	bl	80050da <SDIO_GetResponse>
 80048d8:	0d00      	lsrs	r0, r0, #20
 80048da:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048dc:	a905      	add	r1, sp, #20
 80048de:	4620      	mov	r0, r4
 80048e0:	f7ff fee6 	bl	80046b0 <HAL_SD_GetCardCSD>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d13e      	bne.n	8004966 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80048e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80048ea:	0412      	lsls	r2, r2, #16
 80048ec:	2300      	movs	r3, #0
 80048ee:	6820      	ldr	r0, [r4, #0]
 80048f0:	f000 fd98 	bl	8005424 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f4:	4605      	mov	r5, r0
 80048f6:	bb98      	cbnz	r0, 8004960 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80048f8:	4623      	mov	r3, r4
 80048fa:	f853 6b10 	ldr.w	r6, [r3], #16
 80048fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004902:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004906:	3404      	adds	r4, #4
 8004908:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800490c:	4630      	mov	r0, r6
 800490e:	f000 fb9f 	bl	8005050 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8004912:	e025      	b.n	8004960 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	f000 fe28 	bl	800556a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800491a:	4605      	mov	r5, r0
 800491c:	bb00      	cbnz	r0, 8004960 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800491e:	2100      	movs	r1, #0
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	f000 fbda 	bl	80050da <SDIO_GetResponse>
 8004926:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004928:	2104      	movs	r1, #4
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	f000 fbd5 	bl	80050da <SDIO_GetResponse>
 8004930:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004932:	2108      	movs	r1, #8
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	f000 fbd0 	bl	80050da <SDIO_GetResponse>
 800493a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800493c:	210c      	movs	r1, #12
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	f000 fbcb 	bl	80050da <SDIO_GetResponse>
 8004944:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8004948:	e79e      	b.n	8004888 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800494a:	f10d 0112 	add.w	r1, sp, #18
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	f000 fe35 	bl	80055be <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004954:	4605      	mov	r5, r0
 8004956:	2800      	cmp	r0, #0
 8004958:	d099      	beq.n	800488e <SD_InitCard+0x22>
 800495a:	e001      	b.n	8004960 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800495c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8004960:	4628      	mov	r0, r5
 8004962:	b010      	add	sp, #64	; 0x40
 8004964:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004966:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800496a:	e7f9      	b.n	8004960 <SD_InitCard+0xf4>

0800496c <HAL_SD_InitCard>:
{
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004972:	2300      	movs	r3, #0
 8004974:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004976:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004978:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800497a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800497c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800497e:	2376      	movs	r3, #118	; 0x76
 8004980:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8004982:	ab0a      	add	r3, sp, #40	; 0x28
 8004984:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004988:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800498c:	ab04      	add	r3, sp, #16
 800498e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004990:	6828      	ldr	r0, [r5, #0]
 8004992:	f000 fb5d 	bl	8005050 <SDIO_Init>
  if(status != HAL_OK)
 8004996:	b118      	cbz	r0, 80049a0 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8004998:	2401      	movs	r4, #1
}
 800499a:	4620      	mov	r0, r4
 800499c:	b00a      	add	sp, #40	; 0x28
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 80049a2:	4e10      	ldr	r6, [pc, #64]	; (80049e4 <HAL_SD_InitCard+0x78>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80049a8:	6828      	ldr	r0, [r5, #0]
 80049aa:	f000 fb75 	bl	8005098 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80049ae:	2301      	movs	r3, #1
 80049b0:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7ff faee 	bl	8003f94 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	4603      	mov	r3, r0
 80049ba:	b130      	cbz	r0, 80049ca <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 80049bc:	2401      	movs	r4, #1
 80049be:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80049c2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80049c4:	4318      	orrs	r0, r3
 80049c6:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 80049c8:	e7e7      	b.n	800499a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 80049ca:	4628      	mov	r0, r5
 80049cc:	f7ff ff4e 	bl	800486c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 80049d0:	4603      	mov	r3, r0
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d0e1      	beq.n	800499a <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 80049d6:	2401      	movs	r4, #1
 80049d8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80049dc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80049de:	4318      	orrs	r0, r3
 80049e0:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 80049e2:	e7da      	b.n	800499a <HAL_SD_InitCard+0x2e>
 80049e4:	422580a0 	.word	0x422580a0

080049e8 <HAL_SD_Init>:
  if(hsd == NULL)
 80049e8:	b1c0      	cbz	r0, 8004a1c <HAL_SD_Init+0x34>
{
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 80049ee:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80049f2:	b17b      	cbz	r3, 8004a14 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 80049f4:	2303      	movs	r3, #3
 80049f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff ffb6 	bl	800496c <HAL_SD_InitCard>
 8004a00:	4603      	mov	r3, r0
 8004a02:	b970      	cbnz	r0, 8004a22 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a04:	2200      	movs	r2, #0
 8004a06:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8004a08:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8004a14:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8004a16:	f000 fed3 	bl	80057c0 <HAL_SD_MspInit>
 8004a1a:	e7eb      	b.n	80049f4 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	4770      	bx	lr
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e7f4      	b.n	8004a10 <HAL_SD_Init+0x28>

08004a26 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a28:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004a2c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004a30:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a34:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004a36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004a38:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004a3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004a3c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004a3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004a40:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a42:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004a44:	61cb      	str	r3, [r1, #28]
}
 8004a46:	2000      	movs	r0, #0
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_SD_ConfigWideBusOperation>:
{
 8004a4c:	b530      	push	{r4, r5, lr}
 8004a4e:	b08b      	sub	sp, #44	; 0x2c
 8004a50:	4604      	mov	r4, r0
 8004a52:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8004a54:	2303      	movs	r3, #3
 8004a56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d01c      	beq.n	8004a9a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004a60:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004a64:	d008      	beq.n	8004a78 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004a66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004a6a:	d00a      	beq.n	8004a82 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004a6c:	b179      	cbz	r1, 8004a8e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a74:	6383      	str	r3, [r0, #56]	; 0x38
 8004a76:	e014      	b.n	8004aa2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6383      	str	r3, [r0, #56]	; 0x38
 8004a80:	e00f      	b.n	8004aa2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8004a82:	f7ff fb6a 	bl	800415a <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8004a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a88:	4318      	orrs	r0, r3
 8004a8a:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a8c:	e009      	b.n	8004aa2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8004a8e:	f7ff fb8f 	bl	80041b0 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8004a92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a94:	4318      	orrs	r0, r3
 8004a96:	63a0      	str	r0, [r4, #56]	; 0x38
 8004a98:	e003      	b.n	8004aa2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aa4:	b13b      	cbz	r3, 8004ab6 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	4a10      	ldr	r2, [pc, #64]	; (8004aec <HAL_SD_ConfigWideBusOperation+0xa0>)
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004aac:	2001      	movs	r0, #1
 8004aae:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8004ab2:	b00b      	add	sp, #44	; 0x2c
 8004ab4:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8004ac2:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004ac8:	69a3      	ldr	r3, [r4, #24]
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8004acc:	ab0a      	add	r3, sp, #40	; 0x28
 8004ace:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004ad2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004ad6:	ab04      	add	r3, sp, #16
 8004ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	f000 fab8 	bl	8005050 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	e7e3      	b.n	8004ab2 <HAL_SD_ConfigWideBusOperation+0x66>
 8004aea:	bf00      	nop
 8004aec:	004005ff 	.word	0x004005ff

08004af0 <HAL_SD_GetCardState>:
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8004af6:	a902      	add	r1, sp, #8
 8004af8:	2300      	movs	r3, #0
 8004afa:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8004afe:	f7ff fb82 	bl	8004206 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b02:	b118      	cbz	r0, 8004b0c <HAL_SD_GetCardState+0x1c>
 8004b04:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8004b06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b08:	4318      	orrs	r0, r3
 8004b0a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004b0c:	9801      	ldr	r0, [sp, #4]
 8004b0e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8004b12:	b002      	add	sp, #8
 8004b14:	bd10      	pop	{r4, pc}
	...

08004b18 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8004b18:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <LL_GPIO_DeInit+0x114>)
 8004b1a:	4298      	cmp	r0, r3
 8004b1c:	d019      	beq.n	8004b52 <LL_GPIO_DeInit+0x3a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 8004b1e:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <LL_GPIO_DeInit+0x118>)
 8004b20:	4298      	cmp	r0, r3
 8004b22:	d022      	beq.n	8004b6a <LL_GPIO_DeInit+0x52>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 8004b24:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <LL_GPIO_DeInit+0x11c>)
 8004b26:	4298      	cmp	r0, r3
 8004b28:	d02b      	beq.n	8004b82 <LL_GPIO_DeInit+0x6a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8004b2a:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <LL_GPIO_DeInit+0x120>)
 8004b2c:	4298      	cmp	r0, r3
 8004b2e:	d034      	beq.n	8004b9a <LL_GPIO_DeInit+0x82>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8004b30:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <LL_GPIO_DeInit+0x124>)
 8004b32:	4298      	cmp	r0, r3
 8004b34:	d03d      	beq.n	8004bb2 <LL_GPIO_DeInit+0x9a>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8004b36:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <LL_GPIO_DeInit+0x128>)
 8004b38:	4298      	cmp	r0, r3
 8004b3a:	d046      	beq.n	8004bca <LL_GPIO_DeInit+0xb2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 8004b3c:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <LL_GPIO_DeInit+0x12c>)
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	d04f      	beq.n	8004be2 <LL_GPIO_DeInit+0xca>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 8004b42:	4b41      	ldr	r3, [pc, #260]	; (8004c48 <LL_GPIO_DeInit+0x130>)
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d058      	beq.n	8004bfa <LL_GPIO_DeInit+0xe2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
#if defined(GPIOI)
  else if (GPIOx == GPIOI)
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <LL_GPIO_DeInit+0x134>)
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	d061      	beq.n	8004c12 <LL_GPIO_DeInit+0xfa>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 8004b4e:	2001      	movs	r0, #1
  }

  return (status);
}
 8004b50:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004b52:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 8004b66:	2000      	movs	r0, #0
 8004b68:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004b6a:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	f042 0202 	orr.w	r2, r2, #2
 8004b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	f022 0202 	bic.w	r2, r2, #2
 8004b7c:	611a      	str	r2, [r3, #16]
 8004b7e:	2000      	movs	r0, #0
 8004b80:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004b82:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	f042 0204 	orr.w	r2, r2, #4
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	611a      	str	r2, [r3, #16]
 8004b96:	2000      	movs	r0, #0
 8004b98:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004b9a:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	f022 0208 	bic.w	r2, r2, #8
 8004bac:	611a      	str	r2, [r3, #16]
 8004bae:	2000      	movs	r0, #0
 8004bb0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004bb2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	f042 0210 	orr.w	r2, r2, #16
 8004bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	f022 0210 	bic.w	r2, r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004bca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	f042 0220 	orr.w	r2, r2, #32
 8004bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	f022 0220 	bic.w	r2, r2, #32
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	2000      	movs	r0, #0
 8004be0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004be2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	611a      	str	r2, [r3, #16]
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004bfa:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0c:	611a      	str	r2, [r3, #16]
 8004c0e:	2000      	movs	r0, #0
 8004c10:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8004c12:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	2000      	movs	r0, #0
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	40020400 	.word	0x40020400
 8004c34:	40020800 	.word	0x40020800
 8004c38:	40020c00 	.word	0x40020c00
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40021400 	.word	0x40021400
 8004c44:	40021800 	.word	0x40021800
 8004c48:	40021c00 	.word	0x40021c00
 8004c4c:	40022000 	.word	0x40022000

08004c50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c50:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004c52:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	fa92 f2a2 	rbit	r2, r2
 8004c58:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c5c:	e02d      	b.n	8004cba <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c5e:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004c60:	68c4      	ldr	r4, [r0, #12]
 8004c62:	fa93 f5a3 	rbit	r5, r3
 8004c66:	fab5 f585 	clz	r5, r5
 8004c6a:	006d      	lsls	r5, r5, #1
 8004c6c:	2703      	movs	r7, #3
 8004c6e:	fa07 f505 	lsl.w	r5, r7, r5
 8004c72:	ea24 0405 	bic.w	r4, r4, r5
 8004c76:	fa93 f5a3 	rbit	r5, r3
 8004c7a:	fab5 f585 	clz	r5, r5
 8004c7e:	006d      	lsls	r5, r5, #1
 8004c80:	fa06 f505 	lsl.w	r5, r6, r5
 8004c84:	432c      	orrs	r4, r5
 8004c86:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004c88:	684c      	ldr	r4, [r1, #4]
 8004c8a:	2c02      	cmp	r4, #2
 8004c8c:	d03f      	beq.n	8004d0e <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004c8e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004c90:	6805      	ldr	r5, [r0, #0]
 8004c92:	fa93 f6a3 	rbit	r6, r3
 8004c96:	fab6 f686 	clz	r6, r6
 8004c9a:	0076      	lsls	r6, r6, #1
 8004c9c:	2703      	movs	r7, #3
 8004c9e:	fa07 f606 	lsl.w	r6, r7, r6
 8004ca2:	ea25 0506 	bic.w	r5, r5, r6
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa04 f303 	lsl.w	r3, r4, r3
 8004cb4:	432b      	orrs	r3, r5
 8004cb6:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8004cb8:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004cba:	680b      	ldr	r3, [r1, #0]
 8004cbc:	fa33 f402 	lsrs.w	r4, r3, r2
 8004cc0:	d059      	beq.n	8004d76 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004cc2:	2401      	movs	r4, #1
 8004cc4:	4094      	lsls	r4, r2
    if (currentpin)
 8004cc6:	4023      	ands	r3, r4
 8004cc8:	d0f6      	beq.n	8004cb8 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004cca:	684c      	ldr	r4, [r1, #4]
 8004ccc:	3c01      	subs	r4, #1
 8004cce:	2c01      	cmp	r4, #1
 8004cd0:	d8c5      	bhi.n	8004c5e <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004cd2:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004cd4:	6884      	ldr	r4, [r0, #8]
 8004cd6:	fa93 f5a3 	rbit	r5, r3
 8004cda:	fab5 f585 	clz	r5, r5
 8004cde:	006d      	lsls	r5, r5, #1
 8004ce0:	2703      	movs	r7, #3
 8004ce2:	fa07 f505 	lsl.w	r5, r7, r5
 8004ce6:	ea24 0405 	bic.w	r4, r4, r5
 8004cea:	fa93 f5a3 	rbit	r5, r3
 8004cee:	fab5 f585 	clz	r5, r5
 8004cf2:	006d      	lsls	r5, r5, #1
 8004cf4:	fa06 f505 	lsl.w	r5, r6, r5
 8004cf8:	432c      	orrs	r4, r5
 8004cfa:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004cfc:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004cfe:	6844      	ldr	r4, [r0, #4]
 8004d00:	ea24 0403 	bic.w	r4, r4, r3
 8004d04:	fb03 f505 	mul.w	r5, r3, r5
 8004d08:	432c      	orrs	r4, r5
 8004d0a:	6044      	str	r4, [r0, #4]
 8004d0c:	e7a7      	b.n	8004c5e <LL_GPIO_Init+0xe>
 8004d0e:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004d12:	fab4 f484 	clz	r4, r4
 8004d16:	2c07      	cmp	r4, #7
 8004d18:	d815      	bhi.n	8004d46 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d1a:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004d1c:	6a04      	ldr	r4, [r0, #32]
 8004d1e:	fa93 f5a3 	rbit	r5, r3
 8004d22:	fab5 f585 	clz	r5, r5
 8004d26:	00ad      	lsls	r5, r5, #2
 8004d28:	270f      	movs	r7, #15
 8004d2a:	fa07 f505 	lsl.w	r5, r7, r5
 8004d2e:	ea24 0405 	bic.w	r4, r4, r5
 8004d32:	fa93 f5a3 	rbit	r5, r3
 8004d36:	fab5 f585 	clz	r5, r5
 8004d3a:	00ad      	lsls	r5, r5, #2
 8004d3c:	fa06 f505 	lsl.w	r5, r6, r5
 8004d40:	432c      	orrs	r4, r5
 8004d42:	6204      	str	r4, [r0, #32]
 8004d44:	e7a3      	b.n	8004c8e <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d46:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004d48:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d4a:	0a1c      	lsrs	r4, r3, #8
 8004d4c:	fa94 f7a4 	rbit	r7, r4
 8004d50:	fab7 f787 	clz	r7, r7
 8004d54:	00bf      	lsls	r7, r7, #2
 8004d56:	f04f 0c0f 	mov.w	ip, #15
 8004d5a:	fa0c f707 	lsl.w	r7, ip, r7
 8004d5e:	ea26 0607 	bic.w	r6, r6, r7
 8004d62:	fa94 f4a4 	rbit	r4, r4
 8004d66:	fab4 f484 	clz	r4, r4
 8004d6a:	00a4      	lsls	r4, r4, #2
 8004d6c:	fa05 f404 	lsl.w	r4, r5, r4
 8004d70:	4334      	orrs	r4, r6
 8004d72:	6244      	str	r4, [r0, #36]	; 0x24
 8004d74:	e78b      	b.n	8004c8e <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8004d76:	2000      	movs	r0, #0
 8004d78:	bcf0      	pop	{r4, r5, r6, r7}
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8004d7c:	b082      	sub	sp, #8
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d7e:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <LL_RCC_DeInit+0x90>)
 8004d80:	6813      	ldr	r3, [r2, #0]
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <LL_RCC_DeInit+0x90>)
 8004d8a:	681b      	ldr	r3, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 8004d8c:	f013 0f02 	tst.w	r3, #2
 8004d90:	d0fa      	beq.n	8004d88 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <LL_RCC_DeInit+0x90>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	9201      	str	r2, [sp, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 8004d9c:	9a01      	ldr	r2, [sp, #4]
 8004d9e:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 8004da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004da6:	9201      	str	r2, [sp, #4]
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8004da8:	9a01      	ldr	r2, [sp, #4]
 8004daa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004dae:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8004db0:	9a01      	ldr	r2, [sp, #4]
 8004db2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dbe:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <LL_RCC_DeInit+0x90>)
 8004dc2:	681b      	ldr	r3, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 8004dc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dc8:	d1fa      	bne.n	8004dc0 <LL_RCC_DeInit+0x44>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <LL_RCC_DeInit+0x90>)
 8004dcc:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <LL_RCC_DeInit+0x94>)
 8004dce:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 8004dd0:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <LL_RCC_DeInit+0x98>)
 8004dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004ddc:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de4:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 8004dec:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004df4:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004df6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004dfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004e00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004e04:	675a      	str	r2, [r3, #116]	; 0x74

  return SUCCESS;
}
 8004e06:	2000      	movs	r0, #0
 8004e08:	b002      	add	sp, #8
 8004e0a:	4770      	bx	lr
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	24003010 	.word	0x24003010
 8004e14:	20003000 	.word	0x20003000

08004e18 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <RCC_GetHCLKClockFreq+0x10>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e20:	4a02      	ldr	r2, [pc, #8]	; (8004e2c <RCC_GetHCLKClockFreq+0x14>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e24:	40d8      	lsrs	r0, r3
 8004e26:	4770      	bx	lr
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	08006268 	.word	0x08006268

08004e30 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <RCC_GetPCLK1ClockFreq+0x10>)
 8004e32:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004e38:	4a02      	ldr	r2, [pc, #8]	; (8004e44 <RCC_GetPCLK1ClockFreq+0x14>)
 8004e3a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e3c:	40d8      	lsrs	r0, r3
 8004e3e:	4770      	bx	lr
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08006278 	.word	0x08006278

08004e48 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <RCC_GetPCLK2ClockFreq+0x10>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004e4c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004e50:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <RCC_GetPCLK2ClockFreq+0x14>)
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e54:	40d8      	lsrs	r0, r3
 8004e56:	4770      	bx	lr
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	08006278 	.word	0x08006278

08004e60 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004e68:	b923      	cbnz	r3, 8004e74 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004e6c:	2808      	cmp	r0, #8
 8004e6e:	d003      	beq.n	8004e78 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004e70:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8004e72:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8004e76:	e7f9      	b.n	8004e6c <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8004e7a:	6850      	ldr	r0, [r2, #4]
 8004e7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004e80:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e84:	6850      	ldr	r0, [r2, #4]
 8004e86:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004e8a:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004e8e:	6853      	ldr	r3, [r2, #4]
 8004e90:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004e94:	3301      	adds	r3, #1
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <RCC_GetSystemClockFreq>:
{
 8004eac:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <RCC_GetSystemClockFreq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d007      	beq.n	8004eca <RCC_GetSystemClockFreq+0x1e>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d001      	beq.n	8004ec2 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <RCC_GetSystemClockFreq+0x28>)
}
 8004ec0:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004ec2:	2008      	movs	r0, #8
 8004ec4:	f7ff ffcc 	bl	8004e60 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8004ec8:	e7fa      	b.n	8004ec0 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8004eca:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 8004ecc:	e7f8      	b.n	8004ec0 <RCC_GetSystemClockFreq+0x14>
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <LL_RCC_GetSystemClocksFreq>:
{
 8004edc:	b510      	push	{r4, lr}
 8004ede:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004ee0:	f7ff ffe4 	bl	8004eac <RCC_GetSystemClockFreq>
 8004ee4:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004ee6:	f7ff ff97 	bl	8004e18 <RCC_GetHCLKClockFreq>
 8004eea:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004eec:	f7ff ffa0 	bl	8004e30 <RCC_GetPCLK1ClockFreq>
 8004ef0:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004ef2:	6860      	ldr	r0, [r4, #4]
 8004ef4:	f7ff ffa8 	bl	8004e48 <RCC_GetPCLK2ClockFreq>
 8004ef8:	60e0      	str	r0, [r4, #12]
}
 8004efa:	bd10      	pop	{r4, pc}

08004efc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <SDMMC_GetCmdError+0x30>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <SDMMC_GetCmdError+0x34>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0a5a      	lsrs	r2, r3, #9
 8004f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f0c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	b143      	cbz	r3, 8004f26 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004f14:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004f16:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004f18:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f1c:	d0f8      	beq.n	8004f10 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f1e:	23c5      	movs	r3, #197	; 0xc5
 8004f20:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004f22:	2000      	movs	r0, #0
 8004f24:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004f26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004f2a:	4770      	bx	lr
 8004f2c:	2000000c 	.word	0x2000000c
 8004f30:	10624dd3 	.word	0x10624dd3

08004f34 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <SDMMC_GetCmdResp2+0x58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <SDMMC_GetCmdResp2+0x5c>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0a5a      	lsrs	r2, r3, #9
 8004f40:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f44:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004f48:	1e5a      	subs	r2, r3, #1
 8004f4a:	b1db      	cbz	r3, 8004f84 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8004f4c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f4e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f50:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004f54:	d0f8      	beq.n	8004f48 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f56:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004f5a:	d1f5      	bne.n	8004f48 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f5e:	f013 0f04 	tst.w	r3, #4
 8004f62:	d107      	bne.n	8004f74 <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f66:	f013 0f01 	tst.w	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f6c:	23c5      	movs	r3, #197	; 0xc5
 8004f6e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f70:	2000      	movs	r0, #0
 8004f72:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f74:	2304      	movs	r3, #4
 8004f76:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f78:	4618      	mov	r0, r3
 8004f7a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f80:	4618      	mov	r0, r3
 8004f82:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004f84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	10624dd3 	.word	0x10624dd3

08004f94 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <SDMMC_GetCmdResp3+0x48>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <SDMMC_GetCmdResp3+0x4c>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0a5a      	lsrs	r2, r3, #9
 8004fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fa4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	b19b      	cbz	r3, 8004fd4 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8004fac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004fae:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004fb0:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004fb4:	d0f8      	beq.n	8004fa8 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8004fba:	d1f5      	bne.n	8004fa8 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004fbe:	f013 0f04 	tst.w	r3, #4
 8004fc2:	d103      	bne.n	8004fcc <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fc4:	23c5      	movs	r3, #197	; 0xc5
 8004fc6:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fc8:	2000      	movs	r0, #0
 8004fca:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fcc:	2304      	movs	r3, #4
 8004fce:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004fd4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <SDMMC_GetCmdResp7+0x64>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <SDMMC_GetCmdResp7+0x68>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0a5a      	lsrs	r2, r3, #9
 8004ff0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ff4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004ff8:	1e5a      	subs	r2, r3, #1
 8004ffa:	b1fb      	cbz	r3, 800503c <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8004ffc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004ffe:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005000:	f011 0f45 	tst.w	r1, #69	; 0x45
 8005004:	d0f8      	beq.n	8004ff8 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005006:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800500a:	d1f5      	bne.n	8004ff8 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800500c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800500e:	f013 0f04 	tst.w	r3, #4
 8005012:	d10b      	bne.n	800502c <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005014:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005016:	f013 0f01 	tst.w	r3, #1
 800501a:	d10b      	bne.n	8005034 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800501c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800501e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005022:	d00e      	beq.n	8005042 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800502c:	2304      	movs	r3, #4
 800502e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005030:	4618      	mov	r0, r3
 8005032:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005034:	2301      	movs	r3, #1
 8005036:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005038:	4618      	mov	r0, r3
 800503a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800503c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005040:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8005042:	2000      	movs	r0, #0
  
}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	2000000c 	.word	0x2000000c
 800504c:	10624dd3 	.word	0x10624dd3

08005050 <SDIO_Init>:
{
 8005050:	b084      	sub	sp, #16
 8005052:	b410      	push	{r4}
 8005054:	ac02      	add	r4, sp, #8
 8005056:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800505a:	460b      	mov	r3, r1
 800505c:	9a03      	ldr	r2, [sp, #12]
 800505e:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8005060:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8005062:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8005064:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8005066:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8005068:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 800506a:	4313      	orrs	r3, r2
             Init.ClockDiv
 800506c:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 800506e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005070:	6842      	ldr	r2, [r0, #4]
 8005072:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8005076:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800507a:	4313      	orrs	r3, r2
 800507c:	6043      	str	r3, [r0, #4]
}
 800507e:	2000      	movs	r0, #0
 8005080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005084:	b004      	add	sp, #16
 8005086:	4770      	bx	lr

08005088 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8005088:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800508c:	4770      	bx	lr

0800508e <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 800508e:	680b      	ldr	r3, [r1, #0]
 8005090:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8005094:	2000      	movs	r0, #0
 8005096:	4770      	bx	lr

08005098 <SDIO_PowerState_ON>:
{  
 8005098:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800509a:	2303      	movs	r3, #3
 800509c:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800509e:	2002      	movs	r0, #2
 80050a0:	f7fe fd2a 	bl	8003af8 <HAL_Delay>
}
 80050a4:	2000      	movs	r0, #0
 80050a6:	bd08      	pop	{r3, pc}

080050a8 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050a8:	6800      	ldr	r0, [r0, #0]
}
 80050aa:	f000 0003 	and.w	r0, r0, #3
 80050ae:	4770      	bx	lr

080050b0 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 80050b0:	680b      	ldr	r3, [r1, #0]
 80050b2:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050b4:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 80050b6:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80050b8:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 80050ba:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 80050bc:	4313      	orrs	r3, r2
                       Command->CPSM);
 80050be:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 80050c0:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80050c2:	68c2      	ldr	r2, [r0, #12]
 80050c4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80050c8:	f022 020f 	bic.w	r2, r2, #15
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60c3      	str	r3, [r0, #12]
}
 80050d0:	2000      	movs	r0, #0
 80050d2:	4770      	bx	lr

080050d4 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 80050d4:	6900      	ldr	r0, [r0, #16]
}
 80050d6:	b2c0      	uxtb	r0, r0
 80050d8:	4770      	bx	lr

080050da <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80050da:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80050dc:	5840      	ldr	r0, [r0, r1]
}  
 80050de:	4770      	bx	lr

080050e0 <SDMMC_GetCmdResp1>:
{
 80050e0:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050e2:	4b52      	ldr	r3, [pc, #328]	; (800522c <SDMMC_GetCmdResp1+0x14c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4c52      	ldr	r4, [pc, #328]	; (8005230 <SDMMC_GetCmdResp1+0x150>)
 80050e8:	fba4 4303 	umull	r4, r3, r4, r3
 80050ec:	0a5b      	lsrs	r3, r3, #9
 80050ee:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 80050f2:	1e53      	subs	r3, r2, #1
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d060      	beq.n	80051ba <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 80050f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80050fa:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050fc:	f014 0f45 	tst.w	r4, #69	; 0x45
 8005100:	d0f7      	beq.n	80050f2 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005102:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8005106:	d1f4      	bne.n	80050f2 <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800510a:	f013 0f04 	tst.w	r3, #4
 800510e:	d107      	bne.n	8005120 <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005110:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005112:	f013 0f01 	tst.w	r3, #1
 8005116:	d007      	beq.n	8005128 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005118:	2301      	movs	r3, #1
 800511a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511c:	4618      	mov	r0, r3
 800511e:	e04e      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005120:	2304      	movs	r3, #4
 8005122:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005124:	4618      	mov	r0, r3
 8005126:	e04a      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
 8005128:	460d      	mov	r5, r1
 800512a:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800512c:	23c5      	movs	r3, #197	; 0xc5
 800512e:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005130:	f7ff ffd0 	bl	80050d4 <SDIO_GetCommandResponse>
 8005134:	42a8      	cmp	r0, r5
 8005136:	d001      	beq.n	800513c <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005138:	2001      	movs	r0, #1
 800513a:	e040      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800513c:	2100      	movs	r1, #0
 800513e:	4620      	mov	r0, r4
 8005140:	f7ff ffcb 	bl	80050da <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005144:	4b3b      	ldr	r3, [pc, #236]	; (8005234 <SDMMC_GetCmdResp1+0x154>)
 8005146:	4003      	ands	r3, r0
 8005148:	b3d3      	cbz	r3, 80051c0 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800514a:	2800      	cmp	r0, #0
 800514c:	db3a      	blt.n	80051c4 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800514e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005152:	d13a      	bne.n	80051ca <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005154:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8005158:	d139      	bne.n	80051ce <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800515a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800515e:	d138      	bne.n	80051d2 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005160:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8005164:	d138      	bne.n	80051d8 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005166:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800516a:	d138      	bne.n	80051de <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800516c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8005170:	d138      	bne.n	80051e4 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005172:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005176:	d138      	bne.n	80051ea <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005178:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800517c:	d138      	bne.n	80051f0 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800517e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8005182:	d138      	bne.n	80051f6 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005184:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8005188:	d138      	bne.n	80051fc <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800518a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800518e:	d138      	bne.n	8005202 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005190:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8005194:	d138      	bne.n	8005208 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005196:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800519a:	d138      	bne.n	800520e <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800519c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80051a0:	d138      	bne.n	8005214 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051a2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80051a6:	d138      	bne.n	800521a <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051a8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80051ac:	d138      	bne.n	8005220 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051ae:	f010 0f08 	tst.w	r0, #8
 80051b2:	d038      	beq.n	8005226 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80051b8:	e001      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 80051ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80051be:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 80051c0:	2000      	movs	r0, #0
 80051c2:	e7fc      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80051c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80051c8:	e7f9      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80051ca:	2040      	movs	r0, #64	; 0x40
 80051cc:	e7f7      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80051ce:	2080      	movs	r0, #128	; 0x80
 80051d0:	e7f5      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80051d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051d6:	e7f2      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80051d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80051dc:	e7ef      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80051e2:	e7ec      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051e8:	e7e9      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051ee:	e7e6      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80051f4:	e7e3      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80051fa:	e7e0      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 80051fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005200:	e7dd      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005202:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005206:	e7da      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005208:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800520c:	e7d7      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800520e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005212:	e7d4      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005214:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005218:	e7d1      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800521a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800521e:	e7ce      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8005220:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005224:	e7cb      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005226:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800522a:	e7c8      	b.n	80051be <SDMMC_GetCmdResp1+0xde>
 800522c:	2000000c 	.word	0x2000000c
 8005230:	10624dd3 	.word	0x10624dd3
 8005234:	fdffe008 	.word	0xfdffe008

08005238 <SDMMC_GetCmdResp6>:
{
 8005238:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800523a:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <SDMMC_GetCmdResp6+0x9c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4c26      	ldr	r4, [pc, #152]	; (80052d8 <SDMMC_GetCmdResp6+0xa0>)
 8005240:	fba4 4303 	umull	r4, r3, r4, r3
 8005244:	0a5c      	lsrs	r4, r3, #9
 8005246:	f241 3388 	movw	r3, #5000	; 0x1388
 800524a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 800524e:	1e5c      	subs	r4, r3, #1
 8005250:	b3b3      	cbz	r3, 80052c0 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 8005252:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005254:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005256:	f015 0f45 	tst.w	r5, #69	; 0x45
 800525a:	d0f8      	beq.n	800524e <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800525c:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8005260:	d1f5      	bne.n	800524e <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005262:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005264:	f013 0f04 	tst.w	r3, #4
 8005268:	d107      	bne.n	800527a <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800526a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800526c:	f013 0f01 	tst.w	r3, #1
 8005270:	d007      	beq.n	8005282 <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005272:	2301      	movs	r3, #1
 8005274:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005276:	4618      	mov	r0, r3
 8005278:	e024      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800527a:	2304      	movs	r3, #4
 800527c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800527e:	4618      	mov	r0, r3
 8005280:	e020      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
 8005282:	4616      	mov	r6, r2
 8005284:	460d      	mov	r5, r1
 8005286:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005288:	f7ff ff24 	bl	80050d4 <SDIO_GetCommandResponse>
 800528c:	42a8      	cmp	r0, r5
 800528e:	d001      	beq.n	8005294 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005290:	2001      	movs	r0, #1
 8005292:	e017      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005294:	23c5      	movs	r3, #197	; 0xc5
 8005296:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005298:	2100      	movs	r1, #0
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff ff1d 	bl	80050da <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052a0:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80052a4:	d008      	beq.n	80052b8 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052a6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80052aa:	d10c      	bne.n	80052c6 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052ac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80052b0:	d00c      	beq.n	80052cc <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80052b6:	e005      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052b8:	0c00      	lsrs	r0, r0, #16
 80052ba:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 80052bc:	2000      	movs	r0, #0
 80052be:	e001      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 80052c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80052ca:	e7fb      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80052d0:	e7f8      	b.n	80052c4 <SDMMC_GetCmdResp6+0x8c>
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80052dc:	680b      	ldr	r3, [r1, #0]
 80052de:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80052e0:	684b      	ldr	r3, [r1, #4]
 80052e2:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052e4:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 80052e6:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80052e8:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 80052ea:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 80052ec:	4313      	orrs	r3, r2
                       Data->DPSM);
 80052ee:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 80052f0:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80052f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80052f4:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80052f8:	4313      	orrs	r3, r2
 80052fa:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80052fc:	2000      	movs	r0, #0
 80052fe:	4770      	bx	lr

08005300 <SDMMC_CmdBlockLength>:
{
 8005300:	b530      	push	{r4, r5, lr}
 8005302:	b087      	sub	sp, #28
 8005304:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005306:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005308:	2410      	movs	r4, #16
 800530a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530c:	2340      	movs	r3, #64	; 0x40
 800530e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005310:	2300      	movs	r3, #0
 8005312:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005318:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800531a:	a901      	add	r1, sp, #4
 800531c:	f7ff fec8 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f7ff feda 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 800532c:	b007      	add	sp, #28
 800532e:	bd30      	pop	{r4, r5, pc}

08005330 <SDMMC_CmdReadSingleBlock>:
{
 8005330:	b530      	push	{r4, r5, lr}
 8005332:	b087      	sub	sp, #28
 8005334:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005336:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005338:	2411      	movs	r4, #17
 800533a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005340:	2300      	movs	r3, #0
 8005342:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005348:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800534a:	a901      	add	r1, sp, #4
 800534c:	f7ff feb0 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f7ff fec2 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 800535c:	b007      	add	sp, #28
 800535e:	bd30      	pop	{r4, r5, pc}

08005360 <SDMMC_CmdReadMultiBlock>:
{
 8005360:	b530      	push	{r4, r5, lr}
 8005362:	b087      	sub	sp, #28
 8005364:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005366:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005368:	2412      	movs	r4, #18
 800536a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800536c:	2340      	movs	r3, #64	; 0x40
 800536e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005370:	2300      	movs	r3, #0
 8005372:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005378:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800537a:	a901      	add	r1, sp, #4
 800537c:	f7ff fe98 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4621      	mov	r1, r4
 8005386:	4628      	mov	r0, r5
 8005388:	f7ff feaa 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 800538c:	b007      	add	sp, #28
 800538e:	bd30      	pop	{r4, r5, pc}

08005390 <SDMMC_CmdWriteSingleBlock>:
{
 8005390:	b530      	push	{r4, r5, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005396:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005398:	2418      	movs	r4, #24
 800539a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053a0:	2300      	movs	r3, #0
 80053a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053aa:	a901      	add	r1, sp, #4
 80053ac:	f7ff fe80 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f7ff fe92 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 80053bc:	b007      	add	sp, #28
 80053be:	bd30      	pop	{r4, r5, pc}

080053c0 <SDMMC_CmdWriteMultiBlock>:
{
 80053c0:	b530      	push	{r4, r5, lr}
 80053c2:	b087      	sub	sp, #28
 80053c4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80053c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80053c8:	2419      	movs	r4, #25
 80053ca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d0:	2300      	movs	r3, #0
 80053d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053da:	a901      	add	r1, sp, #4
 80053dc:	f7ff fe68 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4621      	mov	r1, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7ff fe7a 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 80053ec:	b007      	add	sp, #28
 80053ee:	bd30      	pop	{r4, r5, pc}

080053f0 <SDMMC_CmdStopTransfer>:
{
 80053f0:	b530      	push	{r4, r5, lr}
 80053f2:	b087      	sub	sp, #28
 80053f4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80053fa:	240c      	movs	r4, #12
 80053fc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005402:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005408:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800540a:	a901      	add	r1, sp, #4
 800540c:	f7ff fe50 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005410:	4a03      	ldr	r2, [pc, #12]	; (8005420 <SDMMC_CmdStopTransfer+0x30>)
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f7ff fe63 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 800541a:	b007      	add	sp, #28
 800541c:	bd30      	pop	{r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	05f5e100 	.word	0x05f5e100

08005424 <SDMMC_CmdSelDesel>:
{
 8005424:	b530      	push	{r4, r5, lr}
 8005426:	b087      	sub	sp, #28
 8005428:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800542a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800542c:	2407      	movs	r4, #7
 800542e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005430:	2340      	movs	r3, #64	; 0x40
 8005432:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005434:	2300      	movs	r3, #0
 8005436:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800543c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800543e:	a901      	add	r1, sp, #4
 8005440:	f7ff fe36 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f7ff fe48 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 8005450:	b007      	add	sp, #28
 8005452:	bd30      	pop	{r4, r5, pc}

08005454 <SDMMC_CmdGoIdleState>:
{
 8005454:	b510      	push	{r4, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800545e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005460:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005462:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005468:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800546a:	a901      	add	r1, sp, #4
 800546c:	f7ff fe20 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fd43 	bl	8004efc <SDMMC_GetCmdError>
}
 8005476:	b006      	add	sp, #24
 8005478:	bd10      	pop	{r4, pc}

0800547a <SDMMC_CmdOperCond>:
{
 800547a:	b510      	push	{r4, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005480:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005484:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005486:	2308      	movs	r3, #8
 8005488:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800548e:	2300      	movs	r3, #0
 8005490:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005496:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005498:	a901      	add	r1, sp, #4
 800549a:	f7ff fe09 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff fda0 	bl	8004fe4 <SDMMC_GetCmdResp7>
}
 80054a4:	b006      	add	sp, #24
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <SDMMC_CmdAppCommand>:
{
 80054a8:	b530      	push	{r4, r5, lr}
 80054aa:	b087      	sub	sp, #28
 80054ac:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80054ae:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80054b0:	2437      	movs	r4, #55	; 0x37
 80054b2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054b4:	2340      	movs	r3, #64	; 0x40
 80054b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054b8:	2300      	movs	r3, #0
 80054ba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054c2:	a901      	add	r1, sp, #4
 80054c4:	f7ff fdf4 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80054c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054cc:	4621      	mov	r1, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	f7ff fe06 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 80054d4:	b007      	add	sp, #28
 80054d6:	bd30      	pop	{r4, r5, pc}

080054d8 <SDMMC_CmdAppOperCommand>:
{
 80054d8:	b510      	push	{r4, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80054de:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80054e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80054e6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80054e8:	2329      	movs	r3, #41	; 0x29
 80054ea:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054ec:	2340      	movs	r3, #64	; 0x40
 80054ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054f0:	2300      	movs	r3, #0
 80054f2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054fa:	a901      	add	r1, sp, #4
 80054fc:	f7ff fdd8 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff fd47 	bl	8004f94 <SDMMC_GetCmdResp3>
}
 8005506:	b006      	add	sp, #24
 8005508:	bd10      	pop	{r4, pc}

0800550a <SDMMC_CmdBusWidth>:
{
 800550a:	b530      	push	{r4, r5, lr}
 800550c:	b087      	sub	sp, #28
 800550e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005510:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005512:	2406      	movs	r4, #6
 8005514:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800551a:	2300      	movs	r3, #0
 800551c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800551e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005522:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005524:	a901      	add	r1, sp, #4
 8005526:	f7ff fdc3 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4621      	mov	r1, r4
 8005530:	4628      	mov	r0, r5
 8005532:	f7ff fdd5 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 8005536:	b007      	add	sp, #28
 8005538:	bd30      	pop	{r4, r5, pc}

0800553a <SDMMC_CmdSendSCR>:
{
 800553a:	b530      	push	{r4, r5, lr}
 800553c:	b087      	sub	sp, #28
 800553e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005544:	2433      	movs	r4, #51	; 0x33
 8005546:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005548:	2240      	movs	r2, #64	; 0x40
 800554a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800554c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800554e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005552:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005554:	a901      	add	r1, sp, #4
 8005556:	f7ff fdab 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4621      	mov	r1, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f7ff fdbd 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 8005566:	b007      	add	sp, #28
 8005568:	bd30      	pop	{r4, r5, pc}

0800556a <SDMMC_CmdSendCID>:
{
 800556a:	b510      	push	{r4, lr}
 800556c:	b086      	sub	sp, #24
 800556e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005574:	2202      	movs	r2, #2
 8005576:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005578:	22c0      	movs	r2, #192	; 0xc0
 800557a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800557c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800557e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005582:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005584:	a901      	add	r1, sp, #4
 8005586:	f7ff fd93 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800558a:	4620      	mov	r0, r4
 800558c:	f7ff fcd2 	bl	8004f34 <SDMMC_GetCmdResp2>
}
 8005590:	b006      	add	sp, #24
 8005592:	bd10      	pop	{r4, pc}

08005594 <SDMMC_CmdSendCSD>:
{
 8005594:	b510      	push	{r4, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800559a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800559c:	2309      	movs	r3, #9
 800559e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055a0:	23c0      	movs	r3, #192	; 0xc0
 80055a2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ac:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055ae:	a901      	add	r1, sp, #4
 80055b0:	f7ff fd7e 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fcbd 	bl	8004f34 <SDMMC_GetCmdResp2>
}
 80055ba:	b006      	add	sp, #24
 80055bc:	bd10      	pop	{r4, pc}

080055be <SDMMC_CmdSetRelAdd>:
{
 80055be:	b570      	push	{r4, r5, r6, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	4605      	mov	r5, r0
 80055c4:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80055ca:	2403      	movs	r4, #3
 80055cc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ce:	2240      	movs	r2, #64	; 0x40
 80055d0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055da:	a901      	add	r1, sp, #4
 80055dc:	f7ff fd68 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80055e0:	4632      	mov	r2, r6
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f7ff fe27 	bl	8005238 <SDMMC_GetCmdResp6>
}
 80055ea:	b006      	add	sp, #24
 80055ec:	bd70      	pop	{r4, r5, r6, pc}

080055ee <SDMMC_CmdSendStatus>:
{
 80055ee:	b530      	push	{r4, r5, lr}
 80055f0:	b087      	sub	sp, #28
 80055f2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80055f4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80055f6:	240d      	movs	r4, #13
 80055f8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055fe:	2300      	movs	r3, #0
 8005600:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005606:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005608:	a901      	add	r1, sp, #4
 800560a:	f7ff fd51 	bl	80050b0 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f7ff fd63 	bl	80050e0 <SDMMC_GetCmdResp1>
}
 800561a:	b007      	add	sp, #28
 800561c:	bd30      	pop	{r4, r5, pc}
	...

08005620 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005620:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005622:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005626:	d001      	beq.n	800562c <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8005628:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800562a:	4770      	bx	lr
{
 800562c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	460d      	mov	r5, r1
 8005634:	4604      	mov	r4, r0
    MODIFY_REG(USARTx->CR1,
 8005636:	68c3      	ldr	r3, [r0, #12]
 8005638:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800563c:	f023 030c 	bic.w	r3, r3, #12
 8005640:	684a      	ldr	r2, [r1, #4]
 8005642:	68c9      	ldr	r1, [r1, #12]
 8005644:	430a      	orrs	r2, r1
 8005646:	6929      	ldr	r1, [r5, #16]
 8005648:	430a      	orrs	r2, r1
 800564a:	69a9      	ldr	r1, [r5, #24]
 800564c:	430a      	orrs	r2, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005652:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005654:	6902      	ldr	r2, [r0, #16]
 8005656:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800565a:	4313      	orrs	r3, r2
 800565c:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800565e:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005660:	6942      	ldr	r2, [r0, #20]
 8005662:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005666:	4313      	orrs	r3, r2
 8005668:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800566a:	4668      	mov	r0, sp
 800566c:	f7ff fc36 	bl	8004edc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005670:	4b49      	ldr	r3, [pc, #292]	; (8005798 <LL_USART_Init+0x178>)
 8005672:	429c      	cmp	r4, r3
 8005674:	d010      	beq.n	8005698 <LL_USART_Init+0x78>
    else if (USARTx == USART2)
 8005676:	4b49      	ldr	r3, [pc, #292]	; (800579c <LL_USART_Init+0x17c>)
 8005678:	429c      	cmp	r4, r3
 800567a:	d014      	beq.n	80056a6 <LL_USART_Init+0x86>
    else if (USARTx == USART3)
 800567c:	4b48      	ldr	r3, [pc, #288]	; (80057a0 <LL_USART_Init+0x180>)
 800567e:	429c      	cmp	r4, r3
 8005680:	d013      	beq.n	80056aa <LL_USART_Init+0x8a>
    else if (USARTx == USART6)
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <LL_USART_Init+0x184>)
 8005684:	429c      	cmp	r4, r3
 8005686:	d012      	beq.n	80056ae <LL_USART_Init+0x8e>
    else if (USARTx == UART4)
 8005688:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <LL_USART_Init+0x188>)
 800568a:	429c      	cmp	r4, r3
 800568c:	d011      	beq.n	80056b2 <LL_USART_Init+0x92>
    else if (USARTx == UART5)
 800568e:	4b47      	ldr	r3, [pc, #284]	; (80057ac <LL_USART_Init+0x18c>)
 8005690:	429c      	cmp	r4, r3
 8005692:	d010      	beq.n	80056b6 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 8005694:	2001      	movs	r0, #1
 8005696:	e07c      	b.n	8005792 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005698:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800569a:	2800      	cmp	r0, #0
 800569c:	d078      	beq.n	8005790 <LL_USART_Init+0x170>
        && (USART_InitStruct->BaudRate != 0U))
 800569e:	682b      	ldr	r3, [r5, #0]
 80056a0:	b95b      	cbnz	r3, 80056ba <LL_USART_Init+0x9a>
  ErrorStatus status = ERROR;
 80056a2:	2001      	movs	r0, #1
 80056a4:	e075      	b.n	8005792 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056a6:	9802      	ldr	r0, [sp, #8]
 80056a8:	e7f7      	b.n	800569a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056aa:	9802      	ldr	r0, [sp, #8]
 80056ac:	e7f5      	b.n	800569a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80056ae:	9803      	ldr	r0, [sp, #12]
 80056b0:	e7f3      	b.n	800569a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056b2:	9802      	ldr	r0, [sp, #8]
 80056b4:	e7f1      	b.n	800569a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056b6:	9802      	ldr	r0, [sp, #8]
 80056b8:	e7ef      	b.n	800569a <LL_USART_Init+0x7a>
      LL_USART_SetBaudRate(USARTx,
 80056ba:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80056c0:	d030      	beq.n	8005724 <LL_USART_Init+0x104>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80056c2:	f04f 0900 	mov.w	r9, #0
 80056c6:	1806      	adds	r6, r0, r0
 80056c8:	eb49 0709 	adc.w	r7, r9, r9
 80056cc:	eb16 0b00 	adds.w	fp, r6, r0
 80056d0:	eb47 0c09 	adc.w	ip, r7, r9
 80056d4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80056d8:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 80056dc:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 80056e0:	4694      	mov	ip, r2
 80056e2:	009a      	lsls	r2, r3, #2
 80056e4:	0f9b      	lsrs	r3, r3, #30
 80056e6:	1940      	adds	r0, r0, r5
 80056e8:	eb49 010c 	adc.w	r1, r9, ip
 80056ec:	f7fa fd6c 	bl	80001c8 <__aeabi_uldivmod>
 80056f0:	4d2f      	ldr	r5, [pc, #188]	; (80057b0 <LL_USART_Init+0x190>)
 80056f2:	fba5 3100 	umull	r3, r1, r5, r0
 80056f6:	0949      	lsrs	r1, r1, #5
 80056f8:	010a      	lsls	r2, r1, #4
 80056fa:	b292      	uxth	r2, r2
 80056fc:	2364      	movs	r3, #100	; 0x64
 80056fe:	fb03 0311 	mls	r3, r3, r1, r0
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	fba5 1303 	umull	r1, r3, r5, r3
 800570a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800570e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8005712:	440a      	add	r2, r1
 8005714:	b292      	uxth	r2, r2
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	4413      	add	r3, r2
 800571c:	b29b      	uxth	r3, r3
 800571e:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8005720:	2000      	movs	r0, #0
 8005722:	e036      	b.n	8005792 <LL_USART_Init+0x172>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005724:	4683      	mov	fp, r0
 8005726:	f04f 0c00 	mov.w	ip, #0
 800572a:	1806      	adds	r6, r0, r0
 800572c:	eb4c 070c 	adc.w	r7, ip, ip
 8005730:	eb16 0800 	adds.w	r8, r6, r0
 8005734:	eb47 090c 	adc.w	r9, r7, ip
 8005738:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800573c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005740:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 8005744:	4691      	mov	r9, r2
 8005746:	2100      	movs	r1, #0
 8005748:	18da      	adds	r2, r3, r3
 800574a:	eb41 0301 	adc.w	r3, r1, r1
 800574e:	eb1b 0005 	adds.w	r0, fp, r5
 8005752:	eb4c 0109 	adc.w	r1, ip, r9
 8005756:	f7fa fd37 	bl	80001c8 <__aeabi_uldivmod>
 800575a:	4d15      	ldr	r5, [pc, #84]	; (80057b0 <LL_USART_Init+0x190>)
 800575c:	fba5 3100 	umull	r3, r1, r5, r0
 8005760:	0949      	lsrs	r1, r1, #5
 8005762:	010a      	lsls	r2, r1, #4
 8005764:	b292      	uxth	r2, r2
 8005766:	2364      	movs	r3, #100	; 0x64
 8005768:	fb03 0311 	mls	r3, r3, r1, r0
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	3332      	adds	r3, #50	; 0x32
 8005770:	fba5 1303 	umull	r1, r3, r5, r3
 8005774:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005778:	0059      	lsls	r1, r3, #1
 800577a:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 800577e:	440a      	add	r2, r1
 8005780:	b292      	uxth	r2, r2
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	4413      	add	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	60a3      	str	r3, [r4, #8]
 800578c:	2000      	movs	r0, #0
 800578e:	e000      	b.n	8005792 <LL_USART_Init+0x172>
  ErrorStatus status = ERROR;
 8005790:	2001      	movs	r0, #1
}
 8005792:	b004      	add	sp, #16
 8005794:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8005798:	40011000 	.word	0x40011000
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	40011400 	.word	0x40011400
 80057a8:	40004c00 	.word	0x40004c00
 80057ac:	40005000 	.word	0x40005000
 80057b0:	51eb851f 	.word	0x51eb851f

080057b4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80057b4:	4b01      	ldr	r3, [pc, #4]	; (80057bc <LL_SetSystemCoreClock+0x8>)
 80057b6:	6018      	str	r0, [r3, #0]
}
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <HAL_SD_MspInit>:
/**
  * @brief  Initializes the SD SMP.
  * @param  hsd SD device handle.
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c2:	b08b      	sub	sp, #44	; 0x2c
  SET_BIT(RCC->APB2ENR, Periphs);
 80057c4:	4b1c      	ldr	r3, [pc, #112]	; (8005838 <HAL_SD_MspInit+0x78>)
 80057c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80057ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80057d4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80057d6:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	f042 0204 	orr.w	r2, r2, #4
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80057e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e2:	f002 0204 	and.w	r2, r2, #4
 80057e6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80057e8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80057ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ec:	f042 0208 	orr.w	r2, r2, #8
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80057fa:	9b01      	ldr	r3, [sp, #4]
   *  PC10    ------> SDIO_D2
   *  PC11    ------> SDIO_D3
   *  PC12    ------> SDIO_CK
   *  PD2     ------> SDIO_CMD
   */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9 | LL_GPIO_PIN_10 |
 80057fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005800:	9304      	str	r3, [sp, #16]
                        LL_GPIO_PIN_11 | LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005802:	2702      	movs	r7, #2
 8005804:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005806:	2603      	movs	r6, #3
 8005808:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800580a:	2400      	movs	r4, #0
 800580c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800580e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8005810:	250c      	movs	r5, #12
 8005812:	9509      	str	r5, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005814:	a904      	add	r1, sp, #16
 8005816:	4809      	ldr	r0, [pc, #36]	; (800583c <HAL_SD_MspInit+0x7c>)
 8005818:	f7ff fa1a 	bl	8004c50 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800581c:	2304      	movs	r3, #4
 800581e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005820:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005822:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005824:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005826:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8005828:	9509      	str	r5, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800582a:	a904      	add	r1, sp, #16
 800582c:	4804      	ldr	r0, [pc, #16]	; (8005840 <HAL_SD_MspInit+0x80>)
 800582e:	f7ff fa0f 	bl	8004c50 <LL_GPIO_Init>
}
 8005832:	b00b      	add	sp, #44	; 0x2c
 8005834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40020800 	.word	0x40020800
 8005840:	40020c00 	.word	0x40020c00

08005844 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005844:	b500      	push	{lr}
 8005846:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	460a      	mov	r2, r1
 800584e:	4601      	mov	r1, r0
 8005850:	4803      	ldr	r0, [pc, #12]	; (8005860 <BSP_SD_ReadBlocks+0x1c>)
 8005852:	f7fe fcef 	bl	8004234 <HAL_SD_ReadBlocks>
 8005856:	b100      	cbz	r0, 800585a <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8005858:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800585a:	b003      	add	sp, #12
 800585c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005860:	20001170 	.word	0x20001170

08005864 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005864:	b500      	push	{lr}
 8005866:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	460a      	mov	r2, r1
 800586e:	4601      	mov	r1, r0
 8005870:	4803      	ldr	r0, [pc, #12]	; (8005880 <BSP_SD_WriteBlocks+0x1c>)
 8005872:	f7fe fe13 	bl	800449c <HAL_SD_WriteBlocks>
 8005876:	b100      	cbz	r0, 800587a <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8005878:	2001      	movs	r0, #1
  }

  return sd_state;  
}
 800587a:	b003      	add	sp, #12
 800587c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005880:	20001170 	.word	0x20001170

08005884 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005884:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005886:	4803      	ldr	r0, [pc, #12]	; (8005894 <BSP_SD_GetCardState+0x10>)
 8005888:	f7ff f932 	bl	8004af0 <HAL_SD_GetCardState>
}
 800588c:	3804      	subs	r0, #4
 800588e:	bf18      	it	ne
 8005890:	2001      	movne	r0, #1
 8005892:	bd08      	pop	{r3, pc}
 8005894:	20001170 	.word	0x20001170

08005898 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005898:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800589a:	4601      	mov	r1, r0
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <BSP_SD_GetCardInfo+0xc>)
 800589e:	f7ff f8c2 	bl	8004a26 <HAL_SD_GetCardInfo>
}
 80058a2:	bd08      	pop	{r3, pc}
 80058a4:	20001170 	.word	0x20001170

080058a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80058a8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 80058b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80058b4:	b002      	add	sp, #8
 80058b6:	4770      	bx	lr

080058b8 <BSP_SD_Init>:
{
 80058b8:	b510      	push	{r4, lr}
  hsd.Instance = SDIO;
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <BSP_SD_Init+0x44>)
 80058bc:	4a10      	ldr	r2, [pc, #64]	; (8005900 <BSP_SD_Init+0x48>)
 80058be:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80058c0:	2200      	movs	r2, #0
 80058c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80058c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80058c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80058c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80058ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80058cc:	2203      	movs	r2, #3
 80058ce:	619a      	str	r2, [r3, #24]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80058d0:	f7ff ffea 	bl	80058a8 <BSP_SD_IsDetected>
 80058d4:	2801      	cmp	r0, #1
 80058d6:	d002      	beq.n	80058de <BSP_SD_Init+0x26>
    return MSD_ERROR;
 80058d8:	2401      	movs	r4, #1
}
 80058da:	4620      	mov	r0, r4
 80058dc:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 80058de:	4807      	ldr	r0, [pc, #28]	; (80058fc <BSP_SD_Init+0x44>)
 80058e0:	f7ff f882 	bl	80049e8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80058e4:	4604      	mov	r4, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d1f7      	bne.n	80058da <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80058ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058ee:	4803      	ldr	r0, [pc, #12]	; (80058fc <BSP_SD_Init+0x44>)
 80058f0:	f7ff f8ac 	bl	8004a4c <HAL_SD_ConfigWideBusOperation>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d0f0      	beq.n	80058da <BSP_SD_Init+0x22>
      sd_state = MSD_ERROR;
 80058f8:	2401      	movs	r4, #1
 80058fa:	e7ee      	b.n	80058da <BSP_SD_Init+0x22>
 80058fc:	20001170 	.word	0x20001170
 8005900:	40012c00 	.word	0x40012c00

08005904 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
 8005904:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if (DiskInitialized == 0)
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <disk_initialize+0x1c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	b10b      	cbz	r3, 8005910 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800590c:	2000      	movs	r0, #0
  {
    DiskInitialized = 1;
    stat = SD_initialize(0);
  }
  return stat;
}
 800590e:	bd08      	pop	{r3, pc}
    DiskInitialized = 1;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <disk_initialize+0x1c>)
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
    stat = SD_initialize(0);
 8005916:	2000      	movs	r0, #0
 8005918:	f000 f82a 	bl	8005970 <SD_initialize>
 800591c:	e7f7      	b.n	800590e <disk_initialize+0xa>
 800591e:	bf00      	nop
 8005920:	2000114c 	.word	0x2000114c

08005924 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv  /* Physical drive nmuber (0) */
)
{
 8005924:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = SD_status(0);
 8005926:	2000      	movs	r0, #0
 8005928:	f000 f836 	bl	8005998 <SD_status>
  return stat;
}
 800592c:	bd08      	pop	{r3, pc}

0800592e <disk_read>:
	BYTE pdrv,     /* Physical drive nmuber to identify the drive */
	BYTE *buff,    /* Data buffer to store read data */
	DWORD sector,  /* Sector address in LBA */
	UINT count     /* Number of sectors to read */
)
{
 800592e:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_read(0, buff, sector, count);
 8005930:	2000      	movs	r0, #0
 8005932:	f000 f835 	bl	80059a0 <SD_read>
  return res;
}
 8005936:	bd08      	pop	{r3, pc}

08005938 <disk_write>:
	BYTE pdrv,         /* Physical drive nmuber to identify the drive */
	const BYTE *buff,  /* Data to be written */
	DWORD sector,      /* Sector address in LBA */
	UINT count         /* Number of sectors to write */
)
{
 8005938:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_write(0, buff, sector, count);
 800593a:	2000      	movs	r0, #0
 800593c:	f000 f840 	bl	80059c0 <SD_write>
  return res;
}
 8005940:	bd08      	pop	{r3, pc}

08005942 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,    /* Physical drive nmuber (0) */
	BYTE cmd,     /* Control code */
	void *buff    /* Buffer to send/receive data block */
)
{
 8005942:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_ioctl(0, cmd, buff);
 8005944:	2000      	movs	r0, #0
 8005946:	f000 f84b 	bl	80059e0 <SD_ioctl>
  return res;
}
 800594a:	bd08      	pop	{r3, pc}

0800594c <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800594c:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <SD_CheckStatus+0x20>)
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005954:	f7ff ff96 	bl	8005884 <BSP_SD_GetCardState>
 8005958:	b920      	cbnz	r0, 8005964 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800595a:	4a04      	ldr	r2, [pc, #16]	; (800596c <SD_CheckStatus+0x20>)
 800595c:	7813      	ldrb	r3, [r2, #0]
 800595e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005962:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <SD_CheckStatus+0x20>)
 8005966:	7818      	ldrb	r0, [r3, #0]
}
 8005968:	bd08      	pop	{r3, pc}
 800596a:	bf00      	nop
 800596c:	20000008 	.word	0x20000008

08005970 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <SD_initialize+0x24>)
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800597a:	f7ff ff9d 	bl	80058b8 <BSP_SD_Init>
 800597e:	b110      	cbz	r0, 8005986 <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <SD_initialize+0x24>)
 8005982:	7818      	ldrb	r0, [r3, #0]
}
 8005984:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff ffe0 	bl	800594c <SD_CheckStatus>
 800598c:	4b01      	ldr	r3, [pc, #4]	; (8005994 <SD_initialize+0x24>)
 800598e:	7018      	strb	r0, [r3, #0]
 8005990:	e7f6      	b.n	8005980 <SD_initialize+0x10>
 8005992:	bf00      	nop
 8005994:	20000008 	.word	0x20000008

08005998 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005998:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800599a:	f7ff ffd7 	bl	800594c <SD_CheckStatus>
}
 800599e:	bd08      	pop	{r3, pc}

080059a0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80059a0:	b508      	push	{r3, lr}
 80059a2:	4608      	mov	r0, r1
 80059a4:	4611      	mov	r1, r2
 80059a6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ac:	f7ff ff4a 	bl	8005844 <BSP_SD_ReadBlocks>
 80059b0:	b920      	cbnz	r0, 80059bc <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80059b2:	f7ff ff67 	bl	8005884 <BSP_SD_GetCardState>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1fb      	bne.n	80059b2 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80059ba:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80059bc:	2001      	movs	r0, #1
 80059be:	e7fc      	b.n	80059ba <SD_read+0x1a>

080059c0 <SD_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80059c0:	b508      	push	{r3, lr}
 80059c2:	4608      	mov	r0, r1
 80059c4:	4611      	mov	r1, r2
 80059c6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295
 80059cc:	f7ff ff4a 	bl	8005864 <BSP_SD_WriteBlocks>
 80059d0:	b920      	cbnz	r0, 80059dc <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80059d2:	f7ff ff57 	bl	8005884 <BSP_SD_GetCardState>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d1fb      	bne.n	80059d2 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80059da:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80059dc:	2001      	movs	r0, #1
 80059de:	e7fc      	b.n	80059da <SD_write+0x1a>

080059e0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <SD_ioctl+0x58>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f013 0f01 	tst.w	r3, #1
 80059e8:	d121      	bne.n	8005a2e <SD_ioctl+0x4e>
{
 80059ea:	b510      	push	{r4, lr}
 80059ec:	b088      	sub	sp, #32
 80059ee:	4614      	mov	r4, r2

  switch (cmd)
 80059f0:	2903      	cmp	r1, #3
 80059f2:	d81e      	bhi.n	8005a32 <SD_ioctl+0x52>
 80059f4:	e8df f001 	tbb	[pc, r1]
 80059f8:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80059fc:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 80059fe:	b008      	add	sp, #32
 8005a00:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005a02:	4668      	mov	r0, sp
 8005a04:	f7ff ff48 	bl	8005898 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a08:	9b06      	ldr	r3, [sp, #24]
 8005a0a:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8005a0c:	2000      	movs	r0, #0
    break;
 8005a0e:	e7f6      	b.n	80059fe <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005a10:	4668      	mov	r0, sp
 8005a12:	f7ff ff41 	bl	8005898 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005a16:	9b07      	ldr	r3, [sp, #28]
 8005a18:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8005a1a:	2000      	movs	r0, #0
    break;
 8005a1c:	e7ef      	b.n	80059fe <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8005a1e:	4668      	mov	r0, sp
 8005a20:	f7ff ff3a 	bl	8005898 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	0a5b      	lsrs	r3, r3, #9
 8005a28:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8005a2a:	2000      	movs	r0, #0
    break;
 8005a2c:	e7e7      	b.n	80059fe <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a2e:	2003      	movs	r0, #3
}
 8005a30:	4770      	bx	lr
    res = RES_PARERR;
 8005a32:	2004      	movs	r0, #4
 8005a34:	e7e3      	b.n	80059fe <SD_ioctl+0x1e>
 8005a36:	bf00      	nop
 8005a38:	20000008 	.word	0x20000008

08005a3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <SystemInit+0x18>)
 8005a3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4e0d      	ldr	r6, [pc, #52]	; (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1ba4      	subs	r4, r4, r6
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2500      	movs	r5, #0
 8005a64:	42a5      	cmp	r5, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4e0b      	ldr	r6, [pc, #44]	; (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f000 f84e 	bl	8005b0c <_init>
 8005a70:	1ba4      	subs	r4, r4, r6
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2500      	movs	r5, #0
 8005a76:	42a5      	cmp	r5, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a80:	4798      	blx	r3
 8005a82:	3501      	adds	r5, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a8a:	4798      	blx	r3
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	08006394 	.word	0x08006394
 8005a94:	08006394 	.word	0x08006394
 8005a98:	08006394 	.word	0x08006394
 8005a9c:	08006398 	.word	0x08006398

08005aa0 <__locale_ctype_ptr>:
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <__locale_ctype_ptr+0x14>)
 8005aa2:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <__locale_ctype_ptr+0x18>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf08      	it	eq
 8005aac:	4613      	moveq	r3, r2
 8005aae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005ab2:	4770      	bx	lr
 8005ab4:	20000010 	.word	0x20000010
 8005ab8:	20000074 	.word	0x20000074

08005abc <__ascii_mbtowc>:
 8005abc:	b082      	sub	sp, #8
 8005abe:	b901      	cbnz	r1, 8005ac2 <__ascii_mbtowc+0x6>
 8005ac0:	a901      	add	r1, sp, #4
 8005ac2:	b142      	cbz	r2, 8005ad6 <__ascii_mbtowc+0x1a>
 8005ac4:	b14b      	cbz	r3, 8005ada <__ascii_mbtowc+0x1e>
 8005ac6:	7813      	ldrb	r3, [r2, #0]
 8005ac8:	600b      	str	r3, [r1, #0]
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	1c10      	adds	r0, r2, #0
 8005ace:	bf18      	it	ne
 8005ad0:	2001      	movne	r0, #1
 8005ad2:	b002      	add	sp, #8
 8005ad4:	4770      	bx	lr
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	e7fb      	b.n	8005ad2 <__ascii_mbtowc+0x16>
 8005ada:	f06f 0001 	mvn.w	r0, #1
 8005ade:	e7f8      	b.n	8005ad2 <__ascii_mbtowc+0x16>

08005ae0 <memset>:
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d100      	bne.n	8005aea <memset+0xa>
 8005ae8:	4770      	bx	lr
 8005aea:	f803 1b01 	strb.w	r1, [r3], #1
 8005aee:	e7f9      	b.n	8005ae4 <memset+0x4>

08005af0 <__ascii_wctomb>:
 8005af0:	b149      	cbz	r1, 8005b06 <__ascii_wctomb+0x16>
 8005af2:	2aff      	cmp	r2, #255	; 0xff
 8005af4:	bf85      	ittet	hi
 8005af6:	238a      	movhi	r3, #138	; 0x8a
 8005af8:	6003      	strhi	r3, [r0, #0]
 8005afa:	700a      	strbls	r2, [r1, #0]
 8005afc:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b00:	bf98      	it	ls
 8005b02:	2001      	movls	r0, #1
 8005b04:	4770      	bx	lr
 8005b06:	4608      	mov	r0, r1
 8005b08:	4770      	bx	lr
	...

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
